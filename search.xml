<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>面向对象VS面向过程</title>
    <url>/2022-08-30-15-11-00-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1VS%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本文为转载，原文为：http://zhidao.baidu.com/question/2089034/answer/9637033</p>
<h3 id="概念">1、概念：</h3>
<p>面向过程就是分析出解决问题所需要的<strong>步骤</strong>，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</p>
<p>面向对象是把构成问题事务分解成各个<strong>对象</strong>，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。</p>
<span id="more"></span>
<h3 id="实际案例讲解">2、实际案例讲解：</h3>
<p>例如五子棋，面向过程的设计思路就是首先分析问题的步骤：1、开始游戏，2、黑子先走，3、绘制画面，4、判断输赢，5、轮到白子，6、绘制画面，7、判断输赢，8、返回步骤2，9、输出最后结果。把上面每个步骤用分别的函数来实现，问题就解决了。</p>
<p>而面向对象的设计则是从另外的思路来解决问题。整个五子棋可以分为
1、黑白双方，这两方的行为是一模一样的，2、棋盘系统，负责绘制画面，3、规则系统，负责判定诸如犯规、输赢等。第一类对象（玩家对象）负责接受用户输入，并告知第二类对象（棋盘对象）棋子布局的变化，棋盘对象接收到了棋子的i变化就要负责在屏幕上面显示出这种变化，同时利用第三类对象（规则系统）来对棋局进行判定。</p>
<p>可以明显地看出，<strong>面向对象是以功能来划分问题，而不是步骤。</strong>同样是绘制棋局，这样的行为在面向过程的设计中分散在了总多步骤中，很可能出现不同的绘制版本，因为通常设计人员会考虑到实际情况进行各种各样的简化。而面向对象的设计中，绘图只可能在棋盘对象中出现，从而保证了绘图的统一。</p>
<p>功能上的统一保证了面向对象设计的可扩展性。比如我要加入悔棋的功能，如果要改动面向过程的设计，那么从输入到判断到显示这一连串的步骤都要改动，甚至步骤之间的循序都要进行大规模调整。如果是面向对象的话，只用改动棋盘对象就行了，棋盘系统保存了黑白双方的棋谱，简单回溯就可以了，而显示和规则判断则不用顾及，同时整个对对象功能的调用顺序都没有变化，改动只是局部的。</p>
<p>再比如我要把这个五子棋游戏改为围棋游戏，如果你是面向过程设计，那么五子棋的规则就分布在了你的程序的每一个角落，要改动还不如重写。但是如果你当初就是面向对象的设计，那么你只用改动规则对象就可以了，五子棋和围棋的区别不就是规则吗？（当然棋盘大小好像也不一样，但是你会觉得这是一个难题吗？直接在棋盘对象中进行一番小改动就可以了。）而下棋的大致步骤从面向对象的角度来看没有任何变化。</p>
<p>当然，要达到改动只是局部的需要设计的人有足够的经验，使用对象不能保证你的程序就是面向对象，初学者或者很蹩脚的程序员很可能以面向对象之虚而行面向过程之实，这样设计出来的所谓面向对象的程序很难有良好的可移植性和可扩展性。</p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Vscode 的使用</title>
    <url>/2022-09-01-10-33-44-Vscode%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>setting.json文件配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;            //有自己添加的内容都要放到这个花括号里</span><br><span class="line"></span><br><span class="line">//配置a</span><br><span class="line">adfadfd,     //如果后面还有内容，前面的语句一定要有一个英文逗号</span><br><span class="line">// 配置b</span><br><span class="line">adfadff</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Endnote X9 Tips</title>
    <url>/Endnote-X9%E6%96%87%E7%8C%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><strong>Endnote X9
添加标签</strong>：在题录列表区，右键选择label打钩即可，如果为灰色表示10个field都用完了，需要取消其中至少一个field，才可以添加label。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208071606734.png" /></p>
<p>EndNote的文献题录列表区最多可以展示10个field，大家可按需求进行选择。选择展示的field的方法，共<a
href="https://zhuanlan.zhihu.com/p/110516363">两种</a>：</p>
<p><strong>方法1：</strong>右击任意Field→对Field进行勾选/取消勾选</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208072217926.png"
alt="image-20220807221756570" />
<figcaption aria-hidden="true">image-20220807221756570</figcaption>
</figure>
<p><strong>方法2：</strong>Edit→Preferences→Display
Fields。此方法可以同时调整顺序及Field在文献题录列表区的列名。</p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>文献管理</tag>
        <tag>Endnote</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-base</title>
    <url>/Linux-base/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="base">1、Base</h1>
<ul>
<li><code>ls -lsh 目录名</code> <code>-l</code> 列出详细信息 (l: list)
<code>-sh</code> 显示人类可读方式文件大小 (s: size; h: human
readable)</li>
<li><code>cd -</code> 回到刚才的目录<code>.</code> 当前目录
<code>..</code>父目录</li>
<li>wc命令 -l -c -w - c 统计字节数。 -l 统计行数。 -w 统计字数。</li>
<li>which命令：在PATH变量指定的路径中，<strong>搜索某个系统命令的位置</strong>，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。
<sup id="fnref:10"><a href="#fn:10" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[每天一个linux命令（16）：which命令 - peida - 博客园 (cnblogs.com)](https://www.cnblogs.com/peida/archive/2012/11/08/2759805.html)
">[10]</span></a></sup></li>
<li>find命令：查找文件/文件夹<br />
<code>find ~/ -name test -type -d</code>
：查找家目录下，类型为目录的test <code>-type</code>
类型参数<sup id="fnref:11"><a href="#fn:11" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[linux find 命令查找文件和文件夹 - jiftle - 博客园 (cnblogs.com)](https://www.cnblogs.com/jiftle/p/9707518.html)
">[11]</span></a></sup> 类型参数列表： f 普通文件 l 符号连接 d 目录 c
字符设备 b 块设备 s 套接字 p Fifo</li>
<li>paste
命令用于合并文件的列<sup id="fnref:13"><a href="#fn:13" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[Linux paste 命令 | 菜鸟教程 (runoob.com)](https://www.runoob.com/linux/linux-comm-paste.html)
">[13]</span></a></sup></li>
<li><code>alias name=value</code>
设置的命令需要加参数或者是多个命令的组合，那么value需要加上''(单引号)或者""(双引号)。设置多个命令的组合时，还需要在不同命令间加上;(分号)，例如<code>cdlog='cd /var/log/server_log; ls'</code></li>
<li></li>
</ul>
<h1 id="linux-文件颜色含义">2、Linux 文件颜色含义</h1>
<p>Linux系统颜色默认表示的文件类型： 蓝色表示目录； 绿色表示可执行文件；
红色表示压缩文件； 浅蓝色表示链接文件； 灰色表示其它文件；
红色闪烁表示链接的文件有问题了； 黄色是设备文件，包括block, char, fifo。
用dircolors
-p看到缺省的颜色设置，包括各种颜色和“粗体”，下划线，闪烁等定义。<sup id="fnref:12"><a href="#fn:12" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[(87条消息) linux软连接出现红色闪烁_Danker01的博客-CSDN博客_软连接红色](https://blog.csdn.net/weixin_42575020/article/details/105952464)
">[12]</span></a></sup></p>
<h1 id="软链接-硬链接">3、软链接 &amp; 硬链接</h1>
<p><code>ln -s  源文件（源目录） 目标文件（目标目录）</code>
创建软链接（类似于快捷方式，大小较小）
不填写目标文件或目标目录，默认在当前目录创建软链接，可填写目标目录/名称，即可重命令软链接名称。</p>
<p><code>ln 源文件 目标文件</code> 创建硬链接（类似于cp -p 加 同步更新
）<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[(84条消息) 软链接和硬链接到底有啥作用和区别_明月几时有666的博客-CSDN博客_软连接和硬连接的优缺点](https://blog.csdn.net/gao_zhennan/article/details/79127232)
">[1]</span></a></sup> <code>ln  -s  source/*  target/</code>
把一个文件夹下的所有文件软连接到另一个文件夹下，即每个文件都有一个软链接。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[(84条消息) linux软连接多个文件 批量_dingdongkk的博客-CSDN博客_软链接多个文件](https://blog.csdn.net/sinat_29891353/article/details/69525388)
">[2]</span></a></sup></p>
<p><code>wget -c -b</code> -c 断点续传 -b 后台运行</p>
<h1 id="前后台命令">4、前后台命令 </h1>
<p><code>nohup  命令   &gt; run.log 2&gt;&amp;1 &amp;</code>
后台执行，不挂断，标准输出和错误输出都放到log文件里
把标准错误（2）重定向到标准输出中（1），而标准输出又导入文件output里面。
&gt;console.txt，实际是 1&gt;console.txt的省略用法；&lt; console.txt
，实际是 0 &lt;
console.txt的省略用法。<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="https://blog.csdn.net/ianly123/article/details/85113539
">[3]</span></a></sup></p>
<p>使用nohup关闭终端回来：用<code>ps -aux|grep 软件名</code>，前提是记住自己运行的软件名。<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[(85条消息) nohup使用笔记，后台运行，进程查看与终止_wanghua609的博客-CSDN博客_nohup进程](https://blog.csdn.net/weixin_38145317/article/details/124037568)
">[4]</span></a></sup> 未关闭终端：<code>jobs</code>
查看当前终端后台运行命令 ，终端关闭后无法查看。</p>
<p>命令前后台切换<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[Linux程序前台后台切换 - G先生 - 博客园 (cnblogs.com)](https://www.cnblogs.com/geogre123/p/10643152.html)
">[5]</span></a></sup>： 后台执行命令：<code>命令 &amp;</code>
程序正在前台运行： Ctrl+z 选项把程序暂停，在最后一行加上bg %number
（number用<code>job -l</code> 查看） 程序正在后台运行：fg %number
把程序掉到前台 终止后台运行的程序：kill %number</p>
<h1 id="wsl-vmware">5、WSL &amp; VMware </h1>
<p>WSL依赖于hyper-v必须开启，而VMware不依赖这个，必须关闭<sup id="fnref:7"><a href="#fn:7" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="https://blog.csdn.net/qq_34398519/article/details/114289586
">[7]</span></a></sup> CMD管理员模式启动，输入bcdedit /set
hypervisorlaunchtype auto开启，则可以使用WSL
CMD管理员模式启动，输入bcdedit /set hypervisorlaunchtype
off关闭，则可以使用VMware</p>
<h1 id="解压缩">6、解压缩</h1>
<p><code>tar zxvf  aaa.tar.gz</code><sup id="fnref:8"><a href="#fn:8" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[(87条消息) tar -zxvf是什么意思_ProLayman的博客-CSDN博客_tar –zxvf]:(https://blog.csdn.net/ProLayman/article/details/114577007)
">[8]</span></a></sup></p>
<table>
<thead>
<tr class="header">
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>tar</td>
<td>Linux压缩/解压缩工具</td>
</tr>
<tr class="even">
<td>-z</td>
<td>代表gzip，使用gzip工具进行压缩或解压</td>
</tr>
<tr class="odd">
<td>-x</td>
<td>代表extract，解压文件</td>
</tr>
<tr class="even">
<td>-v</td>
<td>代表verbose，显示解压过程（文件列表）</td>
</tr>
<tr class="odd">
<td>-f</td>
<td>代表file，指定要解压的文件名（or 要压缩成的文件名）</td>
</tr>
<tr class="even">
<td>-c</td>
<td>代表create，创建一个新文件</td>
</tr>
<tr class="odd">
<td>-j</td>
<td>通过 bzip2 过滤存档</td>
</tr>
<tr class="even">
<td></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th>tar 命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>tar -cvf xxx.tar file</td>
<td>创建非压缩tar包</td>
</tr>
<tr class="even">
<td>tar -cvf xxx.tar file1 file2 dir1</td>
<td>将多个⽂件+⽬录打tar包</td>
</tr>
<tr class="odd">
<td>tar -tf xxx.tar</td>
<td>查看tar包的内容</td>
</tr>
<tr class="even">
<td>tar -xvf xxx.tar</td>
<td>解压tar包</td>
</tr>
<tr class="odd">
<td>tar -xvf xxx.tar -C /dir</td>
<td>将tar包解压⾄指定⽬录</td>
</tr>
<tr class="even">
<td>tar -cvfj xxx.tar.bz2 dir</td>
<td>创建bz2压缩包</td>
</tr>
<tr class="odd">
<td>tar -jxvf xxx.tar.bz2</td>
<td>解压bz2压缩包</td>
</tr>
<tr class="even">
<td>tar -cvfz xxx.tar.gz dir</td>
<td>创建gzip压缩包</td>
</tr>
<tr class="odd">
<td>tar -zxvf xxx.tar.gz</td>
<td>解压gzip压缩包</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>zip xxx.zip file</td>
<td>压缩⾄zip包</td>
</tr>
<tr class="even">
<td>zip -r xxx.zip file1 file2 dir1</td>
<td>将多个⽂件+⽬录压成zip包</td>
</tr>
<tr class="odd">
<td>unzip xxx.zip</td>
<td>解压zip包</td>
</tr>
<tr class="even">
<td>bunzip2 xxx.bz2</td>
<td>解压bz2压缩包</td>
</tr>
<tr class="odd">
<td>bzip2 filename</td>
<td>压缩⽂件</td>
</tr>
<tr class="even">
<td>gunzip xxx.gz</td>
<td>解压gzip压缩包</td>
</tr>
<tr class="odd">
<td>gzip filename</td>
<td>压缩⽂件</td>
</tr>
<tr class="even">
<td>gzip -9 filename</td>
<td>最⼤程度压缩</td>
</tr>
</tbody>
</table>
<p>推荐阅读：</p>
<p><a href="https://linux.die.net/man/1/tar">tar(1): manual page for tar
1.23 - Linux man page (die.net)</a>
https://mp.weixin.qq.com/s/Kog6AfXYINIDwKMpJMkGFQ</p>
<h1 id="添加环境变量">7、添加环境变量</h1>
<p>临时：<code>export PATH=/usr/local/nginx/sbin/:$PATH</code>，将/usr/local/nginx/sbin/目录临时添加到环境变量中<sup id="fnref:9"><a href="#fn:9" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[linux添加环境变量 - ilovetesting - 博客园 (cnblogs.com)](https://www.cnblogs.com/yaoqingzhuan/p/10889718.html)
">[9]</span></a></sup></p>
<p>当前用户永久：<code>vim ~/.bashrc</code>将一下内容添加进去：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 注意等号后边要加引号，与临时添加有所差别；路径用绝对路径，不管是临时还是永久添加，不要~，用pwd去获得绝对路径</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/nginx/sbin/:<span class="variable">$PATH</span>&quot;</span> </span><br></pre></td></tr></table></figure>
<h1 id="软件推荐">8、软件推荐</h1>
<ul>
<li>bat 类似于cat ，比cat好用。</li>
<li>fd 搜索文件，代替find (centos安装不便，放弃)</li>
<li><a
href="https://bbs.deepin.org/post/135130">类似Windows的listary</a>：桌面的话推荐
FSearch 和 ANGRYsearch，命令行的话推荐 fzf。</li>
</ul>
<h1 id="查看系统版本">9、查看系统版本</h1>
<p><a href="https://linux.cn/article-9586-1.html">来源</a></p>
<ul>
<li><p><strong>lsb_release -a</strong>： (LSB（Linux 标准库Linux
Standard
Base）能够打印发行版的具体信息，包括发行版名称、版本号、代号等。)</p></li>
<li><p>**/etc/*-release 文件**：release 文件通常被视为操作系统的标识。在
/etc
目录下放置了很多记录着发行版各种信息的文件，每个发行版都各自有一套这样记录着相关信息的文件。</p></li>
</ul>
<p>Ubuntu/Debian 系统上：</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/issue</span><br><span class="line">cat /etc/issue.net</span><br><span class="line">cat /etc/lsb-release</span><br><span class="line">cat /etc/os-release</span><br><span class="line">cat /etc/debian_version</span><br></pre></td></tr></table></figure></p>
<p>RHEL/CentOS/Fedora：</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/centos-release</span><br><span class="line">cat /etc/fedora-release</span><br><span class="line">cat /etc/os-release</span><br><span class="line">cat /etc/redhat-release</span><br><span class="line">cat /etc/system-release</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p><strong>uname -a</strong>：uname（unix name 的意思）
是一个打印系统信息的工具，包括内核名称、版本号、系统详细信息以及所运行的操作系统等等。</p></li>
<li><p><strong>cat /proc/version</strong>：这个文件记录了 Linux
内核的版本、用于编译内核的 gcc
的版本、内核编译的时间，以及内核编译者的用户名。</p></li>
<li><p><strong>dmesg | grep "Linux"</strong>：dmesg（展示信息display
message 或驱动程序信息driver message）是大多数类 Unix
操作系统上的一个命令，用于打印内核的消息缓冲区的信息。</p></li>
<li><p><strong>Yum/Dnf 命令</strong>：Yum（Yellowdog
更新器修改版Yellowdog Updater Modified）是 Linux
操作系统上的一个包管理工具，而 <code>yum</code> 命令被用于一些基于
RedHat 的 Linux 发行版上安装、更新、查找、删除软件包。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum info nano</span><br><span class="line">yum repolist  #显示了 yum 的基础源仓库、额外源仓库、更新源仓库</span><br></pre></td></tr></table></figure>
<p><code>dnf</code> 命令也同样可以查看发行版名称和版本号。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dnf info nano</span><br></pre></td></tr></table></figure></li>
<li><p><strong>rpm -q nano</strong>：RPM（红帽包管理器RedHat Package
Manager）是在 CentOS、Oracle Linux、Fedora 这些基于 RedHat
的操作系统上的一个强大的命令行包管理工具，同样也可以帮助我们查看系统的版本信息。</p></li>
<li><p><strong>apt-cache policy
nano</strong>：Apt-Get（高级打包工具Advanced Packaging
Tool）是一个强大的命令行工具，可以自动下载安装新软件包、更新已有的软件包、更新软件包列表索引，甚至更新整个
Debian 系统。</p></li>
</ul>
<h1 id="参考文章">参考文章</h1>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/gao_zhennan/article/details/79127232">(84条消息)
软链接和硬链接到底有啥作用和区别_明月几时有666的博客-CSDN博客_软连接和硬连接的优缺点</a><a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/sinat_29891353/article/details/69525388">(84条消息)
linux软连接多个文件
批量_dingdongkk的博客-CSDN博客_软链接多个文件</a><a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:3">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">https://blog.csdn.net/ianly123/article/details/85113539<a href="#fnref:3" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:4">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/weixin_38145317/article/details/124037568">(85条消息)
nohup使用笔记，后台运行，进程查看与终止_wanghua609的博客-CSDN博客_nohup进程</a><a href="#fnref:4" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:5">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/geogre123/p/10643152.html">Linux程序前台后台切换
- G先生 - 博客园 (cnblogs.com)</a><a href="#fnref:5" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:6">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">无<a href="#fnref:6" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:7">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">https://blog.csdn.net/qq_34398519/article/details/114289586<a href="#fnref:7" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:8">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">[(87条消息)
tar -zxvf是什么意思_ProLayman的博客-CSDN博客_tar
–zxvf]:(https://blog.csdn.net/ProLayman/article/details/114577007)<a href="#fnref:8" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:9">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/yaoqingzhuan/p/10889718.html">linux添加环境变量
- ilovetesting - 博客园
(cnblogs.com)</a><a href="#fnref:9" rev="footnote"> ↩︎</a></span>
</li>
<li id="fn:10">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/peida/archive/2012/11/08/2759805.html">每天一个linux命令（16）：which命令
- peida - 博客园 (cnblogs.com)</a><a href="#fnref:10" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:11">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/jiftle/p/9707518.html">linux
find 命令查找文件和文件夹 - jiftle - 博客园
(cnblogs.com)</a><a href="#fnref:11" rev="footnote"> ↩︎</a></span>
</li>
<li id="fn:12">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">12.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/weixin_42575020/article/details/105952464">(87条消息)
linux软连接出现红色闪烁_Danker01的博客-CSDN博客_软连接红色</a><a href="#fnref:12" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:13">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">13.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.runoob.com/linux/linux-comm-paste.html">Linux
paste 命令 | 菜鸟教程
(runoob.com)</a><a href="#fnref:13" rev="footnote"> ↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-vim</title>
    <url>/Linux-vim/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="一vim有四种模式">一、Vim有四种模式</h1>
<h2
id="命令模式正常模式command-mode">1、<strong>命令模式/正常模式</strong>（Command
mode）</h2>
<p>敲击键盘动作会被Vim识别为命令，而非输入字符。启动Vim默认进入命令模式。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[Vim/三种模式 - 维基教科书，自由的教学读本 (wikibooks.org)](https://zh.m.wikibooks.org/zh-hans/Vim/三种模式)
">[1]</span></a></sup></p>
<ul>
<li><code>i</code>：切换到插入模式<br />
</li>
<li><code>：</code>：切换到底线命令模式</li>
<li><code>v</code>：进入可视化模式(小写V、大写V、Ctrl+V均可进入该模式下)</li>
<li><code>U</code>：撤销上一步操作</li>
<li><code>yy</code> - 复制当前行，包括换行符</li>
<li><code>dd</code> - 剪切当前行，包括换行符</li>
<li><code>p</code>键可以将内容粘贴到当前光标后面</li>
</ul>
<h2 id="插入模式insert-mode">2、<strong>插入模式</strong>（Insert
mode）</h2>
<p>编辑文本，需进入该模式</p>
<ul>
<li><code>Esc</code>：退出插入模式，进入命令模式</li>
</ul>
<h2
id="底线命令模式last-line-mode">3、<strong>底线命令模式</strong>（Last
line mode）</h2>
<ul>
<li><code>Esc</code>：退出底线命令模式，进入命令模式</li>
<li><code>q!</code>：不保存，强制退出vim</li>
<li><code>wq</code>：保存，退出vim</li>
<li><code>q</code>：不保存，退出vim</li>
<li><code>w</code>：保存，不退出vim</li>
</ul>
<h2
id="可视化模式visual-mode">4、<strong>可视化模式</strong>(Visual-mode)：</h2>
<ul>
<li><p>文本选择：小写V进入（选择是以字符为单位的）、大写V进入（选择是以行为单位的）、Ctrl+V进入（矩形区域作为目标文本，以按下
Ctrl+v
位置作为矩形的一角，光标移动的终点位置作为它的对角）<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[Linux Vim可视化模式及其用法 (biancheng.net)](http://c.biancheng.net/view/6355.html)
">[2]</span></a></sup></p></li>
<li><p>可视化命令：</p>
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 85%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><strong>命令</strong></th>
<th style="text-align: left;"><strong>命令</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">d</td>
<td style="text-align: left;">删除选中的部分文本。</td>
</tr>
<tr class="even">
<td style="text-align: left;">D</td>
<td style="text-align: left;">删除选中部分所在的行，和 d
不同之处在于，即使选中文本中有些字符所在的行没有都选中，删除时也会一并删除。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">y</td>
<td style="text-align: left;">将选中部分复制到剪贴板中。</td>
</tr>
<tr class="even">
<td style="text-align: left;">p（小写）</td>
<td style="text-align: left;">将剪贴板中的内容粘贴到光标之后。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">P（大写）</td>
<td style="text-align: left;">将剪贴板中的内容粘贴到光标之前。</td>
</tr>
<tr class="even">
<td style="text-align: left;">u（小写）</td>
<td
style="text-align: left;">将选中部分中的大写字符全部改为小写字符。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">U（大写）</td>
<td
style="text-align: left;">将选中部分中的小写字符全部改为大写字符。</td>
</tr>
<tr class="even">
<td style="text-align: left;">&gt;</td>
<td style="text-align: left;">将选中部分右移（缩进）一个 tab
键规定的长度（CentOS 6.x 中，一个tab键默认相当于 8
个空白字符的长度）。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">&lt;</td>
<td style="text-align: left;">将选中部分左移一个 tab
键规定的长度（CentOS 6.x 中，一个tab键默认相当于 8
个空白字符的长度）。</td>
</tr>
</tbody>
</table></li>
</ul>
<h1 id="二小技巧">二、小技巧</h1>
<h2 id="设置行号">1、设置行号</h2>
<p>vim ~/.vimrc 写入：set number</p>
<h2 id="设置粘贴模式">2、设置粘贴模式</h2>
<p><code>:set paste</code> + 回车 + <code>i</code></p>
<h2 id="快速到达首尾">3、快速到达首尾</h2>
<ul>
<li><code>gg</code>：跳转到文件头</li>
<li>行数 +<code>gg</code>：跳转到指定行</li>
<li>shift + g ：跳转到文件末尾</li>
</ul>
<h2 id="多行注释">4、多行注释</h2>
<p><code>:20,30 s/^/#/g</code> ：20-30行 用 #
注释掉。（python是用#注释地～～～）</p>
<p><code>:20,30 s/^#//g</code> ：20-30行 取消注释</p>
<ul>
<li><p>注释：</p>
<p>​ Ctrl + v ：vim中的视图模式，把要注释的内容选上 ​ shift + i ：插入字符
​shift + # ：把#插入到要注释的行前面（在第一行有显示） ​ Esc
：按至少2次Esc，则会把所有选中的行都在其前面加#</p></li>
<li><p>取消注释：</p>
<p>​ Ctrl+v：进入视图模式 ​
上下方向键选中要注释的行，左右键选择要删除的字符# ​ 按d删除</p></li>
</ul>
<h2 id="vim的搜索功能">5、vim的搜索功能</h2>
<p>在 normal 模式下按下 <code>/</code>
即可进入查找模式，输入要查找的字符串并按下回车。 Vim
会跳转到第一个匹配。按下 <code>n</code> 查找下一个，按下 <code>N</code>
查找上一个。<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[在 Vim 中优雅地查找和替换 | Harttle Land](https://harttle.land/2016/08/08/vim-search-in-file.html)
">[3]</span></a></sup></p>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zh.m.wikibooks.org/zh-hans/Vim/%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F">Vim/三种模式
- 维基教科书，自由的教学读本
(wikibooks.org)</a><a href="#fnref:1" rev="footnote"> ↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://c.biancheng.net/view/6355.html">Linux
Vim可视化模式及其用法
(biancheng.net)</a><a href="#fnref:2" rev="footnote"> ↩︎</a></span>
</li>
<li id="fn:3">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://harttle.land/2016/08/08/vim-search-in-file.html">在
Vim 中优雅地查找和替换 | Harttle
Land</a><a href="#fnref:3" rev="footnote"> ↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Git-use</title>
    <url>/Git-use/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208061634599.png"
alt="image-20220806163425145" />
<figcaption aria-hidden="true">image-20220806163425145</figcaption>
</figure>
<h4 id="基本设置">基本设置</h4>
<p><a href="https://www.cnblogs.com/cong-wang/p/15026535.html">Windows
Terminal 添加git bash</a>：</p>
<p>打开Windows
Terminal的设置文件settings.json，在profiles的list中添加一项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;guid&quot; : &quot;&#123;DCCB2820-E057-5204-2732-968F1D89107E&#125;&quot;,</span><br><span class="line">    &quot;name&quot; : &quot;Git Bash&quot;,</span><br><span class="line">    &quot;commandline&quot; : &quot;C:\\Program Files\\Git\\bin\\bash.exe --login -i&quot;,</span><br><span class="line">    &quot;icon&quot; : &quot;C:\\Users\\Lenovo\\Pictures\\nodelete\\git-bash.png&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>git bash 设置打开默认目录： vim ~/.bash_profile 将一下内容放进去(git
bash here 会失去作用)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\\MyData\\10-other\\gitbook_md  <span class="comment"># 加入要去的目录</span></span><br></pre></td></tr></table></figure>
<h4 id="基本命令">基本命令</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;  # 在命令行中配置本地仓库的账号和邮箱</span><br><span class="line">git config --global user.email &quot;123@qq.com&quot;</span><br><span class="line">git config --global color.ui true # 启用一些额外的颜色，这样就可以更容易地阅读命令的输出</span><br><span class="line"></span><br><span class="line">git init # 初始化仓库</span><br><span class="line">git add . # .表示所有文件。也可以git add 文件名 添加单独文件</span><br><span class="line">git commit -a -m &quot;备注信息&quot;  # 设置-a，修改文件后不需要再执行 git add 命令</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">给远程仓库取个别名叫origin</span></span><br><span class="line">git remote add origin https://gitee.com/star-language-star/python </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从远程获取代码并合并本地的版本(远程有readme，两边不统一，不可以推送，见报错2)</span></span><br><span class="line">git pull --rebase origin master </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将本地的 master分支推送到origin主机的master分支</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一次用-u，第二次就不用-u了。详见参考文章2</span></span><br><span class="line">git push -u origin master </span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以后更改代码后拖到远程仓库步骤：到python项目文件夹下执行：</span></span><br><span class="line">git add . # 添加文件</span><br><span class="line">git commit -a -m &quot;备注信息&quot;  # 提交</span><br><span class="line">git push origin master  # 拖到远程仓库</span><br></pre></td></tr></table></figure>
<h4 id="版本控制">版本控制</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -a -m &quot;备注信息&quot;  # 提交保留当前版本到本地仓库</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对文件进行修改之后，想回退版本</span></span><br><span class="line">git log # 查看提交信息，有HEAD的就是最新版本</span><br><span class="line">git reflog # 回退到之前版本，git log看不到之后的提交，需用reflog</span><br><span class="line">git reset --hard HEAD^ # 回到上一个版本</span><br><span class="line">git reset --hard f6fb32a（历史版本号）# 版本号用log或reflog查看</span><br></pre></td></tr></table></figure>
<p>gitee更换地址后配置git：</p>
<p>https://blog.csdn.net/m0_37034294/article/details/79986198</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin 你的新远程仓库地址 # 之后输入的用户名是仓库地址中的用户名</span><br></pre></td></tr></table></figure>
<h4 id="其他">其他</h4>
<p>git clone --depth 1
https://github.com/labuladong/fucking-algorithm.git</p>
<p>只克隆下包含最近一次commit的一个分支，这样这个项目文件就不会很大</p>
<h4 id="报错">报错</h4>
<p>1、$ git add . warning: LF will be replaced by CRLF in
k_mer/.idea/inspectionProfiles/profiles_settings.xml.</p>
<p><a href="https://www.jianshu.com/p/450cd21b36a4">关于git提示“warning:
LF will be replaced by CRLF”终极解答 - 简书 (jianshu.com)</a></p>
<p>执行了：git config --global core.autocrlf false</p>
<p>2、error: failed to push some refs to</p>
<p><a
href="https://blog.csdn.net/qq_45893999/article/details/106273214">(42条消息)
error: failed to push some refs
to如何解决_尘客-追梦的博客-CSDN博客</a></p>
<p>3、<a
href="https://www.cnblogs.com/banbosuiyue/p/12674778.html">git提交后文件夹显示灰色无法打开的解决办法</a></p>
<h4 id="参考文章">参考文章</h4>
<p>1、<a
href="https://zhuanlan.zhihu.com/p/94008510">看完这篇还不会用Git，那我就哭了！</a>
2、<a
href="https://blog.csdn.net/Lakers2015/article/details/111318801">git
push 的 -u 参数含义</a> 3、<a
href="https://blog.csdn.net/ZZQHELLO2018/article/details/82354900">Git版本控制（完美整理版）</a>
4、<a
href="https://www.cnblogs.com/chenjunjie12321/p/6876220.html">git的突出解决--git
rebase之abort、continue、skip</a></p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown Tips</title>
    <url>/Markdown-Tips/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h4 id="题注">题注</h4>
<p><a
href="https://www.zhihu.com/question/42802592/answer/383110578">来源</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;border-radius: 0.3125em;</span></span></span><br><span class="line"><span class="string"><span class="tag">    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;这里输入图片地址&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:orange; border-bottom: 1px solid #d9d9d9;</span></span></span><br><span class="line"><span class="string"><span class="tag">    display: inline-block;</span></span></span><br><span class="line"><span class="string"><span class="tag">    color: #999;</span></span></span><br><span class="line"><span class="string"><span class="tag">    padding: 2px;&quot;</span>&gt;</span>这里输入题注<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>更喜欢这种，图片还可以缩放：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;center&gt;题注&lt;/center&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 链表</title>
    <url>/Python%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>链表的基本结构：</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208311024919.png"
alt="image-20220831102428767" />
<figcaption aria-hidden="true">image-20220831102428767</figcaption>
</figure>
<ul>
<li><p>节点：每个节点有两个部分，左边部分称为值域，用来存放用户数据；右边部分称为指针域，用来存放指向下一个元素的指针。</p></li>
<li><p>head：head节点永远指向第一个节点</p></li>
<li><p>tail：tail永远指向最后一个节点</p></li>
<li><p>None：链表中最后一个节点的指针域为None值</p>
<span id="more"></span></li>
</ul>
<p>该代码来源：<a
href="https://www.bilibili.com/video/BV1nK4y1v7uv?share_source=copy_web&amp;vd_source=7f2a81e814313c699f856c2ec72be7d9">Python数据结构与算法03——单链表、双链表、单项循环链表</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>(<span class="title class_ inherited__">object</span>):  <span class="comment"># 定义节点类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,elem</span>):</span><br><span class="line">        self.elem = elem </span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleLinkList</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># 定义单链表类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,node=<span class="literal">None</span></span>):</span><br><span class="line">        self._head = node</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._head == <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 链表长度</span></span><br><span class="line">        <span class="comment"># cur 游标，用于移动遍历节点</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        <span class="comment"># count 记录数量</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">travel</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 遍历整个链表</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(cur.elem,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self,item</span>):</span><br><span class="line">        <span class="comment"># 链表头部添加元素，头插法</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        node.<span class="built_in">next</span> = self._head</span><br><span class="line">        self._head = node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self,item</span>):</span><br><span class="line">        <span class="comment"># 链表尾部添加元素</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            self._head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = self._head</span><br><span class="line">            <span class="keyword">while</span> cur.<span class="built_in">next</span> != <span class="literal">None</span>:</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> =node</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self,pos,item</span>):</span><br><span class="line">        <span class="comment"># 指定位置添加元素</span></span><br><span class="line">        <span class="comment">#:param pos 从0开始</span></span><br><span class="line">        <span class="keyword">if</span> pos &lt;= <span class="number">0</span>:</span><br><span class="line">            self.add(item)</span><br><span class="line">        <span class="keyword">elif</span> pos &gt; (self.length()-<span class="number">1</span>):</span><br><span class="line">            self.append(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pre = self._head</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> count &lt; (pos-<span class="number">1</span>):</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                pre = pre.<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># 当循环退出后，pre指向pos-1位置</span></span><br><span class="line">            node = Node(item)</span><br><span class="line">            node.<span class="built_in">next</span> = pre.<span class="built_in">next</span></span><br><span class="line">            pre.<span class="built_in">next</span> = node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="comment"># 删除节点</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.elem == item:</span><br><span class="line">                <span class="comment"># 先判断此节点是否是头节点</span></span><br><span class="line">                <span class="comment"># 头节点</span></span><br><span class="line">                <span class="keyword">if</span> cur == self._head:</span><br><span class="line">                    self._head = cur.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pre.<span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pre = cur</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self,item</span>):</span><br><span class="line">        <span class="comment"># 查找节点是否存在</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.elem == item:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        ll = SingleLinkList()</span><br><span class="line">        <span class="built_in">print</span>(ll.is_empty())</span><br><span class="line">        <span class="built_in">print</span>(ll.length())</span><br><span class="line"></span><br><span class="line">        ll.append(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(ll.is_empty())</span><br><span class="line">        <span class="built_in">print</span>(ll.length())</span><br><span class="line"></span><br><span class="line">        ll.append(<span class="number">2</span>)</span><br><span class="line">        ll.add(<span class="number">8</span>)</span><br><span class="line">        ll.append(<span class="number">3</span>)</span><br><span class="line">        ll.append(<span class="number">4</span>)</span><br><span class="line">        ll.append(<span class="number">5</span>)</span><br><span class="line">        ll.append(<span class="number">6</span>)</span><br><span class="line">        <span class="comment"># 8 1 2 3 4 5 6 </span></span><br><span class="line">        ll.insert(-<span class="number">1</span>,<span class="number">9</span>)  <span class="comment"># 9 8 1 23456</span></span><br><span class="line">        ll.travel()</span><br><span class="line">        ll.insert(<span class="number">3</span>,<span class="number">100</span>) <span class="comment"># 9 8 1 100 2 3456</span></span><br><span class="line">        ll.travel()</span><br><span class="line">        ll.insert(<span class="number">10</span>,<span class="number">200</span>) <span class="comment"># 9 8 1 100 23456 200</span></span><br><span class="line">        ll.travel()</span><br><span class="line">        ll.remove(<span class="number">100</span>)</span><br><span class="line">        ll.travel()</span><br><span class="line">        ll.remove(<span class="number">9</span>)</span><br><span class="line">        ll.travel()</span><br><span class="line">        ll.remove(<span class="number">200</span>)</span><br><span class="line">        ll.travel()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-base</title>
    <url>/Python-base/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1
id="设置双击.py文件打开的软件">1、设置双击<code>.py</code>文件打开的软件</h1>
<p>找到一个<code>.py</code>文件，右键点击属性，常规--打开方式--更改，选择打开<code>.py</code>文件的应用。</p>
<h1 id="pycharm下载包">2、Pycharm<a
href="https://blog.csdn.net/qiannianguji01/article/details/50397046">下载包</a></h1>
<ul>
<li>打开Pycharm，点击File,再点击settings</li>
<li>点击settings之后再点击project下面的project Interpreter</li>
<li>接下来点击上面界面右上角的“+”将会出现如下界面：然后在搜索框中搜索需要安装的第三方库（此处搜索requests）然后点击界面左下角的Install
Package进行安装即可。</li>
</ul>
<h1
id="pycharm已下载包但是提示找不到">3、Pycharm已下载包，但是提示找不到</h1>
<p>Pycharm已下载包，但是终端的Python却找不到包：有多个Python环境，解释器路径<a
href="https://blog.csdn.net/qq_41088475/article/details/103984400">不一样</a>。</p>
<p>查看自己项目大概位置：</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208101115765.png"
alt="image-20220810111358060" />
<figcaption aria-hidden="true">image-20220810111358060</figcaption>
</figure>
<p>不同项目的解释器可能不一样，打开解释器选择界面：</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208101115636.png"
alt="image-20220810111051813" />
<figcaption aria-hidden="true">image-20220810111051813</figcaption>
</figure>
<p>选择自己项目相关的解释器，点击Apply，OK：</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208101115390.png"
alt="image-20220810111247989" />
<figcaption aria-hidden="true">image-20220810111247989</figcaption>
</figure>
<p>再回到终端，包即可使用。</p>
<h1 id="f-string">4、f-string</h1>
<p>f-string，亦称为格式化字符串常量（formatted string
literals），是Python3.6新引入的一种字符串格式化方法。f-string在形式上是以
<code>f</code> 或 <code>F</code> 修饰符引领的字符串（<code>f'xxx'</code>
或 <code>F'xxx'</code>），以大括号 <code>&#123;&#125;</code>
标明被替换的字段；f-string在本质上并不是字符串常量，而是一个在运行时运算求值的表达式。<a
href="https://blog.csdn.net/sunxb10/article/details/81036693">来源</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; i=<span class="string">&#x27;a.tsv&#x27;</span></span>  </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">dd</span> = pd.read_csv(f<span class="string">&#x27;D:/mydata/&#123;i&#125;&#x27;</span>)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; name = <span class="string">&#x27;Eric&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; f<span class="string">&#x27;Hello, my name is &#123;name&#125;&#x27;</span></span></span><br><span class="line">&#x27;Hello, my name is Eric&#x27;</span><br></pre></td></tr></table></figure>
<p>Python 中的字符串格式<a
href="https://geek-docs.com/python/python-tutorial/python-fstring.html">设置</a>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;Peter&#x27;</span></span><br><span class="line">age = <span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s is %d years old&#x27;</span> % (name, age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; is &#123;&#125; years old&#x27;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span> is <span class="subst">&#123;age&#125;</span> years old&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="从字符串中提取数字">5、从字符串中提取数字</h1>
<p><a
href="https://blog.csdn.net/qq_38486203/article/details/80309478">来源</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: cp936 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">string=<span class="string">&quot;A1.45，b5，6.45，8.82&quot;</span></span><br><span class="line"><span class="built_in">print</span> re.findall(<span class="string">r&quot;\d+\.?\d*&quot;</span>,string)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># [&#x27;1.45&#x27;, &#x27;5&#x27;, &#x27;6.45&#x27;, &#x27;8.82&#x27;]</span></span><br></pre></td></tr></table></figure>
<p>正则：<code>"\d+.?\d*"</code></p>
<ul>
<li><code>\d+</code>
匹配1次或者多次数字，注意这里不要写成<code>*</code>，因为即便是小数，小数点之前也得有一个数字；</li>
<li><code>\.?</code> 这个是匹配小数点的，可能有，也可能没有；</li>
<li><code>\d*</code>
这个是匹配小数点之后的数字的，所以是0个或者多个；</li>
</ul>
<h1 id="列表中的字符串转换为整数">6、列表中的字符串转换为整数</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">results = [1, 2, 3]</span><br><span class="line">results = list(map(int, results))</span><br><span class="line">nums=[int(num) for num in results]</span><br></pre></td></tr></table></figure>
<h1 id="sort-与-sorted-区别">7、sort 与 sorted 区别</h1>
<ul>
<li>sort 是应用在 list 上的方法，属于列表的成员方法，sorted
可以对所有可迭代的对象进行排序操作。</li>
<li>list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted
方法返回的是一个新的 list，而不是在原来的基础上进行的操作。</li>
<li>sort使用方法为ls.sort()，而sorted使用方法为sorted(ls)</li>
</ul>
<p>reverse = True 降序 ， reverse = False 升序（sort和sorted默认）</p>
<h1 id="pycharm-多行注释取消注释">8、Pycharm 多行注释（取消注释）</h1>
<p>Ctrl + /</p>
<h1 id="带if条件语句的lambda函数">9、带if条件语句的lambda函数</h1>
<p><code>lambda x: 返回值1 if 条件 else (返回值2 if 条件 else 返回值3)</code></p>
<p>[if符合返回值] <strong>if</strong> 条件 <strong>else</strong>
[else符合返回值] <a
href="%5B如何在Python的Lambda函数中使用if，else和elif%20-%200x资讯%20(0xzx.com)%5D(https://0xzx.com/202002080939501826.html)">来源</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">verify = lambda x: True if (x &gt; 11 and x &lt; 22) else False</span><br><span class="line">converter = lambda x : x*2 if x &lt; 11 else (x*3 if x &lt; 22 else x)</span><br></pre></td></tr></table></figure>
<h1 id="asscii值">10、ASSCII值</h1>
<p><a href="https://tool.oschina.net/commons?type=4">来源</a></p>
<table>
<thead>
<tr class="header">
<th>ASSCII值</th>
<th>控制字符</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>48</td>
<td>0</td>
</tr>
<tr class="even">
<td>49</td>
<td>1</td>
</tr>
<tr class="odd">
<td>50</td>
<td>2</td>
</tr>
<tr class="even">
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td>57</td>
<td>9</td>
</tr>
<tr class="even">
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>65</td>
<td>A</td>
</tr>
<tr class="even">
<td>66</td>
<td>B</td>
</tr>
<tr class="odd">
<td>67</td>
<td>C</td>
</tr>
<tr class="even">
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td>90</td>
<td>Z</td>
</tr>
<tr class="even">
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>97</td>
<td>a</td>
</tr>
<tr class="even">
<td>98</td>
<td>b</td>
</tr>
<tr class="odd">
<td>99</td>
<td>c</td>
</tr>
<tr class="even">
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td>122</td>
<td>z</td>
</tr>
</tbody>
</table>
<h1
id="列表中嵌套列表变字符为数字排序">11、列表中嵌套列表，变字符为数字排序</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">num=[[&#x27;3&#x27;],[&#x27;9&#x27;],[&#x27;1&#x27;],[&#x27;20&#x27;]]</span><br><span class="line">num2 = []</span><br><span class="line">for j in num:</span><br><span class="line">    num2.append(int(j[0]))</span><br><span class="line">num2 = sorted(num2)</span><br><span class="line">print(num2)</span><br><span class="line"></span><br><span class="line">[1, 3, 9, 20]</span><br></pre></td></tr></table></figure>
<h1 id="if-name-main">12、if <strong>name</strong> ==
'<strong>main</strong>'</h1>
<p><a
href="https://www.zhihu.com/question/49136398/answer/1654722335">来源</a></p>
<p><code>if __name__ == '__main__' :</code>后面缩进的内容（代称为A），如果是该python文件被执行，那么该A内容会被执行，如果该文件被导入到另一个文件中，执行另一个文件，A内容不会被执行。</p>
<p><code>_name_</code>是一个属性，在自己文件中值为main，在其他文件中值为文件名（模块名）。if
<strong>name</strong> ==
'<strong>main</strong>'表示是不是本文件，是的话，执行冒号后面缩进的内容。</p>
<h1 id="字符串是否是正整数">13、字符串是否是正整数</h1>
<p><code>string.isdigit()</code>：如果是正整数，返回True；反之，返回False。</p>
<h1 id="文件的创建和写入">14、文件的创建和写入</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;a.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)  <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;hello &#123;&#125;,hello &#123;&#125;&quot;</span>.<span class="built_in">format</span>(a, b))</span><br><span class="line"><span class="comment"># w：只写，文件存在覆盖，文件不存在创建</span></span><br><span class="line"><span class="comment"># a：追加，文件存在追加，文件不存在创建</span></span><br><span class="line"><span class="comment"># r：只读，文件存在读，文件不存在返回异常</span></span><br><span class="line"><span class="comment"># x：只写，文件存在返回异常，文件不存在创建</span></span><br><span class="line"><span class="comment"># b：以二进制打开</span></span><br><span class="line"><span class="comment"># t：以文本文件方式打开，默认值</span></span><br><span class="line"><span class="comment"># +：与以上同时使用，以增加功能</span></span><br></pre></td></tr></table></figure>
<h1 id="局部变量和全局变量">15、局部变量和全局变量</h1>
<p><a href="http://c.biancheng.net/view/2259.html">来源</a></p>
<p>1、局部变量（Local
Variable）：在函数内部定义的变量（只能在函数内部使用）</p>
<ul>
<li><code>local()</code>：返回局部变量组成的字典，可以访问变量，但是无法修改变量的值</li>
</ul>
<p>2、全局变量（Global Variable）：在所有函数的外部定义的变量</p>
<ul>
<li><p>在函数外部定义</p></li>
<li><p>在函数内部使用global关键词定义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">text</span>():</span><br><span class="line">    <span class="keyword">global</span> add</span><br><span class="line">    add = <span class="string">&quot;https://adf.com&quot;</span></span><br><span class="line"><span class="comment"># 使用 global 关键字修饰变量名时，不能直接给变量赋初值，否则会引发语法错误。</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>globals()</code>：返回一个所有全局变量的字典，该字典中的每个键值对，键为变量名，值为该变量的值。变量可访问，也可修改。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Pyname = <span class="string">&quot;Python教程&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">globals</span>()[<span class="string">&#x27;Pyname&#x27;</span>])   <span class="comment"># 输出为Python教程</span></span><br><span class="line"><span class="keyword">global</span>()[<span class="string">&#x27;Pyname&#x27;</span>] = <span class="string">&quot;Python入门教程&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">globals</span>()[<span class="string">&#x27;Pyname&#x27;</span>])   <span class="comment"># 输出为Python入门教程</span></span><br></pre></td></tr></table></figure>
<h1 id="查看python解释器类型">16、查看python解释器类型：</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os </span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">sys.version  # 内有PyPy即为PyPy解释器</span><br><span class="line">os.name   # 返回有Java，即为Jython解释器</span><br><span class="line">sys.version.startswith</span><br></pre></td></tr></table></figure>
<h1 id="编码方式">16、编码方式</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.getdefaultencoding()</span><br><span class="line"></span><br><span class="line">from IPython.utils.encoding import get_stream_enc; import sys</span><br><span class="line">get_stream_enc(sys.stdout)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>iPython is getting the encoding from the <a
href="https://stackoverflow.com/questions/55289288/change-ipython-stream-encoding">environment</a>
(<code>$LANG</code> etc).</p>
<p>iPython是从环境中获得编码方式的，目前iPython用的是GBK方式编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get_stream_enc(sys.stdout)</span><br><span class="line">Out[21]: &#x27;gbk&#x27;</span><br></pre></td></tr></table></figure>
<p>换成utf-8的方式是，</p></li>
</ul>
<p>17、类、函数，方法，库</p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 超赞软件 &amp; 扩展 &amp; 网站</title>
    <url>/Windows%20%E8%B6%85%E8%B5%9E%E8%BD%AF%E4%BB%B6%20&amp;%20%E6%89%A9%E5%B1%95%20&amp;%20%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h4 id="软件">软件:</h4>
<ul>
<li><p>Edge浏览器（已换谷歌内核，且扩展丰富，无需翻墙即可添加多数Google扩展），Chrome浏览器、360极速浏览器、</p></li>
<li><p>Foxmail（邮箱）、Bandizip（解压软件）、LICEcap（录屏GIF）、Snipaste（截图，贴图）、FastStone
Image Viewer（图片查看器）</p></li>
<li><p>Typora（Markdown编辑器）、Listary（快速搜索文件文件夹）、百度网盘、PanDownload（百度云解除）、Xmind(思维导图)</p></li>
<li><p>ripgrep(命令行搜索软件，用于搜索纯文本文件内容)、<a
href="https://chocolatey.org/install">Chocolatey</a>(软件管理，下载一些Windows的命令行工具)、rga(ripgrep-all，可搜pdf等其他格式)</p></li>
<li><p>QQ OCR(没错，qq自带OCR!!!)、天若OCR、Quicker（快捷面板）、Utools
(和quicker有些像)、手心输入法（最后还是换回搜狗，不得不承认搜狗的强大）、(PDF-XChange
Editor、文电通pdf阅读器)、</p></li>
<li><p>One
commander(文件资源管理器)、Clover（文件资源管理器标签化）、DeskPins1.3（窗口置顶）、Spacesniff(直观地看到文件和文件夹的磁盘空间占用情况)、Coodesker(桌面管理软件)、Files
uwp preview(文件资源管理器)</p></li>
<li><p>MobaXterm
(ssh客户端，最推荐，功能很多，不止ssh)、Putty(ssh客户端，比较mini)、Xshell（ssh客户端，朋友用过，自己木有）Windows
Terminal（终端）</p></li>
<li><p>IDE&amp;编辑器<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="编辑器就是纯编辑文本的编辑器、IDE是带有软件开发功能的“集成开发环境”。目前的编辑器功能强大，基本可以算作是IDE。简单点说自称IDE的IDE能做的活，自称编辑器的IDE未必能做，自称编辑器的IDE能做的活，自称IDE的IDE基本能做。
">[1]</span></a></sup>：Vscode(Python、Markdown、LaTex等我都行，牛不牛)、Sublime
Text、Thonny（Python）</p></li>
</ul>
<h4 id="edge扩展">Edge扩展</h4>
<ul>
<li>Adblock （广告拦截）</li>
<li>Dark Reader (暗黑模式)</li>
<li>Fireshot-capture page(截图)</li>
<li>Infinity pro （好看好用的标签页）</li>
<li>IGG谷歌学术助手</li>
<li>沙拉查词</li>
<li>壹伴（公众号助手）</li>
</ul>
<h4 id="网址">网址</h4>
<ul>
<li><p>软件下载：https://en.softonic.com/</p></li>
<li><p>135编辑器（公众号排版）：https://www.135editor.com/</p></li>
<li><p>创客贴（公众号封面）：https://www.chuangkit.com/</p></li>
<li><p>LaTex在线：https://www.overleaf.com/</p></li>
</ul>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">编辑器就是纯编辑文本的编辑器、IDE是带有软件开发功能的“集成开发环境”。目前的编辑器功能强大，基本可以算作是IDE。简单点说自称IDE的IDE能做的活，自称编辑器的IDE未必能做，自称编辑器的IDE能做的活，自称IDE的IDE基本能做。<a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Software</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的正则表达式</title>
    <url>/Python%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>re库是Python关于正则表达式的一个内置模块，使用时无需下载，直接import即可。</p>
<p>这个模块提供与Perl语言中类似的正则表达式匹配操作，支持bytes和unicode两种格式的字符串，处理的字符串可以包含空字符以及超出ASCII码范围的字符(比如中文字符)。</p>
<p><span id="more"></span></p>
<p>本文主要来源是Python3.10.6 re库官方文档，提及的函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">re.match(),re.fullmatch(),re.search(),re.findall(),group(),groups()</span><br><span class="line">re.split()</span><br><span class="line">re.sub(),re.subn()</span><br><span class="line">re.compile(),re.finditer</span><br><span class="line">re.escape()</span><br><span class="line">re.purge()</span><br></pre></td></tr></table></figure>
<h3 id="查找">1、查找</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">re.match(pattern, string, flags=0) # 从字符串的起始位置匹配一个模式，匹配返回一个对象，不匹配返回none</span><br><span class="line">re.fullmatch(pattern, string, flags=0) # 整个字符串与正则完全匹配，返回一个对象，不匹配返回none</span><br><span class="line">re.search(pattern, string, flags=0)   # 扫描整个字符串并返回第一个成功的匹配对象。</span><br><span class="line">re.findall(pattern, string, flags=0)  # 在字符串中找到匹配的所有子串，并返回一个列表，有多个匹配模式，则返回元组列表，如果没有找到匹配的，则返回空列表。</span><br></pre></td></tr></table></figure>
<ul>
<li>pattern：正则中的模式字符串。pattern形式：<code>r"正则"</code></li>
<li>string：要被查找替换的原始字符串。</li>
<li>flags：标志位，用于控制正则表达式的匹配方式
<ul>
<li>re.I：不区分大小写</li>
<li>re.M：多行匹配，影响 ^ 和 $</li>
<li>re.S：使 <code>.</code> 匹配包括换行在内的所有字符</li>
<li>re.U：根据Unicode字符集解析字符。这个标志影响 , , .</li>
<li>re.L：做本地化识别（locale-aware）匹配</li>
<li>re.X：该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</li>
</ul></li>
<li><code>group(num)</code> 或 <code>groups()</code>是匹配对象（match
object）的函数，可用来获取匹配到的内容(获取整体或括号的捕获内容)。<code>group（0）</code>和<code>group（）</code>效果相同，均为获取取得的字符串整体，<code>group(n)</code>返回第n组括号匹配的字符，groups()
返回所有括号匹配的字符，以tuple格式。</li>
</ul>
<p>eg：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Hello World WoHe&quot;</span></span><br><span class="line"></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&quot;he&quot;</span>,<span class="built_in">str</span>,flags=re.I)</span><br><span class="line"><span class="comment"># out: &lt;re.Match object; span=(0, 2), match=&#x27;He&#x27;&gt;</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&quot;wo&quot;</span>,<span class="built_in">str</span>,flags=re.I)   <span class="comment"># match只查找字符串开头</span></span><br><span class="line"><span class="comment"># out: 空 </span></span><br><span class="line">re.fullmatch(<span class="string">r&quot;^H\w+\s\w+\s\w+&quot;</span>,<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># out：&lt;re.Match object; span=(0, 16), match=&#x27;Hello World WoHe&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r&quot;wo&quot;</span>,<span class="built_in">str</span>,flags=re.I)  <span class="comment"># search只返回第一个成功匹配</span></span><br><span class="line"><span class="comment"># out：&lt;re.Match object; span=(6, 8), match=&#x27;Wo&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">r&quot;([a-zA-Z]*)\s([a-zA-Z]*)\s([a-zA-Z]*)&quot;</span>,<span class="built_in">str</span>).group()</span><br><span class="line"><span class="comment"># out：&#x27;Hello World WoHe&#x27;</span></span><br><span class="line">re.search(<span class="string">r&quot;([a-zA-Z]*)\s([a-zA-Z]*)\s([a-zA-Z]*)&quot;</span>,<span class="built_in">str</span>).group(<span class="number">0</span>)  <span class="comment"># group（0）和group（）效果相同，取获得整体</span></span><br><span class="line"><span class="comment"># out：&#x27;Hello World WoHe&#x27;</span></span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r&quot;([a-zA-Z]*)\s([a-zA-Z]*)\s([a-zA-Z]*)&quot;</span>,<span class="built_in">str</span>).group(<span class="number">1</span>)  <span class="comment"># 获得第一个括号捕获的内容</span></span><br><span class="line"><span class="comment"># out：&#x27;Hello&#x27;</span></span><br><span class="line">re.search(<span class="string">r&quot;([a-zA-Z]*)\s([a-zA-Z]*)\s([a-zA-Z]*)&quot;</span>,<span class="built_in">str</span>).group(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># out：&#x27;World&#x27;</span></span><br><span class="line">re.search(<span class="string">r&quot;([a-zA-Z]*)\s([a-zA-Z]*)\s([a-zA-Z]*)&quot;</span>,<span class="built_in">str</span>).group(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># out：&#x27;WoHe&#x27;</span></span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r&quot;([a-zA-Z]*)\s([a-zA-Z]*)\s([a-zA-Z]*)&quot;</span>,<span class="built_in">str</span>).groups() <span class="comment"># 返回所有括号匹配的字符</span></span><br><span class="line"><span class="comment"># out：(&#x27;Hello&#x27;, &#x27;World&#x27;, &#x27;WoHe&#x27;)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Apple Banana Pear App applet Bear&quot;</span></span><br><span class="line">re.findall(<span class="string">r&quot;\bA\w+&quot;</span>,<span class="built_in">str</span>,flags=re.I)</span><br><span class="line"><span class="comment"># out：[&#x27;Apple&#x27;, &#x27;App&#x27;, &#x27;applet&#x27;]</span></span><br></pre></td></tr></table></figure>
<h3 id="替换">2、替换</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>) <span class="comment"># 将匹配的内容替换成其他内容</span></span><br><span class="line">re.subn(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>) <span class="comment">#subn方法与sub()相同, 但返回一个元组, 其中包含新字符串和替换次数。 </span></span><br></pre></td></tr></table></figure>
<ul>
<li>pattern : 正则中的模式字符串。pattern形式：<code>r"正则"</code></li>
<li>repl : 替换的字符串，也可为一个函数。</li>
<li>string : 要被查找替换的原始字符串。</li>
<li>count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.sub(<span class="string">r&quot;(?=9)&quot;</span>,<span class="string">&quot;,&quot;</span>,<span class="string">&quot;123456789&quot;</span>)  <span class="comment"># 在9前面插入一个逗号</span></span><br><span class="line"><span class="comment"># out：&#x27;12345678,9&#x27;</span></span><br><span class="line">re.sub(<span class="string">r&quot;(?=a)&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;AAAAAAAA&quot;</span>,count=<span class="number">3</span>,flags=re.I) <span class="comment"># 在三个A前面插入.</span></span><br><span class="line"><span class="comment"># out：&#x27;.A.A.AAAAAA&#x27;</span></span><br><span class="line">re.subn(<span class="string">r&quot;(?=a)&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;AAAAAAAA&quot;</span>,count=<span class="number">3</span>,flags=re.I)</span><br><span class="line"><span class="comment"># out：(&#x27;.A.A.AAAAAA&#x27;, 3)</span></span><br></pre></td></tr></table></figure>
<h3 id="分隔">3、分隔</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.split(pattern, string, maxsplit=<span class="number">0</span>, flags=<span class="number">0</span>) </span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;1a2b3c&quot;</span></span><br><span class="line">re.split(<span class="string">r&quot;\d&quot;</span>,<span class="built_in">str</span>,maxsplit=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># out：[&#x27;&#x27;, &#x27;a&#x27;, &#x27;b3c&#x27;]</span></span><br></pre></td></tr></table></figure>
<h3 id="正则表达式复用">4、正则表达式复用</h3>
<p>一个脚本中，若多次使用到同一个正则表达式，为提高效率，可使用<code>re.compile()</code>生成一个正则表达式的对象，进行多次复用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.<span class="built_in">compile</span>(pattern,flags=<span class="number">0</span>)  <span class="comment"># 语法格式</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;ads456&#x27;</span></span><br><span class="line">fnum = re.<span class="built_in">compile</span>(<span class="string">r&quot;\d+&quot;</span>)</span><br><span class="line">fnum.search(<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># out：&lt;re.Match object; span=(3, 6), match=&#x27;456&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&#x27;fadskgf&#x27;</span></span><br><span class="line">falp = re.<span class="built_in">compile</span>(<span class="string">r&quot;(AD)+&quot;</span>,flags=re.I)</span><br><span class="line">falp.search(str1)</span><br><span class="line"><span class="comment"># out：&lt;re.Match object; span=(1, 3), match=&#x27;ad&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Apple Banana Pear App applet Bear&quot;</span></span><br><span class="line">fia = re.<span class="built_in">compile</span>(<span class="string">r&quot;\bA\w+&quot;</span>,flags=re.I)</span><br><span class="line">fia.findall(<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># out：[&#x27;Apple&#x27;, &#x27;App&#x27;, &#x27;applet&#x27;]</span></span><br></pre></td></tr></table></figure>
<h3 id="迭代器">5、迭代器</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.finditer(pattern, string, flags=<span class="number">0</span>) <span class="comment"># 在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个匹配对象（match object）迭代器返回。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;1a2b3c&quot;</span></span><br><span class="line">it = re.finditer(<span class="string">r&quot;\d&quot;</span>,<span class="built_in">str</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it:</span><br><span class="line">    <span class="built_in">print</span>(i.group())</span><br><span class="line"><span class="comment"># out：</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h3 id="其他">6、其他</h3>
<ul>
<li><p><code>re.escape(pattern)</code>：转义 <code>pattern</code>
中的特殊字符即转义正则表达式中的特殊字符，一般用于目标文本中含有正则表达式元字符的情况。</p></li>
<li><p><code>re.purge()</code>：清除正则表达式缓存。编译正则表达式时，将对结果进行缓存，确保短期内如果再次编译相同的正则表达式，则可以直接检索结果，清空缓存可以节省开销。</p></li>
</ul>
<h3 id="推荐阅读">推荐阅读：</h3>
<p>1、<a href="https://docs.python.org/3/library/re.html">re — Regular
expression operations — Python 3.10.6 documentation</a> 2、<a
href="https://www.runoob.com/python/python-reg-expressions.html">Python
正则表达式 | 菜鸟教程 (runoob.com)</a> 3、<a
href="https://docs.python.org/3/howto/regex.html">Regular Expression
HOWTO — Python 3.10.6 documentation</a>
4、https://zhuanlan.zhihu.com/p/361601136</p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Regex</tag>
      </tags>
  </entry>
  <entry>
    <title>SGE作业调度系统</title>
    <url>/SGE%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>不要在登录节点（管理节点）上运行大型<a
href="%5Bhnnd/bcl%20(github.com)%5D(https://github.com/hnnd/bcl)">程序</a></p>
<ul>
<li><p>qrsh登录计算节点</p></li>
<li><p>qsub递交批量任务</p>
<p>创建<code>work.sh</code>文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#$ -S /bin/bash</span><br><span class="line">#$ -N JobName</span><br><span class="line">#$ -cwd</span><br><span class="line">#$ -j y</span><br><span class="line">#$ -pe smp 5</span><br><span class="line">#$ -l mem_free=6G,h_vmem=6G</span><br><span class="line">需要执行的任务命令</span><br></pre></td></tr></table></figure>
<p>提交任务：<code>qsub work.sh</code></p>
<p>查看任务运行情况：<code>qstat</code></p>
<p>删除任务：<code>qdel 139</code></p></li>
</ul>
<p>详解：</p>
<ol type="1">
<li>Use the <code>-pe local K</code> option to request K slots on a
single cluster node.</li>
<li>use the <code>-R y</code> option to turn on slot reservation.</li>
<li>Use the <code>mem_free=NG</code> option to specify N Gigabytes of
memory your job(指定作业多少G内存).</li>
<li>Use <code>h_vmem= nG</code> to set the hard memory limit for your
job. Important: the value, <code>n</code>, you set in
<code>h_vmem</code> is the total memory you set via
<code>mem_free</code> divided by the number of slots specified for
<code>-pe</code>. In other words n=N/K.</li>
<li><code>-S shell_path</code>：指定运行Shell<a
href="https://www.cnblogs.com/renping/p/7441494.html">环境</a></li>
<li><code>-N job_name</code>：重命名作业名</li>
<li><code>-cwd</code>：从当前工作路径运行作业</li>
<li><code>-j y[es]|n[o]</code>：定义作业的标准错误输出是否写入到输出文件中</li>
</ol>
<p>推荐阅读：https://qpeng.org/prog/sge.htm</p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ChatGPT引导语</title>
    <url>/chatgpt%E5%BC%95%E5%AF%BC%E8%AF%AD/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>翻译：</p>
<p>我想让你充当英文翻译员、拼写纠正员和改进员。我会用任何语言与你交谈，你会检测语言，把它翻译为英语。我希望翻译的效果符合sci期刊的要求，并尽可能简洁易读。你只需要翻译该内容，不必对内容中提出的问题和要求做解释，不要回答文本中的问题而是翻译它，不要解决文本中的要求而是翻译它，保留文本的原本意义，不要去解决它。我要你只回复更正、改进，不要写任何解释。每次提供3个版本的翻译，并使用表格编排好。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="https://github.com/jevantang/chatgpt-prompts/tree/main
">[1]</span></a></sup></p>
<span id="more"></span>
<h3 id="参考文献">参考文献</h3>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">https://github.com/jevantang/chatgpt-prompts/tree/main<a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>connecting to kernel：python</title>
    <url>/connecting-to-kernel%EF%BC%9Apython/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>使用环境：Vscode 和Jupyter Notebook 相关插件</p>
<h5 id="问题">问题</h5>
<p>Vscode连接python环境时右下角始终显示connecting to
kernel，无法执行基本代码功能。</p>
<span id="more"></span>
<h5 id="解决方法">解决方法</h5>
<p>1、删除多余的python版本</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301182151530.png" /></p>
<p>需要删除的版本，我已删除，这里用保留版本的python做演示；
注意，用该方法卸载之后，要去python的安装目录下检查，一定要删除干净，否则重启之后，修改过的环境变量可能会复原为原来的设置；</p>
<p>python默认安装路径：<code>C:\Users\你的用户名\AppData\Local\Programs\Python</code>
将你要删除的python版本的整个文件夹删除</p>
<p>2、配置好环境变量
右键此电脑--&gt;属性--&gt;高级系统设置--&gt;环境变量</p>
<figure>
<img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301182156852.png"
alt="image-20230118215647728" />
<figcaption aria-hidden="true">image-20230118215647728</figcaption>
</figure>
<p>将删除的python版本的环境变量也删除，用户变量和系统变量都需删除（点击相应环境变量，删除，确定即可）；</p>
<p>将保留的python版本的两个目录都添加到path里（点击新建，粘贴目录，点击确定即可），用户变量和系统变量都添加进去；
<code>C:\Users\你的用户名\AppData\Local\Programs\Python\Python310</code>
<code>C:\Users\你的用户名\AppData\Local\Programs\Python\Python310\Scripts</code></p>
<p>3、重启电脑，查看环境变量是否发生改变，若与上两步设置一致，则完成；若环境变量改变，可能是python没有删除干净，确保第一步完成；</p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Vscode</tag>
        <tag>Python</tag>
        <tag>Jupyter Notebook</tag>
      </tags>
  </entry>
  <entry>
    <title>cover letter</title>
    <url>/cover-letter/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Cover
Letter主要包括以下几方面<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="https://blog.sciencenet.cn/blog-909908-682912.html
">[1]</span></a></sup>：</p>
<ol type="1">
<li><p>右上角日期</p></li>
<li><p>左上角（日期下一行）是抬头，如果没有熟悉的编辑Editor，就写给editor-in-chief主编，然后写上杂志的名字和地址。</p></li>
<li><p>Dear Prof.
或者Dr.开头。第一段写投稿到你们杂志，我们觉得这篇文章很适合在你们杂志发表之类的。</p></li>
<li><p>第二段开始简介下文章内容，着重讲意义significance，或者创新性innovation.尽量简短明了。有时候可以写两段。如果有十分重大发现或者有意义发现，着重指出来。</p></li>
<li><p>一般要做些statement陈述，比如没有在其他杂志发表，所有作者都同意提交，没有经济利益冲突等等。有的杂志要求列上项目经费来源。</p></li>
<li><p>最后就是客气下结尾了。然后通讯作者的名字签字和地址等联系方式。</p></li>
<li><p>信纸要用有单位logo和抬头的信纸，然后扫描，也可以电子签名然后生成PDF。</p>
<span id="more"></span></li>
</ol>
<h3 id="模板">模板</h3>
<h4 id="第一次投稿">1 第一次投稿</h4>
<p>主要任务是介绍文章主要创新以及声明没有一稿多投。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="https://zhuanlan.zhihu.com/p/121473271
">[2]</span></a></sup></p>
<p>Dear Editors:</p>
<p>We would like to submit the enclosed manuscript entitled “Paper
Title”, which we wish to be considered for publication in “Journal
Name”. No conflict of interest exits in the submission of this
manuscript, and manuscript is approved by all authors for publication. I
would like to declare on behalf of my co-authors that the work described
was original research that has not been published previously, and not
under consideration for publication elsewhere, in whole or in part. All
the authors listed have approved the manuscript that is enclosed.</p>
<p>In this work, we evaluated …… (简要介绍一下论文的创新性). I hope this
paper is suitable for “Journal Name”.</p>
<p>The following is a list of possible reviewers for your
consideration:</p>
<ol type="1">
<li><p>Name A E-mail: ××××@××××</p></li>
<li><p>Name B E-mail: ××××@××××</p></li>
</ol>
<p>We deeply appreciate your consideration of our manuscript, and we
look forward to receiving comments from the reviewers. If you have any
queries, please don’t hesitate to contact me at the address below.</p>
<p>Thank you and best regards.</p>
<p>Yours sincerely,</p>
<p>××××××</p>
<p>Corresponding author:</p>
<p>Name: ×××</p>
<p>E-mail: ××××@××××</p>
<h4 id="催稿信">2 催稿信</h4>
<p>询问稿件处理到声明步骤</p>
<p>Dear Prof. ×××:</p>
<p>Sorry for disturbing you. I am not sure if it is the right time to
contact you to inquire about the status of my submitted manuscript
titled “Paper Title”. (ID: 文章稿号), although the status of “With
Editor” has been lasting for more than two months, since submitted to
journal three months ago. I am just wondering that my manuscript has
been sent to reviewers or not?</p>
<p>I would be greatly appreciated if you could spend some of your time
check the status for us. I am very pleased to hear from you on the
reviewer’s comments.</p>
<p>Thank you very much for your consideration.</p>
<p>Best regards!</p>
<p>Yours sincerely,</p>
<p>××××××</p>
<p>Corresponding author:</p>
<p>Name: ×××</p>
<p>E-mail: ××××@××××</p>
<h4 id="修改稿">3 修改稿</h4>
<p>Dear Dr/
Prof..（写上负责你文章编辑的姓名，显得尊重，因为第一次的投稿不知道具体负责的编辑，只能用通用的Editors）:</p>
<p>On behalf of my co-authors, we thank you very much for giving us an
opportunity to revise our manuscript, we appreciate editor and reviewers
very much for their positive and constructive comments and suggestions
on our manuscript entitled “Paper Title”. (ID: 文章稿号).</p>
<p>We have studied reviewer’s comments carefully and have made revision
which marked in red in the paper. We have tried our best to revise our
manuscript according to the comments. Attached please find the revised
version, which we would like to submit for your kind consideration.</p>
<p>We would like to express our great appreciation to you and reviewers
for comments on our paper. Looking forward to hearing from you.</p>
<p>Thank you and best regards.</p>
<p>Yours sincerely,</p>
<p>××××××</p>
<p>Corresponding author:</p>
<p>Name: ×××</p>
<p>E-mail: ××××@××××</p>
<h4 id="修改稿回答审稿人的意见最重要的部分">4
修改稿回答审稿人的意见（最重要的部分）</h4>
<p>List of Responses</p>
<p>Dear Editors and Reviewers:</p>
<p>Thank you for your letter and for the reviewers’ comments concerning
our manuscript entitled “Paper Title” (ID: 文章稿号). Those comments are
all valuable and very helpful for revising and improving our paper, as
well as the important guiding significance to our researches. We have
studied comments carefully and have made correction which we hope meet
with approval. Revised portion are marked in red in the paper. The main
corrections in the paper and the responds to the reviewer’s comments are
as flowing:</p>
<p>Responds to the reviewer’s comments:</p>
<p>Reviewer #1:</p>
<ol type="1">
<li>Response to comment: (……简要列出意见……)</li>
</ol>
<p>Response: ××××××</p>
<ol start="2" type="1">
<li>Response to comment: (……简要列出意见……)</li>
</ol>
<p>Response: ××××××</p>
<p>。。。。。。</p>
<p>逐条意见回答，切忌一定不能有遗漏</p>
<p>针对不同的问题有下列几个礼貌术语可适当用用：</p>
<p>We are very sorry for our negligence of ……...</p>
<p>We are very sorry for our incorrect writing ……...</p>
<p>It is really true as Reviewer suggested that……</p>
<p>We have made correction according to the Reviewer’s comments.</p>
<p>We have re-written this part according to the Reviewer’s
suggestion</p>
<p>As Reviewer suggested that……</p>
<p>Considering the Reviewer’s suggestion, we have ……</p>
<p>最后特意感谢一下这个审稿人的意见：</p>
<p>Special thanks to you for your good comments.</p>
<p>Reviewer #2:</p>
<p>同上述</p>
<p>Reviewer #3:</p>
<p>××××××</p>
<p>Other changes:</p>
<ol type="1">
<li><p>Line 60-61, the statements of “……” were corrected as
“…………”</p></li>
<li><p>Line 107, “……” was added</p></li>
<li><p>Line 129, “……” was deleted</p></li>
</ol>
<p>××××××</p>
<p>We tried our best to improve the manuscript and made some changes in
the manuscript. These changes will not influence the content and
framework of the paper. And here we did not list the changes but marked
in red in revised paper.</p>
<p>We appreciate for Editors/Reviewers’ warm work earnestly, and hope
that the correction will meet with approval.</p>
<p>Once again, thank you very much for your comments and
suggestions.</p>
<h4 id="文章接受后可以考虑感谢一下负责你文章的编辑或主编根据需要">5
文章接受后可以考虑感谢一下负责你文章的编辑或主编（根据需要）</h4>
<p>Dear Prof. ××××××:</p>
<p>Thanks very much for your kind work and consideration on publication
of our paper. On behalf of my co-authors, we would like to express our
great appreciation to editor and reviewers.</p>
<p>Thank you and best regards.</p>
<p>Yours sincerely,</p>
<p>××××××</p>
<p>Corresponding author:</p>
<p>Name: ×××</p>
<p>E-mail: ××××@××××</p>
<h4 id="询问校稿信件如果文章接受后时间较长">6
询问校稿信件（如果文章接受后时间较长）</h4>
<p>Dear ×××:</p>
<p>Sorry for disturbing you. I am not sure if it is the right time to
contact you to inquire about the status of our accepted manuscript
titled “Paper Title” (ID: 文章稿号), since the copyright agreement for
publication has been sent to you two months ago. I am just wondering
that how long I can receive the proof of our manuscript from you?</p>
<p>I would be greatly appreciated if you could spend some of your time
for a reply. I am very pleased to hear from you.</p>
<p>Thank you very much for your consideration.</p>
<p>Yours sincerely,</p>
<p>××××××</p>
<p>Corresponding author:</p>
<p>Name: ×××</p>
<p>E-mail: ××××@××××</p>
<h4 id="文章校稿信件">7 文章校稿信件</h4>
<p>Dear Mr. ×××:</p>
<p>Thanks very much for your kind letter about the proof of our paper
titled “Paper Title” (ID: 文章稿号) for publication in “Journal Name”.
We have finished the proof reading and checking carefully, and some
corrections about the proof and the answers to the queries are provided
below.</p>
<p>Corrections:</p>
<ol type="1">
<li><p>In ****** should be **** (Page <strong><em>, Right column,
line</em></strong>)</p></li>
<li><p>In **** the “*****” should be “****” (Page ****, Right column,
line****)</p></li>
</ol>
<p>Answers for “author queries”:</p>
<ol type="1">
<li><p>*********************.</p></li>
<li><hr /></li>
<li><hr /></li>
</ol>
<p>We greatly appreciate the efficient, professional and rapid
processing of our paper by your team. If there is anything else we
should do, please do not hesitate to let us know.</p>
<p>Thank you and best regards.</p>
<p>Yours sincerely,</p>
<p>××××××</p>
<p>Corresponding author:</p>
<p>Name: ×××</p>
<p>E-mail: ××××@××××</p>
<h3 id="参考文章">参考文章</h3>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">https://blog.sciencenet.cn/blog-909908-682912.html<a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">https://zhuanlan.zhihu.com/p/121473271<a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo代码块折叠功能</title>
    <url>/hexo%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8A%98%E5%8F%A0%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="说明">说明</h3>
<p>实现同样的效果：</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301252237971.gif" /></p>
<p>本博客环境：<code>hexo@6.2.0</code>，<code>next@7.8.0</code>，以下所有代码，建立在这个基础之上。</p>
<p>由 jQuery
选择器选择代码模块<code>.highlight</code>相关的DOM节点，给超过某个高度的代码模块添加展开收起的盒子，让盒子实现展开隐藏效果。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[hexo博客代码折叠功能](https://www.toimc.com/hexo-usage-2/)">[1]</span></a></sup></p>
<p><code>hexo version</code>即可查看hexo版本；</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301252237479.png" /></p>
<p>查看<code>theme/next/package.json</code>即可查看next版本；</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301252237584.png" /></p>
<span id="more"></span>
<h3 id="添加-code-unfold.js">1、添加 code-unfold.js</h3>
<p>把<code>code-unfold.js</code>放置在了<code>themes/next/source/js/code-unfold.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var CODE_MAX_HEIGHT = 200;</span><br><span class="line">var containers = [];</span><br><span class="line"></span><br><span class="line">// 展开</span><br><span class="line">$(&#x27;body&#x27;).on(&#x27;click&#x27;, &#x27;.js_unfold_code_btn&#x27;, function () &#123;</span><br><span class="line">  $(this).closest(&#x27;.js_highlight_container&#x27;).addClass(&#x27;on&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">// 收起</span><br><span class="line">$(&#x27;body&#x27;).on(&#x27;click&#x27;, &#x27;.js_retract_code_btn&#x27;, function () &#123;</span><br><span class="line">  var $container = $(this).closest(&#x27;.js_highlight_container&#x27;).removeClass(&#x27;on&#x27;);</span><br><span class="line">  var winTop = $(window).scrollTop();</span><br><span class="line">  var offsetTop = $container.offset().top;</span><br><span class="line">  $(this).css(&#x27;top&#x27;, 0);</span><br><span class="line">  if (winTop &gt; offsetTop) &#123;</span><br><span class="line">    // 设置滚动条位置</span><br><span class="line">    $(&#x27;body, html&#x27;).animate(&#123;</span><br><span class="line">      scrollTop: $container.offset().top - CODE_MAX_HEIGHT</span><br><span class="line">    &#125;, 600);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 滚动事件，触发动画效果</span><br><span class="line">$(window).on(&#x27;scroll&#x27;, function () &#123;</span><br><span class="line">  var scrollTop = $(window).scrollTop();</span><br><span class="line">  var temp = [];</span><br><span class="line">  for (let i = 0; i &lt; containers.length; i++) &#123;</span><br><span class="line">    var item = containers[i];</span><br><span class="line">    var &#123; $container, height, $hide, hasHorizontalScrollbar &#125; = item;</span><br><span class="line">    if ($container.closest(&#x27;body&#x27;).length === 0) &#123;</span><br><span class="line">      // 如果 $container 元素已经不在页面上, 则删除该元素</span><br><span class="line">      // 防止pjax页面跳转之后，元素未删除</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    temp.push(item);</span><br><span class="line">    if (!$container.hasClass(&#x27;on&#x27;)) &#123;</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    var offsetTop = $container.offset().top;</span><br><span class="line">    var hideBtnHeight = $hide.outerHeight();</span><br><span class="line">    // 减去按钮高度，减去底部滚动条高度</span><br><span class="line">    var maxTop = parseInt(height - (hasHorizontalScrollbar ? 17 : 0) - hideBtnHeight);</span><br><span class="line">    let top = parseInt(</span><br><span class="line">      Math.min(</span><br><span class="line">        Math.max(scrollTop - offsetTop, 0), // 如果小于 0 ，则取 0</span><br><span class="line">        maxTop,// 如果大于 height ，则取 height</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">    // 根据 sin 曲线设置&quot;收起代码&quot;位置</span><br><span class="line">    var halfHeight = parseInt($(window).height() / 2 * Math.sin((top / maxTop) * 90 * (2 * Math.PI/360)));</span><br><span class="line">    $hide.css(&#x27;top&#x27;, Math.min(top + halfHeight, maxTop));</span><br><span class="line">  &#125;</span><br><span class="line">  containers = temp;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 添加隐藏容器</span><br><span class="line">function addCodeWrap($node) &#123;</span><br><span class="line">  var $container = $node.wrap(&#x27;&lt;div class=&quot;js_highlight_container highlight-container&quot;&gt;&lt;div class=&quot;highlight-wrap&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;).closest(&#x27;.js_highlight_container&#x27;);</span><br><span class="line"></span><br><span class="line">  // 底部 &quot;展开代码&quot; 与 侧边栏 &quot;收起代码&quot;</span><br><span class="line">  var $btn = $(`</span><br><span class="line">    &lt;div class=&quot;highlight-footer&quot;&gt;</span><br><span class="line">      &lt;a class=&quot;js_unfold_code_btn show-btn&quot; href=&quot;javascript:;&quot;&gt;展开代码&lt;i class=&quot;fa fa-angle-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;a class=&quot;js_retract_code_btn hide-btn&quot; href=&quot;javascript:;&quot;&gt;&lt;i class=&quot;fa fa-angle-up&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;收起代码&lt;/a&gt;</span><br><span class="line">  `);</span><br><span class="line"></span><br><span class="line">  $container.append($btn);</span><br><span class="line">  return $container;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function codeUnfold () &#123;</span><br><span class="line">  $(&#x27;.highlight&#x27;).each(function () &#123;</span><br><span class="line">    // 防止重复渲染</span><br><span class="line">    if (this.__render__ === true) &#123;</span><br><span class="line">      return true;</span><br><span class="line">    &#125;</span><br><span class="line">    this.__render__ = true;</span><br><span class="line">    var $this = $(this);</span><br><span class="line">    var height = $(this).outerHeight();</span><br><span class="line">    if (height &gt; CODE_MAX_HEIGHT) &#123;</span><br><span class="line">      // 添加展开&amp;收起容器</span><br><span class="line">      var $container = addCodeWrap($this, height);</span><br><span class="line">      containers.push(&#123;</span><br><span class="line">        $container,</span><br><span class="line">        height,</span><br><span class="line">        $hide: $container.find(&#x27;.js_retract_code_btn&#x27;),</span><br><span class="line">        hasHorizontalScrollbar: this.scrollWidth &gt; this.offsetWidth,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="添加-jquery">2、添加 jquery</h3>
<p>修改next主题配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fancybox: true  </span><br></pre></td></tr></table></figure>
<p>因为<code>fancybox</code>会依赖<code>jquery</code>，所以设置成<code>true</code>；</p>
<h3 id="引用-code-unfold.js">3、引用 code-unfold.js</h3>
<p>修改文件<code>themes/next/layout/_scripts/index.njk</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在最后添加  </span><br><span class="line">&#123;&#123;- next_js(&#x27;code-unfold.js&#x27;) &#125;&#125;  </span><br></pre></td></tr></table></figure>
<p>next8.0的模板是使用njk，旧版是使用swig<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[Hexo-5.x 与 NexT-8.x 跨版本升级](https://www.imczw.com/post/tech/hexo5-next8-updated.html#more)
">[2]</span></a></sup>；我的next是7.8版本，没有 <code>index.njk</code>
文件只有 <code>index.swig</code>
文件；查看了njk文件感觉和添加进去的代码格式似乎没有差别，尝试将以上代码添加到
<code>index.swig</code> 文件中；</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301252237664.png" /></p>
<p>下面找到文件<code>themes/next/source/js/next-boot.js</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NexT.boot.refresh = function () &#123;  </span><br><span class="line">  // 添加一行代码  </span><br><span class="line">  codeUnfold()  </span><br><span class="line">    </span><br><span class="line">  // ...</span><br></pre></td></tr></table></figure>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301252237750.png" /></p>
<h3 id="添加样式">4、添加样式</h3>
<p>1、创建 <code>highlight.styl</code>
可以添加<code>theme/next/source/css/_common/components/highlight.styl</code>文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 展开收起效果</span><br><span class="line">.highlight-container</span><br><span class="line">  position: relative</span><br><span class="line">  background-color: highlight-background</span><br><span class="line">  &amp;.on</span><br><span class="line">    .highlight-footer</span><br><span class="line">      display: none</span><br><span class="line">    .hide-btn</span><br><span class="line">      display: flex</span><br><span class="line">    .highlight-wrap</span><br><span class="line">      max-height: none</span><br><span class="line">  .highlight-wrap</span><br><span class="line">    overflow: hidden</span><br><span class="line">    max-height: 200px</span><br><span class="line">  .highlight-footer</span><br><span class="line">    position absolute</span><br><span class="line">    width: 100%</span><br><span class="line">    left: 0</span><br><span class="line">    bottom: 0</span><br><span class="line">    height: 60px</span><br><span class="line">    background-image: &#x27;linear-gradient(-180deg, rgba(255,255,255,0) 0%, %s 65%)&#x27; % highlight-background;</span><br><span class="line">    text-align: center</span><br><span class="line">  .show-btn</span><br><span class="line">    font-size: 12px</span><br><span class="line">    color: #fff</span><br><span class="line">    position: absolute</span><br><span class="line">    left: 50%</span><br><span class="line">    transform: translateX(-50%)</span><br><span class="line">    bottom: 0</span><br><span class="line">    line-height: 2em</span><br><span class="line">    text-decoration: none</span><br><span class="line">    padding: 0 0.8em</span><br><span class="line">    text-align: center</span><br><span class="line">    border-radius: 4px 4px 0</span><br><span class="line">    &amp;:hover</span><br><span class="line">      text-decoration: none</span><br><span class="line">  .hide-btn</span><br><span class="line">    color: #fff</span><br><span class="line">    font-size: 12px</span><br><span class="line">    width: 22px</span><br><span class="line">    position: absolute</span><br><span class="line">    left: -21px</span><br><span class="line">    top: 0</span><br><span class="line">    line-height: 1em</span><br><span class="line">    text-decoration: none</span><br><span class="line">    text-align: center</span><br><span class="line">    display: none</span><br><span class="line">    flex-direction: column</span><br><span class="line">    background-color: highlight-background</span><br><span class="line">    border-radius: 4px 0 0 4px</span><br><span class="line">    padding: 0.1em 0 0.6em</span><br><span class="line">    transition: top ease 0.35s</span><br><span class="line">  .fa-angle-up,</span><br><span class="line">  .fa-angle-down</span><br><span class="line">    font-style: normal</span><br><span class="line">    color: #fff</span><br><span class="line">  .fa-angle-up:before</span><br><span class="line">    content:&quot;\f106&quot;</span><br><span class="line">  .fa-angle-down:before</span><br><span class="line">    content:&quot;\f107&quot;</span><br><span class="line">    margin-left: 0.5em</span><br><span class="line">  .js_unfold_code_btn, .js_retract_code_btn</span><br><span class="line">    background: rgba(0,0,0,0.5)</span><br><span class="line">    border-bottom: none !important</span><br><span class="line">    &amp;:hover</span><br><span class="line">      border-bottom-color: none !important</span><br></pre></td></tr></table></figure>
<p>2、引用样式 找到文件
<code>themes/next/source/css/_common/components/index.styl</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@import &#x27;post&#x27;;</span><br><span class="line">@import &#x27;pages&#x27;;</span><br><span class="line">@import &#x27;third-party&#x27;;</span><br><span class="line">// 添加这一行，不要加分号！！</span><br><span class="line">@import &#x27;highlight&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>该目录下（
<code>themes/next/source/css/_common/components/</code>）没找到
<code>index.styl</code> ，尝试将 <code>@import 'highlight'</code> 添加到
<code>components.styl</code> ，看是否可行；</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301252237863.png" /></p>
<p>实现了想要的效果，做的修改是可行的！</p>
<h3 id="参考文章">参考文章</h3>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.toimc.com/hexo-usage-2/">hexo博客代码折叠功能</a><a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.imczw.com/post/tech/hexo5-next8-updated.html#more">Hexo-5.x
与 NexT-8.x 跨版本升级</a><a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>So</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的使用</title>
    <url>/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h4 id="一配置参考">一、配置参考</h4>
<ul>
<li><p>初步搭建视频参考：<a
href="https://www.youtube.com/watch?v=erKYtw4Rfhk&amp;t=1338s&amp;ab_channel=CodeSheep程序羊">手把手教你从0开始搭建自己的个人博客
|无坑版视频教程| hexo - YouTube</a> ↩︎</p></li>
<li><p>初步搭建文章参考：<a
href="https://zhuanlan.zhihu.com/p/60578464">使用 Hexo+GitHub
搭建个人免费博客教程 知乎</a></p></li>
<li><p>主题初步配置视频参考：https://www.bilibili.com/video/BV16W411t7mq?share_source=copy_web&amp;vd_source=7f2a81e814313c699f856c2ec72be7d9</p></li>
<li><p>主题初步配置文章参考：<a
href="https://qianfanguojin.top/2019/07/20/Hexo博客搭建记录（二）：主题设置以及美化/#6-2-代码块设置">Hexo博客搭建记录（二）：基本主题设置以及美化
| 谢同学的博客 (qianfanguojin.top)</a></p></li>
<li><p>更换主题：下载主题文件到theme文件夹下(<code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code>)，修改_config.yml里themes为相关的主题名。然后<code>hexo clean</code>
再<code>hexo g</code>
和<code>hexo d</code>（目前next主题地址：https://github.com/theme-next/hexo-theme-next)</p></li>
<li><p>分类和标签设置：<a
href="https://linlif.github.io/2017/05/27/Hexo使用攻略-添加分类及标签/">Hexo使用攻略-添加分类及标签
| linlif-blog</a></p></li>
<li><p>添加搜索：<a
href="https://yashuning.github.io/2018/06/29/hexo-Next-主题添加搜索功能/">hexo
- Next 主题添加搜索功能 | Yaya's blog (yashuning.github.io)</a></p></li>
<li><p>查看next版本：主题文件夹--&gt;package.json--&gt;搜索“version"。自己目前用的7.8.0版本</p></li>
<li><p>NeXt
RSS的订阅：点击RSS图标，自动打开一个网址，复制该网址链接（此链接就是订阅源），复制到相应软件中，即可订阅</p></li>
<li><p>脚注的实现：下个插件就好了<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[Hexo脚注插件 | 蓝蓝站点 (lanlan2017.github.io)](https://lanlan2017.github.io/blog/65d90bd2/)
">[1]</span></a></sup>：<code>npm install hexo-reference --save</code></p></li>
<li><p>评论功能的实现：<a
href="https://xinyufeng.net/2020/06/01/Hexo-Next主题-添加文章评论功能/">Hexo
Next主题 添加文章评论功能 | Peak Xin (xinyufeng.net)</a></p></li>
<li><p>博客成立时间：<a
href="https://blog.51cto.com/u_12877374/4977880">使用 Github 空间搭建
Hexo 技术博客——Hexo
NexT主题内网站运行时间的设置（十）_12867374的技术博客_51CTO博客</a></p></li>
<li><p>去除power by ：hexo</p>
<ul>
<li>将主题（<code>next</code>）配置文件 <code>_config.yml</code>
中的以下字段设为 <code>false</code></li>
</ul>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">    powered: false</span><br><span class="line">    theme:</span><br><span class="line">        enable: false</span><br><span class="line">        version: false</span><br></pre></td></tr></table></figure>
</blockquote></li>
<li><p>代码块增加复制功能：在主题的配置文件_config.yml 中设置
copy_button 为 true 即可。</p></li>
</ul>
<p>购买域名：本人用的是：https://www.name.com/zh-cn/</p>
<p>购买域名后，需要解析域名：</p>
<ul>
<li><figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208031717949.png"
alt="image-20220803170153745" />
<figcaption aria-hidden="true">image-20220803170153745</figcaption>
</figure></li>
<li><figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208031718828.png"
alt="image-20220803170232306" />
<figcaption aria-hidden="true">image-20220803170232306</figcaption>
</figure></li>
<li><figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208031718930.png"
alt="image-20220803170419988" />
<figcaption aria-hidden="true">image-20220803170419988</figcaption>
</figure></li>
</ul>
<p>解析域名之后需要添加到github仓库上以及绑定到hexo上：setting-page,填写新的网址，勾选下面的https,绑定hexo之后还需要等待一些时间，不勾选的话，绑定hexo之后就可以直接用新的网址查看了。</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208031718837.png"
alt="image-20220803171143202" />
<figcaption aria-hidden="true">image-20220803171143202</figcaption>
</figure>
<p>为什么需要选择CNAME：</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208031718225.png"
alt="image-20220803162054015" />
<figcaption aria-hidden="true">image-20220803162054015</figcaption>
</figure>
<p>去到hexo的source文件夹，打开记事本，里面输入自己的域名，如
https://www.example.com，保存名称为 “CNAME”，格式为 “所有文件”（无 .txt
后缀）。</p>
<p>清除缓存等文件并重新发布网站，即可用新的网址查看了。</p>
<ul>
<li><p>hexo的NexT主题，怎么取消“文章目录”对标题的自动编号？</p>
<p><a
href="https://segmentfault.com/q/1010000008494901">来源</a>，修改next主题配置文件那里toc的<code>number</code>为<code>false</code></p></li>
<li><p>文章加密：https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md</p></li>
</ul>
<h4 id="二基本命令">二、基本命令</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init <span class="comment"># 初始化博客</span></span><br><span class="line"></span><br><span class="line">hexo clean <span class="comment"># 清除缓存</span></span><br><span class="line">hexo g <span class="comment"># generate 生成页面</span></span><br><span class="line">hexo s  <span class="comment"># server  启动本地服务预览：localhost:端口 填入浏览器地址</span></span><br><span class="line">hexo d <span class="comment"># deploy 部署发布</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文章：layout有三种：post(会发布)、draft(草稿)、page(首页标签页)</span></span><br><span class="line"><span class="comment"># 三种文章的模板文件在根文件夹的scaffolds里</span></span><br><span class="line">hexo n [layout] 文件名  <span class="comment"># 不加layout, 默认layout是post</span></span><br><span class="line">hexo n <span class="built_in">test</span> <span class="comment"># 创建一个名叫test的发布文件</span></span><br><span class="line">hexo n draft <span class="built_in">test</span> <span class="comment"># 创建一个名叫test的草稿文件，不发布</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建三个首页的标签页：</span></span><br><span class="line">hexo n page tags  <span class="comment"># 使tags点击可用，执行结束记得修改生成的md文件，type填写为 tags</span></span><br><span class="line">hexo n page categories <span class="comment"># 与上同理</span></span><br><span class="line">hexo n page about <span class="comment"># 生成的md文件，就是点击看到的文章，可直接编辑填写</span></span><br></pre></td></tr></table></figure>
<p>Hexo的分类和标签<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[Hexo-NexT 分类多层级描述 | Chang (cs-cshi.github.io)](https://cs-cshi.github.io/hexo-blog/Hexo-NexT分类多层级描述/)
">[2]</span></a></sup>：分类具有顺序和层次性，而标签没有顺序和层次</p>
<p>父子分类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 文章的前缀</span><br><span class="line">categories:   # 方法1 Life是Diary的子分类，即分类具有顺序和层次性</span><br><span class="line">- Diary</span><br><span class="line">- Life</span><br><span class="line"></span><br><span class="line">categories:   # 方法2 Life是Diary的子分类</span><br><span class="line">- [Diary, Life]</span><br></pre></td></tr></table></figure>
<p>同级分类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories:  # Diary和life为同级分类</span><br><span class="line">- [Diary]</span><br><span class="line">- [Life]</span><br></pre></td></tr></table></figure>
<p>标签使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure>
<p>主页文章折叠：<code>&lt;!--more--&gt;</code>把这个添加在文章里，前面的内容显示，后面的内容就被折叠了。</p>
<h4 id="三问题解决">三、问题解决：</h4>
<p>1、端口占用：<a
href="https://blog.csdn.net/weixin_45627031/article/details/108359235">(88条消息)
FATAL Port 4000 has been used. Try other port
instead._我是泛滥的博客-CSDN博客</a></p>
<p>2、</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br><span class="line">FATAL YAMLException: can not <span class="built_in">read</span> an implicit mapping pair; a colon is missed (107:14)</span><br><span class="line"><span class="comment"># 配置里：branch里少了一个空格</span></span><br></pre></td></tr></table></figure>
<p>3、<a href="https://blog.garryde.com/archives/46153.html">Hexo Next
修改中文不生效 - 咖里De (garryde.com)</a></p>
<p>4、github 图床网页不显示，本地localhost
显示：可能是防盗链<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[Hexo博客不显示图床图片的解决方法 · vgtiger&#39;s Studio](https://www.vgtiger.com/2021/05/20/Hexo博客不显示图床图片的解决方法/)
">[3]</span></a></sup>，修改<code>/hexo/themes/next/layout/_partials/head/head.swig</code>文件，不同主题修改的文件应该不同。可用ripgrep搜索一下文件中含<code>&lt;meta charset&gt;</code>的内容，排除html的文件，看文件是否在主题文件夹内，筛选一下。</p>
<p>加入一下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;</span><br></pre></td></tr></table></figure>
<h4 id="四参考文章">四、参考文章</h4>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://lanlan2017.github.io/blog/65d90bd2/">Hexo脚注插件
| 蓝蓝站点 (lanlan2017.github.io)</a><a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://cs-cshi.github.io/hexo-blog/Hexo-NexT%E5%88%86%E7%B1%BB%E5%A4%9A%E5%B1%82%E7%BA%A7%E6%8F%8F%E8%BF%B0/">Hexo-NexT
分类多层级描述 | Chang
(cs-cshi.github.io)</a><a href="#fnref:2" rev="footnote"> ↩︎</a></span>
</li>
<li id="fn:3">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.vgtiger.com/2021/05/20/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%BA%8A%E5%9B%BE%E7%89%87%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/">Hexo博客不显示图床图片的解决方法
· vgtiger's Studio</a><a href="#fnref:3" rev="footnote"> ↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Jupyter Notebook 使用</title>
    <url>/jupyter-notebook-%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="改变默认路径">1、改变默认路径</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jupyter notebook --generate-config  # 若已有jupyter_notebook_config.py文件则不用执行</span><br></pre></td></tr></table></figure>
<p>搜索找到jupyter_notebook_config.py文件，打开文件，找到<code>c.NotebookApp.notebook_dir</code>这行，在引号内填写自己事先创建的文件夹地址(注意地址的填写方式：<code>D://adf//fafad</code>)。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="https://zhuanlan.zhihu.com/p/70420213
">[1]</span></a></sup></p>
<span id="more"></span>
<h3 id="新建报错">2、新建报错</h3>
<p><code>An error occurred while creating a new notebook</code></p>
<p>找到jupyter_notebook_config.py文件，打开文件，找到<code>c.NotebookApp.allow_origin</code>这行，在引号里
填入<code>*</code>，重启软件即可。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="https://www.bilibili.com/read/cv13682239
">[2]</span></a></sup></p>
<h3 id="debug">3、debug</h3>
<p>在需要停下来的地方，插入<code>import pdb; pdb.set_trace()</code>
<code>n</code>执行下一行，<code>c</code>执行下面所有代码。<code>h</code>可以查看所有命令。<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="https://www.jianshu.com/p/6ba71f336121
">[3]</span></a></sup></p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208291609292.png"
alt="image-20220829160917356" />
<figcaption aria-hidden="true">image-20220829160917356</figcaption>
</figure>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">https://zhuanlan.zhihu.com/p/70420213<a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.bilibili.com/read/cv13682239<a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:3">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.jianshu.com/p/6ba71f336121<a href="#fnref:3" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Jupyter Notebook</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo评论功能的实现：Gitalk</title>
    <url>/hexo%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%9Agitalk/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>需求： 1、用Gitalk实现评论功能 2、去除之前的Valine实现的评论功能</p>
<p>可在主题配置文件搜索<code>comment system</code>，查看支持的评论系统；个人使用Gitalk进行配置；
<img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346734.png" /></p>
<span id="more"></span>
<h3 id="gitalk评论功能">Gitalk评论功能</h3>
<h4 id="注册oauth-application">1、注册OAuth application</h4>
<ol type="1">
<li>在 github 中进行注册，进入 <a
href="https://github.com/settings/profile"
class="uri">https://github.com/settings/profile</a></li>
<li>点击左侧 Developer settings</li>
<li>Register a new application</li>
</ol>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346185.png" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Application name:	#应用名称</span><br><span class="line">Homepage URL：  		#网站URL(填自己的博客主页地址) </span><br><span class="line">Application description		#描述  </span><br><span class="line">Authorization callback URL:	#网站URL(填自己的博客主页地址)  </span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>注册完成之后，会得到：<code>Client ID</code> 和
<code>Client Secret</code><sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[Hexo Next主题 添加文章评论功能](https://xinyufeng.net/2020/06/01/Hexo-Next%E4%B8%BB%E9%A2%98-%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/)
">[1]</span></a></sup></li>
</ol>
<h4 id="新建存放博客评论仓库">2、新建存放博客评论仓库</h4>
<p>可以在 github 中建一个项目，专门用来存储你的博客评论</p>
<h4 id="配置-next-主题文件">3、配置 Next 主题文件</h4>
<p>编辑主题配置文件：<code>themes\next\ _config.yml</code>，找到有关
gitalk的相关配置进行填写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true 开启gitalk评论，不需要配置</span><br><span class="line">  owner: github用户名</span><br><span class="line">  admin: github用户名</span><br><span class="line">  repo: 博客的仓库名称(注意不是地址)</span><br><span class="line">  ClientID: 上面生成的Client ID</span><br><span class="line">  ClientSecret: 上面生成的Client Secret</span><br><span class="line">  labels: &#x27;gitalk&#x27; github issue 对应的issue标签（新建一个）</span><br><span class="line">  distractionFreeMode: true  无干扰模式，不需要更改</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这是我的配置： <img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346259.png" /></p>
<p>进入到 <code>themes\next\layout\post.swig</code>（我的博客是基于
Next，如果有差异，替换路径中的 next 即可），添加 gitalk
模板文件的导入<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[如何在 hexo 博客中，集成 gitalk 评论插件](https://eminoda.github.io/2021/06/16/hexo-gitalk-comment-plugins-in-github-issue/?)
">[2]</span></a></sup>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- &#123;### Line 357，如果行数有差异，只需要在 POST END 文章结束后添加即可 ###&#125; --&gt;  </span><br><span class="line">&#123;% if theme.git_talk.enabled and not is_index %&#125;  </span><br><span class="line">&lt;div&gt;&#123;% include &#x27;git-talk.swig&#x27; %&#125;&lt;/div&gt;  </span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>然后添加 <code>git-talk.swig</code>
文件（<code>themes\next\layout\git-talk.swig</code>），文件内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&quot; /&gt;  </span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;  </span><br><span class="line">  var gitalk = new Gitalk(&#123;  </span><br><span class="line">    clientID: &quot;&#123;&#123;theme.git_talk.clientID&#125;&#125;&quot;,  </span><br><span class="line">    clientSecret: &quot;&#123;&#123;theme.git_talk.clientSecret&#125;&#125;&quot;,  </span><br><span class="line">    repo: &quot;eminoda.github.io&quot;, // 博客仓库地址  </span><br><span class="line">    owner: &quot;eminoda&quot;, // github 用户名  </span><br><span class="line">    admin: [&quot;eminoda&quot;], // github 用户名  </span><br><span class="line">    perPage: 20,  </span><br><span class="line">    id: location.pathname.slice(0, 50), // 查找 issus 的条件，后面将对 id 有针对逻辑  </span><br><span class="line">    title: &quot;&#123;&#123;page.title&#125;&#125;&quot;,  </span><br><span class="line">    body: &quot;🚀 &quot; + location.href + &quot;\n\n欢迎通过 issues 留言 ，互相交流学习😊&quot;, // 初始化后，issues 的内容  </span><br><span class="line">  &#125;);  </span><br><span class="line">  gitalk.render(&quot;gitalk-container&quot;);  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>以上操作完成后，打开文章即可看到以下页面，需要登录github账号初始化；每篇文章都需要进行登录初始化才可以使用；</p>
<figure>
<img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346322.png"
alt="未登录" />
<figcaption aria-hidden="true">未登录</figcaption>
</figure>
<figure>
<img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346388.png"
alt="初始化后" />
<figcaption aria-hidden="true">初始化后</figcaption>
</figure>
<h4 id="全部文章批量初始化issues">4、全部文章批量初始化Issues</h4>
<p>对于一个刚起步的博客站点没有任何问题，新增一篇文章，初始化下issue，顺手的事情。</p>
<p>但对于一个历史站点，里面可能有百篇文章，如果希望看到别人阅读的回复，则需要人工每篇进行初始化，不太现实，则需要程序来批量初始化。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[如何在 hexo 博客中，集成 gitalk 评论插件](https://eminoda.github.io/2021/06/16/hexo-gitalk-comment-plugins-in-github-issue/?)
">[2]</span></a></sup></p>
<h5 id="开启-oauth-认证">4.1 开启 OAuth 认证</h5>
<p>需要在 <strong>Developer Setting</strong> 开启 <strong>Personal
access
tokens</strong><sup id="fnref:3"><a href="#fn:3" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[hexo gitalk 评论自动初始化](https://blog.jijian.link/2020-01-10/hexo-gitalk-auto-init/)
">[3]</span></a></sup></p>
<h5 id="安装项目依赖">4.2 安装项目依赖</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i request xml-parser blueimp-md5 moment hexo-generator-sitemap -S</span><br></pre></td></tr></table></figure>
<p>需要的包：request、xml-parser、 blueimp-md5、 moment、
hexo-generator-sitemap</p>
<h5 id="修改-hexo-generator-sitemap-配置">4.3 修改
hexo-generator-sitemap 配置</h5>
<p>项目根目录配置文件 <code>_config.yml</code>
添加配置<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[hexo next](https://white-than-wood.zone/2022/08/30/hexo-next/)
">[5]</span></a></sup>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">  template: ./sitemap_template.xml</span><br><span class="line">  rel: false</span><br><span class="line">  tag: true</span><br><span class="line">  category: false</span><br></pre></td></tr></table></figure>
<p>项目根目录新建文件 <code>sitemap_template.xml</code> ，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;urlset xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt;  </span><br><span class="line">  &#123;% for post in posts %&#125;  </span><br><span class="line">  &lt;url&gt;  </span><br><span class="line">    &lt;loc&gt;&#123;&#123; post.permalink | uriencode &#125;&#125;&lt;/loc&gt;  </span><br><span class="line">    &#123;% if post.updated %&#125;  </span><br><span class="line">    &lt;lastmod&gt;&#123;&#123; post.updated.toISOString() &#125;&#125;&lt;/lastmod&gt;  </span><br><span class="line">    &#123;% elif post.date %&#125;  </span><br><span class="line">    &lt;lastmod&gt;&#123;&#123; post.date.toISOString() &#125;&#125;&lt;/lastmod&gt;  </span><br><span class="line">    &#123;% endif %&#125;  </span><br><span class="line">    &lt;date&gt;&#123;&#123; post.date &#125;&#125;&lt;/date&gt;  </span><br><span class="line">    &lt;title&gt;&#123;&#123; post.title + &#x27; | &#x27; + config.title &#125;&#125;&lt;/title&gt;  </span><br><span class="line">    &#123;# nunjucks 模版语法 https://github.com/mozilla/nunjucks #&#125;  </span><br><span class="line">    &lt;desc&gt;&#123;&#123; post.description | default(post.excerpt) | default(post.content) | default(config.description) | striptags | truncate(200, true, &#x27;&#x27;) &#125;&#125;&lt;/desc&gt;  </span><br><span class="line">  &lt;/url&gt;  </span><br><span class="line">  &#123;% endfor %&#125;  </span><br><span class="line">&lt;/urlset&gt;</span><br></pre></td></tr></table></figure>
<h5 id="执行-hexo-generate-命令生成-sitemap">4.4 执行 hexo generate
命令，生成 sitemap</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<p>此命令执行成功之后， <code>public</code> 目录下应该有生成
<code>sitemap.xml</code>
文件，如果没有此文件，请检查包是否安装成功。</p>
<h5 id="添加自动初始化程序">4.5 添加自动初始化程序</h5>
<p>项目根目录新建文件 <code>talk-auto-init.js</code>
，内容如下<sup id="fnref:6"><a href="#fn:6" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[hexo主题next中gitalk配置与评论初始化](https://www.toimc.com/hexo-usage-3/)
">[6]</span></a></sup>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const url = require(&#x27;url&#x27;);</span><br><span class="line"></span><br><span class="line">const request = require(&#x27;request&#x27;);</span><br><span class="line">const xmlParser = require(&#x27;xml-parser&#x27;);</span><br><span class="line">const md5 = require(&#x27;md5&#x27;);</span><br><span class="line"></span><br><span class="line">// 配置信息</span><br><span class="line">const config = &#123;</span><br><span class="line">  username: &#x27;toimc&#x27;, // GitHub repository 所有者，可以是个人或者组织。对应Gitalk配置中的owner</span><br><span class="line">  repo: &quot;toimc.github.io&quot;, // 储存评论issue的github仓库名，仅需要仓库名字即可。对应 Gitalk配置中的repo</span><br><span class="line">  token: &#x27;xxxxxx&#x27;, // 前面申请的 personal access token</span><br><span class="line">  sitemap: path.join(__dirname, &#x27;./public/sitemap.xml&#x27;), // 自己站点的 sitemap 文件地址</span><br><span class="line">  cache: true, // 是否启用缓存，启用缓存会将已经初始化的数据写入配置的 gitalkCacheFile 文件，下一次直接通过缓存文件判断</span><br><span class="line">  gitalkCacheFile: path.join(__dirname, &#x27;./gitalk-init-cache.json&#x27;), // 用于保存 gitalk 已经初始化的 id 列表</span><br><span class="line">  gitalkErrorFile: path.join(__dirname, &#x27;./gitalk-init-error.json&#x27;), // 用于保存 gitalk 初始化报错的数据</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const api = &#x27;https://api.github.com/repos/&#x27; + config.username + &#x27;/&#x27; + config.repo + &#x27;/issues&#x27;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 读取 sitemap 文件</span><br><span class="line">* 远程 sitemap 文件获取可参考 https://www.npmjs.com/package/sitemapper</span><br><span class="line">*/</span><br><span class="line">const sitemapXmlReader = (file) =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const data = fs.readFileSync(file, &#x27;utf8&#x27;);</span><br><span class="line">    const sitemap = xmlParser(data);</span><br><span class="line">    let ret = [];</span><br><span class="line">    sitemap.root.children.forEach(function (url) &#123;</span><br><span class="line">      const loc = url.children.find(function (item) &#123;</span><br><span class="line">        return item.name === &#x27;loc&#x27;;</span><br><span class="line">      &#125;);</span><br><span class="line">      if (!loc) &#123;</span><br><span class="line">        return false;</span><br><span class="line">      &#125;</span><br><span class="line">      const title = url.children.find(function (item) &#123;</span><br><span class="line">        return item.name === &#x27;title&#x27;;</span><br><span class="line">      &#125;);</span><br><span class="line">      const desc = url.children.find(function (item) &#123;</span><br><span class="line">        return item.name === &#x27;desc&#x27;;</span><br><span class="line">      &#125;);</span><br><span class="line">      const date = url.children.find(function (item) &#123;</span><br><span class="line">        return item.name === &#x27;date&#x27;;</span><br><span class="line">      &#125;);</span><br><span class="line">      ret.push(&#123;</span><br><span class="line">        url: loc.content,</span><br><span class="line">        title: title.content,</span><br><span class="line">        desc: desc.content,</span><br><span class="line">        date: date.content,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    return ret;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    return [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 获取 gitalk 使用的 id</span><br><span class="line">const getGitalkId = (&#123;</span><br><span class="line">  url: u,</span><br><span class="line">  date</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">  const link = url.parse(u);</span><br><span class="line">  // 链接不存在，不需要初始化</span><br><span class="line">  if (!link || !link.pathname) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  if (!date) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  return md5(link.pathname);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 通过以请求判断是否已经初始化</span><br><span class="line">* @param &#123;string&#125; gitalk 初始化的id</span><br><span class="line">* @return &#123;[boolean, boolean]&#125; 第一个值表示是否出错，第二个值 false 表示没初始化， true 表示已经初始化</span><br><span class="line">*/</span><br><span class="line">const getIsInitByRequest = (id) =&gt; &#123;</span><br><span class="line">  const options = &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      &#x27;Authorization&#x27;: &#x27;token &#x27; + config.token,</span><br><span class="line">      &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;,</span><br><span class="line">      &#x27;Accept&#x27;: &#x27;application/json&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    url: api + &#x27;?labels=&#x27; + id + &#x27;,Gitalk&#x27;,</span><br><span class="line">    method: &#x27;GET&#x27;</span><br><span class="line">  &#125;;</span><br><span class="line">  return new Promise((resolve) =&gt; &#123;</span><br><span class="line">    request(options, function (err, response, body) &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">        return resolve([err, false]);</span><br><span class="line">      &#125;</span><br><span class="line">      if (response.statusCode != 200) &#123;</span><br><span class="line">        return resolve([response, false]);</span><br><span class="line">      &#125;</span><br><span class="line">      const res = JSON.parse(body);</span><br><span class="line">      if (res.length &gt; 0) &#123;</span><br><span class="line">        return resolve([false, true]);</span><br><span class="line">      &#125;</span><br><span class="line">      return resolve([false, false]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 通过缓存判断是否已经初始化</span><br><span class="line">* @param &#123;string&#125; gitalk 初始化的id</span><br><span class="line">* @return &#123;boolean&#125; false 表示没初始化， true 表示已经初始化</span><br><span class="line">*/</span><br><span class="line">const getIsInitByCache = (() =&gt; &#123;</span><br><span class="line">  // 判断缓存文件是否存在</span><br><span class="line">  let gitalkCache = false;</span><br><span class="line">  try &#123;</span><br><span class="line">    gitalkCache = require(config.gitalkCacheFile);</span><br><span class="line">  &#125; catch (e) &#123;&#125;</span><br><span class="line">  return function (id) &#123;</span><br><span class="line">    if (!gitalkCache) &#123;</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (gitalkCache.find((&#123;</span><br><span class="line">        id: itemId</span><br><span class="line">      &#125;) =&gt; (itemId === id))) &#123;</span><br><span class="line">      return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">// 根据缓存，判断链接是否已经初始化</span><br><span class="line">// 第一个值表示是否出错，第二个值 false 表示没初始化， true 表示已经初始化</span><br><span class="line">const idIsInit = async (id) =&gt; &#123;</span><br><span class="line">  if (!config.cache) &#123;</span><br><span class="line">    return await getIsInitByRequest(id);</span><br><span class="line">  &#125;</span><br><span class="line">  // 如果通过缓存查询到的数据是未初始化，则再通过请求判断是否已经初始化，防止多次初始化</span><br><span class="line">  if (getIsInitByCache(id) === false) &#123;</span><br><span class="line">    return await getIsInitByRequest(id);</span><br><span class="line">  &#125;</span><br><span class="line">  return [false, true];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 初始化</span><br><span class="line">const gitalkInit = (&#123;</span><br><span class="line">  url,</span><br><span class="line">  id,</span><br><span class="line">  title,</span><br><span class="line">  desc</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">  //创建issue</span><br><span class="line">  const reqBody = &#123;</span><br><span class="line">    &#x27;title&#x27;: title,</span><br><span class="line">    &#x27;labels&#x27;: [id, &#x27;Gitalk&#x27;],</span><br><span class="line">    &#x27;body&#x27;: url + &#x27;\r\n\r\n&#x27; + desc</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  const options = &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      &#x27;Authorization&#x27;: &#x27;token &#x27; + config.token,</span><br><span class="line">      &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;,</span><br><span class="line">      &#x27;Accept&#x27;: &#x27;application/json&#x27;,</span><br><span class="line">      &#x27;Content-Type&#x27;: &#x27;application/json;charset=UTF-8&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    url: api,</span><br><span class="line">    body: JSON.stringify(reqBody),</span><br><span class="line">    method: &#x27;POST&#x27;</span><br><span class="line">  &#125;;</span><br><span class="line">  return new Promise((resolve) =&gt; &#123;</span><br><span class="line">    request(options, function (err, response, body) &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">        return resolve([err, false]);</span><br><span class="line">      &#125;</span><br><span class="line">      if (response.statusCode != 201) &#123;</span><br><span class="line">        return resolve([response, false]);</span><br><span class="line">      &#125;</span><br><span class="line">      return resolve([false, true]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 写入内容</span><br><span class="line">* @param &#123;string&#125; fileName 文件名</span><br><span class="line">* @param &#123;string&#125; content 内容</span><br><span class="line">*/</span><br><span class="line">const write = async (fileName, content, flag = &#x27;w+&#x27;) =&gt; &#123;</span><br><span class="line">  return new Promise((resolve) =&gt; &#123;</span><br><span class="line">    fs.open(fileName, flag, function (err, fd) &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">        resolve([err, false]);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      fs.writeFile(fd, content, function (err) &#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">          resolve([err, false]);</span><br><span class="line">          return;</span><br><span class="line">        &#125;</span><br><span class="line">        fs.close(fd, (err) =&gt; &#123;</span><br><span class="line">          if (err) &#123;</span><br><span class="line">            resolve([err, false]);</span><br><span class="line">            return;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        resolve([false, true]);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const init = async () =&gt; &#123;</span><br><span class="line">  const urls = sitemapXmlReader(config.sitemap);</span><br><span class="line">  // 报错的数据</span><br><span class="line">  const errorData = [];</span><br><span class="line">  // 已经初始化的数据</span><br><span class="line">  const initializedData = [];</span><br><span class="line">  // 成功初始化数据</span><br><span class="line">  const successData = [];</span><br><span class="line">  for (const item of urls) &#123;</span><br><span class="line">    const &#123;</span><br><span class="line">      url,</span><br><span class="line">      date,</span><br><span class="line">      title,</span><br><span class="line">      desc</span><br><span class="line">    &#125; = item;</span><br><span class="line">    const id = getGitalkId(&#123;</span><br><span class="line">      url,</span><br><span class="line">      date</span><br><span class="line">    &#125;);</span><br><span class="line">    if (!id) &#123;</span><br><span class="line">      console.log(`id: 生成失败 [ $&#123;id&#125; ] `);</span><br><span class="line">      errorData.push(&#123;</span><br><span class="line">        ...item,</span><br><span class="line">        info: &#x27;id 生成失败&#x27;,</span><br><span class="line">      &#125;);</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    const [err, res] = await idIsInit(id);</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      console.log(`Error: 查询评论异常 [ $&#123;title&#125; ] , 信息：`, err || &#x27;无&#x27;);</span><br><span class="line">      errorData.push(&#123;</span><br><span class="line">        ...item,</span><br><span class="line">        info: &#x27;查询评论异常&#x27;,</span><br><span class="line">      &#125;);</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    if (res === true) &#123;</span><br><span class="line">      // console.log(`--- Gitalk 已经初始化 --- [ $&#123;title&#125; ] `);</span><br><span class="line">      initializedData.push(&#123;</span><br><span class="line">        id,</span><br><span class="line">        url,</span><br><span class="line">        title,</span><br><span class="line">      &#125;);</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(`Gitalk 初始化开始... [ $&#123;title&#125; ] `);</span><br><span class="line">    const [e, r] = await gitalkInit(&#123;</span><br><span class="line">      id,</span><br><span class="line">      url,</span><br><span class="line">      title,</span><br><span class="line">      desc</span><br><span class="line">    &#125;);</span><br><span class="line">    if (e || !r) &#123;</span><br><span class="line">      console.log(`Error: Gitalk 初始化异常 [ $&#123;title&#125; ] , 信息：`, e || &#x27;无&#x27;);</span><br><span class="line">      errorData.push(&#123;</span><br><span class="line">        ...item,</span><br><span class="line">        info: &#x27;初始化异常&#x27;,</span><br><span class="line">      &#125;);</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    successData.push(&#123;</span><br><span class="line">      id,</span><br><span class="line">      url,</span><br><span class="line">      title,</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(`Gitalk 初始化成功! [ $&#123;title&#125; ] - $&#123;id&#125;`);</span><br><span class="line">    continue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  console.log(&#x27;&#x27;); // 空输出，用于换行</span><br><span class="line">  console.log(&#x27;--------- 运行结果 ---------&#x27;);</span><br><span class="line">  console.log(&#x27;&#x27;); // 空输出，用于换行</span><br><span class="line"></span><br><span class="line">  if (errorData.length !== 0) &#123;</span><br><span class="line">    console.log(`报错数据： $&#123;errorData.length&#125; 条。参考文件 $&#123;config.gitalkErrorFile&#125;。`);</span><br><span class="line">    await write(config.gitalkErrorFile, JSON.stringify(errorData, null, 2));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  console.log(`本次成功： $&#123;successData.length&#125; 条。`);</span><br><span class="line"></span><br><span class="line">  // 写入缓存</span><br><span class="line">  if (config.cache) &#123;</span><br><span class="line">    console.log(`写入缓存： $&#123;(initializedData.length + successData.length)&#125; 条，已初始化 $&#123;initializedData.length&#125; 条，本次成功： $&#123;successData.length&#125; 条。参考文件 $&#123;config.gitalkCacheFile&#125;。`);</span><br><span class="line">    await write(config.gitalkCacheFile, JSON.stringify(initializedData.concat(successData), null, 2));</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(`已初始化： $&#123;initializedData.length&#125; 条。`);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">init();</span><br></pre></td></tr></table></figure>
<p>以上代码需改动的地方： <img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346457.png" /></p>
<p>修改博客根目录下的<code>package.json</code>，新增命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;  </span><br><span class="line">  &quot;talk&quot;: &quot;node talk-auto-init.js&quot;  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>注意观察文件格式，若放在最后一个，前面需要一个逗号，个人配置如下：
<img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346522.png" /></p>
<p>项目的 package.json
是配置和描述如何与程序交互和运行的中心。<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[package.json 详解](https://juejin.cn/post/6844904006746112007)
">[4]</span></a></sup></p>
<h5 id="执行命令">4.6 执行命令</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run talk</span><br></pre></td></tr></table></figure>
<p>若出现以下情况，则成功啦： <img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346583.png" /></p>
<h5 id="命令合并">4.7 命令合并</h5>
<p>修改 <code>package.json</code> 中的 build 命令，将自动初始化添加到
build 之后，这样每次执行 build 命令就会自动执行初始化命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;  </span><br><span class="line">  &quot;build&quot;: &quot;hexo generate &amp;&amp; node talk-auto-init.js&quot;  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h3 id="去除valine评论系统">去除valine评论系统：</h3>
<p>编辑<code>themes\next\ _config.yml</code>文件：将enable选项改为false即可
<img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346687.png" /></p>
<h3 id="某个页面要不要评论">某个页面要不要评论</h3>
<p>可以单独关闭某个页面的评论，在页面的 Front-matter 中添加 comments
字段，设为
false。比如标签页不想要评论，则在标签页面中做如下设置<sup id="fnref:7"><a href="#fn:7" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[【Hexo】nexT主题使用攻略基础——添加评论功能](https://blog.csdn.net/weixin_48927364/article/details/123321038)
">[7]</span></a></sup>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: xxxxxxxxx</span><br><span class="line">date: 2022-03-06 17:05:24</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure>
<h3 id="报错及解决">报错及解决</h3>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346783.png" />修改package.json少了个逗号；</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346884.png" /></p>
<p>原因：<code>talk-auto-init.js</code>有误，之前借鉴的是这篇文章：<a
href="https://blog.jijian.link/2020-01-10/hexo-gitalk-auto-init/">hexo
gitalk
评论自动初始化</a>里的<code>talk-auto-init.js</code>，造成错误，适用于我的是这篇文章的<code>talk-auto-init.js</code>：<a
href="https://www.toimc.com/hexo-usage-3/">hexo主题next中gitalk配置与评论初始化</a>本文贴出的也是这篇<code>talk-auto-init.js</code>；</p>
<p>解决方案：修改 <code>talk-auto-init.js</code> ：</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346983.png" /></p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346081.png" /></p>
<p>修改之后还是有一些成功了，有一些还是报错，直接删除用第一篇的文章的<code>talk-auto-init.js</code>，用第二篇文章的<code>talk-auto-init.js</code>，再改个人配置即可；</p>
<h3 id="参考文章">参考文章</h3>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://xinyufeng.net/2020/06/01/Hexo-Next%E4%B8%BB%E9%A2%98-%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/">Hexo
Next主题 添加文章评论功能</a><a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://eminoda.github.io/2021/06/16/hexo-gitalk-comment-plugins-in-github-issue/?">如何在
hexo 博客中，集成 gitalk 评论插件</a><a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:3">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.jijian.link/2020-01-10/hexo-gitalk-auto-init/">hexo
gitalk 评论自动初始化</a><a href="#fnref:3" rev="footnote"> ↩︎</a></span>
</li>
<li id="fn:4">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://juejin.cn/post/6844904006746112007">package.json
详解</a><a href="#fnref:4" rev="footnote"> ↩︎</a></span>
</li>
<li id="fn:5">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://white-than-wood.zone/2022/08/30/hexo-next/">hexo
next</a><a href="#fnref:5" rev="footnote"> ↩︎</a></span>
</li>
<li id="fn:6">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.toimc.com/hexo-usage-3/">hexo主题next中gitalk配置与评论初始化</a><a href="#fnref:6" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:7">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/weixin_48927364/article/details/123321038">【Hexo】nexT主题使用攻略基础——添加评论功能</a><a href="#fnref:7" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Gitalk</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM---Node 包管理器</title>
    <url>/npm-node-%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>npm（“Node 包管理器”）是 JavaScript 运行时 Node.js
的默认程序包管理器。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[什么是 npm —— 写给初学者的编程教程](https://www.freecodecamp.org/chinese/news/what-is-npm-a-node-package-manager-tutorial-for-beginners/)
">[1]</span></a></sup></p>
<p>npm 由两个主要部分组成：</p>
<ul>
<li><p>用于发布和下载程序包的 CLI（命令行界面）工具</p></li>
<li><p>托管 JavaScript 程序包的 在线存储库<span id="more"></span></p></li>
</ul>
<p>为了更直观地解释，我们可以将存储库 npmjs.com
视为一个物流集散中心，该中心从卖方（npm
包裹的作者）那里接收货物的包裹，并将这些货物分发给买方（npm
包裹的用户）。</p>
<p>为了促进此过程，npmjs.com 物流集散中心雇用了一群勤劳的袋熊（npm
CLI），他们将被分配给每个 npmjs.com 用户作为私人助理。
因此，dependencies（依赖项）会如下传递给 JavaScript 开发人员：</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222349448.png" /></p>
<p>发布 JS 软件包的过程如下：</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222349502.png" /></p>
<h4 id="package.json">package.json</h4>
<p>每个 JavaScript 项目（无论是 Node.js 还是浏览器应用程序）都可以被当作
npm 软件包，并且通过 package.json 来描述项目和软件包信息。</p>
<p>我们可以将 package.json 视为快递盒子上的运输信息。</p>
<p>当运行 <code>npm init</code> 初始化 JavaScript/Node.js 项目时，将生成
<code>package.json</code>文件，文件内的内容(基本元数据)由开发人员提供：</p>
<ul>
<li><code>name</code>：JavaScript 项目或库的名称。</li>
<li><code>version</code>：项目的版本。通常，在应用程序开发中，由于没有必要对开源库进行版本控制，因此经常忽略这一块。但是，仍可以用它来定义版本。</li>
<li><code>description</code>：项目的描述。</li>
<li><code>license</code>：项目的许可证。</li>
</ul>
<h4 id="npm-scripts">npm scripts</h4>
<p><code>package.json</code> 还支持一个 <code>scripts</code>
属性，可以把它当作在项目本地运行的命令行工具。例如，一个 npm 项目的
<code>scripts</code>部分可能看起来像这样：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write **/*.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;format-check&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --check **/*.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint src/**/*.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ncc build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build &amp;&amp; npm run format &amp;&amp; npm run lint &amp;&amp; npm run pack &amp;&amp; npm test&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>eslint</code>，<code>prettier</code>，<code>ncc</code>，<code>jest</code>
不是安装为全局可执行文件，而是安装在项目本地的
<code>node_modules/.bin/</code> 中。</p>
<p>最新引入的 <a
href="https://www.freecodecamp.org/news/npm-vs-npx-whats-the-difference/">npx</a>
使我们可以像在全局安装程序一样运行这些 <code>node_modules</code>
项目作用域命令，方法是在其前面加上
<code>npx ...</code>（即<code>npx prettier --write ** / *。ts</code>）。</p>
<h4 id="package-lock.json">package-lock.json</h4>
<p>该文件描述了 npm JavaScript 项目中使用的依赖项的确切版本。如果
<code>package.json</code> 是通用的描述性标签，则
<code>package-lock.json</code> 是成分表。</p>
<p>就像我们通常不会读取食品包装袋上的成分表（除非你太无聊或需要知道）一样，<code>package-lock.json</code>
并不会被开发人员一行一行进行读取。</p>
<p><code>package-lock.json</code> 通常是由 <code>npm install</code>
命令生成的，也可以由我们的 NPM CLI 工具读取，以确保使用
<code>npm ci</code> 复制项目的构建环境。</p>
<h4 id="dependencies-vs-devdependencies">dependencies vs
devDependencies</h4>
<p>devDependencies 里面的插件只用于开发环境，不用于生产环境，而
dependencies
是需要发布到生产环境的。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[npm -i 与npm install -s与-d的区别](https://www.cnblogs.com/cina33blogs/p/9210931.html)
">[2]</span></a></sup></p>
<p>这两个以键值对象的形式出现，其中 npm 库的名称为键，其<a
href="https://semver.org/">语义格式</a>版本为值。 大家可以看看 <a
href="https://github.com/actions/typescript-action">Github 的 TypeScript
操作模板</a>中的示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@actions/core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.2.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@actions/github&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.1.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@types/jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^25.1.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@types/node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^13.9.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@typescript-eslint/parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.22.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@zeit/ncc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.21.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint-plugin-github&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.4.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint-plugin-jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^23.8.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^25.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jest-circus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^25.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;js-yaml&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.13.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.19.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ts-jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^25.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.8.3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这些依赖通过带有 <code>--save</code> 或 <code>--save-dev</code>
标志的 <code>npm install</code> 命令安装。
它们分别用于生产和开发/测试环境。
在下一节中，我们将更深入地研究这些软件包的安装。</p>
<p>同时，理解语义版本前面的符号非常重要（假设你已经阅读 <a
href="https://semver.org/">semver</a> 的 <code>major.minor.patch</code>
模型）：</p>
<ul>
<li><code>^</code>：表示最新的次版本，例如， <code>^1.0.4</code>
可能会安装主版本系列 <code>1</code> 的最新次版本
<code>1.3.0</code>。</li>
<li><code>〜</code>：表示最新的补丁程序版本，与 <code>^</code> 类似，
<code>〜1.0.4</code> 可能会安装次版本系列 <code>1.0</code>
的最新次版本<code>1.0.7</code>。</li>
</ul>
<p>所有这些确切的软件包版本都将记录在 <code>package-lock.json</code>
文件中。</p>
<h4 id="npm-install">npm install</h4>
<p>这是现在我们开发 JavaScript/Node.js 应用程序时最常用的命令。</p>
<p>默认情况下，<code>npm install &lt;package-name&gt;</code> 将安装带有
<code>^</code> 版本号的软件包的最新版本。npm 项目上下文中的
<code>npm install</code> 将根据 <code>package.json</code>
规范将软件包下载到项目的 <code>node_modules</code>
文件夹中，从而升级软件包的版本（并重新生成
<code>package-lock.json</code> ）。
<code>npm install &lt;package-name&gt;</code> 可以基于 <code>^</code> 和
<code>〜</code> 版本匹配。</p>
<p>如果要在全局上下文中安装程序包，可以在机器的任何地方使用它，则可以指定全局标志
<code>-g</code>（例如 <a
href="https://github.com/tapio/live-server">live-server</a>）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i module_name  -S  = &gt;  npm install module_name --save    写入到 dependencies 对象</span><br><span class="line"></span><br><span class="line">npm i module_name  -D  =&gt; npm install module_name --save-dev   写入到 devDependencies 对象</span><br><span class="line"></span><br><span class="line">npm i module_name  -g  全局安装</span><br></pre></td></tr></table></figure>
<h4 id="参考文章">参考文章</h4>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.freecodecamp.org/chinese/news/what-is-npm-a-node-package-manager-tutorial-for-beginners/">什么是
npm —— 写给初学者的编程教程</a><a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/cina33blogs/p/9210931.html">npm
-i 与npm install -s与-d的区别</a><a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>NPM</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy不用省略号和科学计数法</title>
    <url>/numpy%E4%B8%8D%E7%94%A8%E7%9C%81%E7%95%A5%E5%8F%B7%E5%92%8C%E7%A7%91%E5%AD%A6%E8%AE%A1%E6%95%B0%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.set_printoptions(threshold = np.inf) <span class="comment"># 不使用省略号表示</span></span><br><span class="line">np.set_printoptions(suppress = <span class="literal">True</span>) <span class="comment"># 不使用科学计数显示</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Obsidian/Typora图床：腾讯云COS+Picgo</title>
    <url>/obsidian%E5%9B%BE%E5%BA%8A%EF%BC%9A%E8%85%BE%E8%AE%AF%E4%BA%91cos-picgo/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>需求：</p>
<ul>
<li><p>Obsidian实现图床功能</p></li>
<li><p>图床换成腾讯云</p></li>
<li><p>Obsidian/Typora实现可选择图片是否上传图床</p>
<span id="more"></span></li>
</ul>
<h5 id="注册腾讯云账号创建-cos-存储桶">1、注册腾讯云账号，创建 COS
存储桶</h5>
<p>对象存储（Cloud Object
Storage，COS）是腾讯云提供的⼀种存储海量⽂件的分布式存储服务，⽤户可通过⽹络随时存储和查看数据。通过
COS 可以进⾏任意格式⽂件的上传、下载和管理。 注册：略 创建 COS
存储桶<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="https://cloud.tencent.com/developer/article/2175760?from=15425&amp;areaSource=102001.1&amp;traceId=rScBYp1UZMEgRry4X3S5G">[1]</span></a></sup>：
<img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301181616052.png" />
<img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301181616087.png" /></p>
<ul>
<li>高级可选配置默认即可</li>
<li>配置好之后创建</li>
</ul>
<h5 id="获取腾讯云cos密钥及基本信息">2、获取腾讯云COS密钥及基本信息</h5>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301181616142.png" /></p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301181616198.png" />
在控制台 对象存储 中获取基本信息： <img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301181616267.png" /></p>
<h5 id="picgo配置">3、Picgo配置</h5>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301181616330.png" /></p>
<h5 id="obsidian-typora配置及图片上传">4、Obsidian /
Typora配置及图片上传</h5>
<p>安装插件：Image auto upload
Plugin<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="https://sspai.com/post/72562">[2]</span></a></sup>
默认配置，粘贴图片即可自动上传图片到图床。</p>
<p>个人需求配置：取消粘贴即自动上传，图片有需要上传到图床时，通过命令行模式一键上传文章内的图片。</p>
<p>命令行模式： 以文章为单位，在 Obsidian 中，按下命令行快捷键 Ctrl /
Command + P，并选择 "upload all
images"<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="https://sspai.com/post/75765
">[3]</span></a></sup>。</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301181616415.png" /></p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301181616484.png" /></p>
<p>Typora配置情况：</p>
<p>同样设置粘贴不自动上传图片，需上传时右键再点击上传图片即可；</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301182208994.png" /></p>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">https://cloud.tencent.com/developer/article/2175760?from=15425&amp;areaSource=102001.1&amp;traceId=rScBYp1UZMEgRry4X3S5G<a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">https://sspai.com/post/72562<a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:3">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">https://sspai.com/post/75765<a href="#fnref:3" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Obsidian</tag>
        <tag>Picgo</tag>
        <tag>腾讯云COS</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>pip下载太慢</title>
    <url>/pip%E4%B8%8B%E8%BD%BD%E5%A4%AA%E6%85%A2/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h4 id="临时换源">临时换源：</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install django -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
<p>清华：<code>https://pypi.tuna.tsinghua.edu.cn/simple</code>
中科大：<code>https://mirrors.bfsu.edu.cn/pypi/web/simple/</code>
阿里云：<code>https://mirrors.aliyun.com/pypi/simple/</code>
豆瓣：<code>http://pypi.doubanio.com/simple/</code></p>
<span id="more"></span>
<h4
id="永久换源1">永久换源<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[pip换源 -pip更换国内镜像源](https://blog.csdn.net/xuezhangjun0121/article/details/81664260)
">[1]</span></a></sup>：</h4>
<p>linux： 修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下：
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p>
<p>windows:
直接在user目录中创建一个pip目录，如：<code>C:\Users\xx\pip</code>，新建文件pip.ini，内容如下
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p>
<h4 id="参考文章">参考文章</h4>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/xuezhangjun0121/article/details/81664260">pip换源
-pip更换国内镜像源</a><a href="#fnref:1" rev="footnote"> ↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Obsidian插件之Dataview</title>
    <url>/obsidian%E6%8F%92%E4%BB%B6%E4%B9%8Bdataview/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>1、下载并启用插件
2、写相应代码块<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[Obsidian 插件之 Dataview](https://sspai.com/post/68183)
">[1]</span></a></sup></p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302211102135.png" /></p>
<ul>
<li>list：展现形式。创建列表，还有 table、task 可以选择</li>
<li>from：检索范围。从哪个文件夹（写在双引号里面），或者标签（写在#后面）</li>
<li>where：</li>
<li></li>
<li>聚合条件。contains(file.name,"Dataview") 就是匹配文件名为 “Dataview”
的文件</li>
<li>sort：排序，根据什么做排序。 sort file.ctime
就是根据文件的创建时间正序</li>
</ul>
<span id="more"></span>
<p>一些自带的元数据：</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302211102234.png" /></p>
<p>yml标记语言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">author:</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>title、author、tags这里都是yml语言的key，key可以自定义，也可支持中英文，dataview也是可以识别使用的；</p>
<p>例子：</p>
<p>前后加三个 ` ，前面的三个 ` 记得加上dataview，中间加入一下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">table Title, Status</span><br><span class="line">from #test</span><br><span class="line">where</span><br><span class="line">contains(file.name,&quot;aa&quot;)</span><br><span class="line">sort file.ctime</span><br></pre></td></tr></table></figure>
<p>创建一个tab，文章从test标签中查找，且文件名含有aa的文章，表格表头为file,
Title, Status。</p>
<h3 id="参考文章">参考文章</h3>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://sspai.com/post/68183">Obsidian
插件之 Dataview</a><a href="#fnref:1" rev="footnote"> ↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Obsidian插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Python (matplotlib)保存矢量图</title>
    <url>/python-matplotlib-%E4%BF%9D%E5%AD%98%E7%9F%A2%E9%87%8F%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="保存矢量图">保存矢量图</h3>
<p>语法<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[Python中Matplotlib Savefig()不同参数的使用](https://blog.csdn.net/wilbeok/article/details/111194473)
">[1]</span></a></sup>：</p>
<p><code>savefig(fname, dpi=None, facecolor=’w’, edgecolor=’w’, orientation=’portrait’, papertype=None, format=None, transparent=False, bbox_inches=None, pad_inches=0.1, frameon=None, metadata=None)</code></p>
<p>简单使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.savefig(<span class="string">&#x27;C:\\Users\\Lenovo\\Pictures\\test03.svg&#x27;</span>, <span class="built_in">format</span>=<span class="string">&#x27;svg&#x27;</span>,dpi = <span class="number">600</span>,transparent=<span class="literal">False</span>,bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<ul>
<li>fname即
<code>test03.svg</code>，<code>format='svg'</code>，<code>dpi = 600</code>
为导出矢量图的三个参数</li>
<li><code>transparent=False</code> ：照片背景不要透明</li>
<li><code>bbox_inches='tight'</code>
：使未保存到图中的图例（或其他部分）包含进来，避免图片保存下来不全。bbox_inches的作用是调整图的bbox,
即bounding
box(边界框)<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[Python_matplotlib图例放在外侧保存时显示不完整问题解决](https://blog.csdn.net/Poul_henry/article/details/88311964)
">[2]</span></a></sup></li>
</ul>
<span id="more"></span>
<h3 id="参考文章">参考文章</h3>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/wilbeok/article/details/111194473">Python中Matplotlib
Savefig()不同参数的使用</a><a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/Poul_henry/article/details/88311964">Python_matplotlib图例放在外侧保存时显示不完整问题解决</a><a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>Python(matplotlib) 改变画布背景</title>
    <url>/python-matplotlib-%E6%94%B9%E5%8F%98%E7%94%BB%E5%B8%83%E8%83%8C%E6%99%AF/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>起因：为了设置画布不透明效果</p>
<p>对象形式：<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[How to set opacity of background colour of graph with Matplotlib](https://stackoverflow.com/questions/4581504/how-to-set-opacity-of-background-colour-of-graph-with-matplotlib)
">[1]</span></a></sup></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig = plt.figure()</span><br><span class="line">fig.patch.set_facecolor(<span class="string">&#x27;white&#x27;</span>)  <span class="comment"># 设置画布白色不透明（坐标轴外），再画图</span></span><br><span class="line">fig.patch.set_alpha(<span class="number">1</span>)</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)  <span class="comment"># 创建1*1的网格，并添加第一个网格</span></span><br><span class="line">ax.patch.set_facecolor(<span class="string">&#x27;white&#x27;</span>) <span class="comment"># 设置白色不透明（坐标轴内）</span></span><br><span class="line">ax.patch.set_alpha(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ax.plot(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># If we don&#x27;t specify the edgecolor and facecolor for the figure when</span></span><br><span class="line"><span class="comment"># saving with savefig, it will override the value we set earlier!</span></span><br><span class="line">fig.savefig(<span class="string">&#x27;test01.png&#x27;</span>, facecolor=fig.get_facecolor(), edgecolor=<span class="string">&#x27;none&#x27;</span>)  <span class="comment"># 一定要加这俩个参数，否则保存后会被改掉参数</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302110342899.png" /></p>
<span id="more"></span>
<p>形式<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[python绘图背景透明_如何在 Matplotlib 中更改绘图背景](https://blog.csdn.net/weixin_39568889/article/details/113313559?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22113313559%22%2C%22source%22%3A%22unlogin%22%7D)
">[2]</span></a></sup></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams.update(&#123;</span><br><span class="line">    <span class="string">&quot;figure.facecolor&quot;</span>:  (<span class="string">&#x27;#FFFFFF&#x27;</span>),  <span class="comment"># 白色 坐标轴外</span></span><br><span class="line">    <span class="string">&quot;axes.facecolor&quot;</span>:    (<span class="string">&#x27;#FFFFFF&#x27;</span>),  <span class="comment"># 白色 坐标轴内</span></span><br><span class="line">    <span class="string">&quot;savefig.facecolor&quot;</span>: (<span class="string">&#x27;#FFFFFF&#x27;</span>),  <span class="comment"># 白色 保存图片时</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">plt.savefig(<span class="string">&#x27;test02.svg&#x27;</span>, facecolor=fig.get_facecolor(), edgecolor=<span class="string">&#x27;none&#x27;</span>,<span class="built_in">format</span>=<span class="string">&#x27;svg&#x27;</span>,dpi = <span class="number">600</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<ul>
<li><code>bbox_inches='tight'</code> :
解决导出图片时，坐标轴外内容过多没保存下来<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[Python_matplotlib图例放在外侧保存时显示不完整问题解决](https://blog.csdn.net/Poul_henry/article/details/88311964)
">[3]</span></a></sup></li>
<li>fname即
<code>test02.svg</code>，<code>format='svg'</code>，<code>dpi = 600</code>
为导出矢量图的三个参数</li>
</ul>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302110342978.svg" /></p>
<h3 id="参考文章">参考文章</h3>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://stackoverflow.com/questions/4581504/how-to-set-opacity-of-background-colour-of-graph-with-matplotlib">How
to set opacity of background colour of graph with
Matplotlib</a><a href="#fnref:1" rev="footnote"> ↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/weixin_39568889/article/details/113313559?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22113313559%22%2C%22source%22%3A%22unlogin%22%7D">python绘图背景透明_如何在
Matplotlib 中更改绘图背景</a><a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:3">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/Poul_henry/article/details/88311964">Python_matplotlib图例放在外侧保存时显示不完整问题解决</a><a href="#fnref:3" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>plt</tag>
      </tags>
  </entry>
  <entry>
    <title>Python机器学习基础教程【第一章】</title>
    <url>/python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E3%80%90%E7%AC%AC%E4%B8%80%E7%AB%A0%E3%80%91/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本书的附加代码可以在 GitHub 下载：<a
href="https://github.com/amueller/introduction_to_ml_with_python">introduction
to ml with python</a></p>
<p>监督学习算法（supervised learning algorithm）
无监督学习算法（unsupervised learning algorithm）</p>
<p>在机器学习中，这里的每个实体或每一行被称为一个样本（sample）或数据点，而每一列（用来描述这些实体的属性）则被称为特征（feature）。</p>
<p>如何构建良好的数据表征，这被称为特征提取（feature
extraction）或特征工程（feature engineering）</p>
<p><strong>scikit-learn</strong> 依赖于另外两个 Python 包：NumPy
（Python 科学计算的基础包之一）和 SciPy（ Python
中用于科学计算的函数集合）。 算法详细文档：<a
href="https://scikit-learn.org/stable/index.html"
class="uri">https://scikit-learn.org/stable/index.html</a> 用户指南：<a
href="http://scikit-learn.org/stable/user_guide.html"
class="uri">http://scikit-learn.org/stable/user_guide.html</a></p>
<span id="more"></span>
<p>若想绘图和进行交互式开发，还应该安装 matplotlib（Python
主要的科学绘图库）、IPython 和 Jupyter
Notebook（在浏览器中运行代码的交互环境）。</p>
<p><strong>pandas</strong> 是用于处理和分析数据的 Python
库。它基于一种叫作 DataFrame 的数据结构，这种数据结构模仿了 R 语言中的
DataFrame。</p>
<p><strong>mglearn</strong>
库是我们为本书编写的实用函数库，以免将代码清单与绘图和数据加载的细节混在一起。</p>
<h4 id="第一个应用">第一个应用</h4>
<h5 id="了解数据">1、了解数据</h5>
<p>in：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line">iris_dataset = load_iris()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Keys of iris_dataset: \n&#123;&#125;&quot;</span>.<span class="built_in">format</span>(iris_dataset.keys()))</span><br></pre></td></tr></table></figure>
<p>out：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Keys of iris_dataset: dict_keys([<span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;target&#x27;</span>, <span class="string">&#x27;frame&#x27;</span>, <span class="string">&#x27;target_names&#x27;</span>, <span class="string">&#x27;DESCR&#x27;</span>, <span class="string">&#x27;feature_names&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>, <span class="string">&#x27;data_module&#x27;</span>])</span><br></pre></td></tr></table></figure>
<ul>
<li>DESCR 键对应的值是数据集的简要说明</li>
<li>target_names
键对应的值是一个字符串数组，里面包含我们要预测的花的品种</li>
<li>feature_names
键对应的值是一个字符串列表，对每一个特征进行了说明</li>
<li>data 里面是花萼长度、花萼宽度、花瓣长度、花瓣宽度的测量数据，格式为
NumPy 数组,data
数组的每一行对应一朵花，列代表每朵花的四个测量数据，数组中包含 150
朵不同的花的测量数据。</li>
<li>target 是一维数组，每朵花对应其中一个数据，0 代表 setosa，1 代表
versicolor，2 代表 virginica</li>
</ul>
<h5 id="划分训练集和测试集">2、划分训练集和测试集</h5>
<p>机器学习中的个体叫作样本（sample），其属性叫作特征（feature）。data
数组的形状（shape）是样本数乘以特征数。</p>
<p>一部分数据用于构建机器学习模型，叫作训练数据（training data）或训练
集（training set）。其余的数据用来评估模型性能，叫作测试数据（test
data）、测试集（test set）或留出集（hold-out set）。</p>
<p><strong>train_test_split</strong> 函数可以打乱数据集并进行拆分。</p>
<p>scikit-learn 中的数据通常用大写的 X 表示，而标签用小写的 y 表示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 划分训练集和测试集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(iris_dataset[<span class="string">&#x27;data&#x27;</span>], iris_dataset[<span class="string">&#x27;target&#x27;</span>], random_state=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302021528408.png" /></p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302021528467.png" /></p>
<ul>
<li>random_state
参数指定了随机数生成器的种子，保证这行代码的输出始终相同；</li>
</ul>
<h5 id="观察数据">3、观察数据</h5>
<p>如果不用机器学习能不能轻松完成任务，或者需要的信息有没有包含在数据中？检查数据也是发现异常值和特殊值的好方法。</p>
<p>检查数据的最佳方法之一就是将其可视化。</p>
<p>一种可视化方法是绘制<strong>散点图（scatter
plot）</strong>，用这种方法难以对多于 3 个特征的数据集作图。</p>
<p>解决这个问题的一种方法是绘制<strong>散点图矩阵（pair
plot）</strong>，从而可以两两查看所有的特征。散点图矩阵无法同时显示所有特征之间的关系，所以这种可视化方法可能无法展示数据的某些有趣内容。</p>
<p>训练集中特征的散点图矩阵：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用X_train中的数据创建DataFrame</span></span><br><span class="line"><span class="comment"># 利用iris_dataset.feature_names中的字符串对数据列进行标记</span></span><br><span class="line">iris_dataframe = pd.DataFrame(X_train, columns=iris_dataset.feature_names)</span><br><span class="line"><span class="comment"># 利用DataFrame创建散点图矩阵，按y_train着色</span></span><br><span class="line">grr = pd.scatter_matrix(iris_dataframe, c=y_train, figsize=(<span class="number">15</span>, <span class="number">15</span>), marker=<span class="string">&#x27;o&#x27;</span>,</span><br><span class="line"> hist_kwds=&#123;<span class="string">&#x27;bins&#x27;</span>: <span class="number">20</span>&#125;, s=<span class="number">60</span>, alpha=<span class="number">.8</span>)</span><br></pre></td></tr></table></figure>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302021528536.png" /></p>
<p>绘制散点图矩阵函数： pandas的scatter_matrix。
版本较新换成：pd.plotting.scatter_matrix</p>
<p><code>pandas.DataFrame( data, index, columns, dtype, copy)</code></p>
<ul>
<li>data：一组数据(ndarray、series, map, lists, dict
等类型)<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[Pandas 数据结构 - DataFrame](https://www.runoob.com/pandas/pandas-dataframe.html)
">[1]</span></a></sup>。</li>
<li>index：索引值，或者可以称为行标签。</li>
<li>columns：列标签，默认为 RangeIndex (0, 1, 2, …, n) 。</li>
<li>dtype：数据类型。</li>
<li>copy：拷贝数据，默认为 False。</li>
</ul>
<p><code>scatter_matrix(frame, alpha=0.5, c,figsize=None, ax=None, diagonal='hist', marker='.', density_kwds=None,hist_kwds=None, range_padding=0.05, **kwds)</code></p>
<ul>
<li>frame，pandas
dataframe对象<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[pandas库scatter_matrix绘图可视化参数详解](https://blog.csdn.net/wangxingfan316/article/details/80033557)
">[3]</span></a></sup></li>
<li>alpha， 图像透明度，一般取(0,1]</li>
<li>figsize，以英寸为单位的图像大小，一般以元组 (width, height)
形式设置</li>
<li>ax，可选一般为none</li>
<li>diagonal，必须且只能在{‘hist’,
‘kde’}中选择1个，’hist’表示直方图(Histogram
plot),’kde’表示核密度估计(Kernel Density
Estimation)；该参数是scatter_matrix函数的关键参数</li>
<li>marker。Matplotlib可用的标记类型，如’.’，’,’，’o’等<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[绘图的线型、颜色、标记](https://www.sdhlw.top/%E7%BB%98%E5%9B%BE%E7%9A%84%E7%BA%BF%E5%9E%8B%E3%80%81%E9%A2%9C%E8%89%B2%E3%80%81%E6%A0%87%E8%AE%B0/)
">[2]</span></a></sup></li>
<li>density_kwds。(other plotting keyword
arguments，可选)，与kde相关的字典参数</li>
<li>hist_kwds。与hist相关的字典参数</li>
<li>range_padding。(float,
可选)，图像在x轴、y轴原点附近的留白(padding)，该值越大，留白距离越大，图像远离坐标原点</li>
<li>kwds。与scatter_matrix函数本身相关的字典参数</li>
<li>c。颜色</li>
</ul>
<h5 id="构建模型k近邻算法">4、构建模型：k近邻算法</h5>
<p>k
近邻分类器算法对一个新的数据点做出预测，算法会在训练集中寻找与这个新数据点距离最近的数据点，然后将找到的数据点的标签赋值给这个新数据点。</p>
<p>k 近邻算法中 k 的含义是，我们可以考虑训练集中与新数据点最近的任意 k
个邻居（比如说，距离最近的 3 个或 5
个邻居），而不是只考虑最近的那一个。然后，我们可以用这些邻居中数量最多的类别做出预测。</p>
<p>scikit-learn 中所有的机器学习模型都在各自的类中实现，这些类被称为
Estimator类。k 近邻分类算法是在 neighbors 模块的KNeighborsClassifier
类中实现的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line">knn = KNeighborsClassifier(n_neighbors=<span class="number">1</span>)  <span class="comment"># 实例化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于训练集来构建模型</span></span><br><span class="line">knn.fit(X_train, y_train)</span><br></pre></td></tr></table></figure>
<p>fit 方法返回的是 knn
对象本身并做原处修改，因此我们得到了分类器的字符串表示。</p>
<h5 id="预测">5、预测</h5>
<p>in：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_new = np.array([[<span class="number">5</span>, <span class="number">2.9</span>, <span class="number">1</span>, <span class="number">0.2</span>]])</span><br><span class="line">prediction = knn.predict(X_new)   </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Prediction: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(prediction))</span><br></pre></td></tr></table></figure>
<p>out：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Prediction: [0]</span><br></pre></td></tr></table></figure>
<p>们模型的预测，这朵新的鸢尾花属于类别 0，也就是说它属于 setosa
品种。</p>
<h5 id="评估模型">6、评估模型</h5>
<p>计算精度（accuracy）来衡量模型的优劣，精度就是品种预
测正确的花所占的比例。</p>
<p>in：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(np.mean(y_pred == y_test)))</span><br></pre></td></tr></table></figure>
<p>out：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Test set score: 0.97</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(knn.score(X_test, y_test))) </span><br><span class="line"><span class="comment"># knn 对象的 score 方法来计算测试集的精度,结果是一致的</span></span><br></pre></td></tr></table></figure>
<p>对于测试集中的鸢尾花，我们的预测有 97%
是正确的。根据一些数学假设，对于新的鸢尾花，可以认为我们的模型预测结果有
97% 都是正确的。</p>
<h5 id="总结">7、总结</h5>
<p>首先有150行样本，4列特征的鸢尾花（Iris）数据集。</p>
<p>鸢尾花（Iris）一共有三个品种：setosa、versicolor 或
virginica，因此这是一个三分类问题。在分类问题中，可能的品种被称为类别（class），每朵花的品种被称为它的标签（label）。</p>
<ul>
<li>划分训练集和测试集（train_test_split 函数）</li>
<li>构建模型：k近邻算法（knn.fit 函数）</li>
<li>预测测试集（knn.predict 函数）</li>
<li>计算精度（knn.score 函数）</li>
</ul>
<h4 id="问题解决">问题解决</h4>
<h5 id="name-null-is-not-defined">name 'null' is not defined</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;d:\MyData\**\book-Python����ѧϰ�����̳�.ipynb&quot;, line 23, in &lt;module&gt;</span><br><span class="line">    &quot;execution_count&quot;: null,</span><br><span class="line">NameError: name &#x27;null&#x27; is not defined</span><br><span class="line"></span><br><span class="line">[Done] exited with code=1 in 0.198 seconds</span><br></pre></td></tr></table></figure>
<p>重装Vscode中的jupyter插件</p>
<h5 id="mglearn如何导入本地">mglearn如何导入本地</h5>
<p>1、下载包：<a
href="https://github.com/amueller/introduction_to_ml_with_python"
class="uri">https://github.com/amueller/introduction_to_ml_with_python</a></p>
<p>2、查看包的存放位置 cell中输入：<code>%pip show pandas</code>
,运行，查看包的位置（<code>c:\users\用户名\appdata\local\programs\python\python310\lib\site-packages</code>）</p>
<p>3、把mglearn文件夹放到包的存放位置（<code>c:\users\用户名\appdata\local\programs\python\python310\lib\site-packages</code>）</p>
<p>mylearn一些函数过时了，无法导入 ： <img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302021528610.png" /></p>
<p>mylearn主要是用于美化的，所以在此先忽略掉</p>
<h4 id="参考文章">参考文章</h4>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.runoob.com/pandas/pandas-dataframe.html">Pandas
数据结构 - DataFrame</a><a href="#fnref:1" rev="footnote"> ↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.sdhlw.top/%E7%BB%98%E5%9B%BE%E7%9A%84%E7%BA%BF%E5%9E%8B%E3%80%81%E9%A2%9C%E8%89%B2%E3%80%81%E6%A0%87%E8%AE%B0/">绘图的线型、颜色、标记</a><a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:3">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/wangxingfan316/article/details/80033557">pandas库scatter_matrix绘图可视化参数详解</a><a href="#fnref:3" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>专业书笔记</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Vscode的Jupyter的change presentation</title>
    <url>/vscode%E7%9A%84jupyter%E7%9A%84change-presentation/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>需求：每次使用绘图，都是需要手动切换Change presentations
来看到绘图结果，想要把image设置为默认显示，而不是txt。</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302041247820.png" /></p>
<span id="more"></span>
<p>解决方法<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[Change mimetype for VSC Jupyter Notebook ouput](https://stackoverflow.com/questions/68555264/change-mimetype-for-vsc-jupyter-notebook-ouput)
">[1]</span></a></sup>：</p>
<p>1、打开 <code>settings.json</code> 文件</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302041247208.png" /></p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302041247352.png" /></p>
<p>2、搜索notebook，找到notebook设置部分，加入这句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;notebook.displayOrder&quot;: [&quot;image/png&quot;, &quot;text/plain&quot;]</span><br></pre></td></tr></table></figure>
<p>如果已经存在该句，把 <code>"image/png"</code>
放在前面；放进去注意格式，放在中间记得末尾加逗号，放在最后，前面一句记得加逗号；</p>
<p>我的设置：</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302041247432.png" /></p>
<h3 id="参考文章">参考文章</h3>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://stackoverflow.com/questions/68555264/change-mimetype-for-vsc-jupyter-notebook-ouput">Change
mimetype for VSC Jupyter Notebook
ouput</a><a href="#fnref:1" rev="footnote"> ↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Vscode</tag>
        <tag>Jupyter Notebook</tag>
      </tags>
  </entry>
  <entry>
    <title>Vscode &amp; Jupyter-Notebook：Output exceeds the size limit</title>
    <url>/vscode-jupyter-notebook%EF%BC%9Aoutput-exceeds-the-size-limit/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Output exceeds the size limit. Open the full output data in a text
editor</p>
<p>每次报错信息过多就要用文本编辑器打开，可是打开之后都是没编译的，乱码看起来很难受。</p>
<span id="more"></span>
<p>参考了这篇<a
href="https://stackoverflow.com/questions/72823258/vscode-interactive-python-output-exceeds-size-limit">回答</a>，找到以下解决方案，我修改为1000：</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302060049102.png" /></p>
<p>修改之后，重启Vscode即可。</p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Vscode</tag>
        <tag>Jupyter Notebook</tag>
      </tags>
  </entry>
  <entry>
    <title>word支持的插入图片格式</title>
    <url>/word%E6%94%AF%E6%8C%81%E7%9A%84%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><span id="more"></span>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401132000313.png" alt="image-20240113143016946" style="zoom:67%;" /></p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>word</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows设置开机自启软件（计划任务）</title>
    <url>/windows%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E8%BD%AF%E4%BB%B6%EF%BC%88%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>1 右键此电脑，管理</p>
<p>2
打开任务计划程序库，操作--创建基本任务，填写任务名称、时间、添加exe文件等</p>
<span id="more"></span>
<p>3 设置延时时间（一定要设置，避免太晚启动）</p>
<ul>
<li>打开任务计划程序库，双击你创建的任务</li>
</ul>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401131550280.png" alt="image-20240113122608544" style="zoom: 50%;" /></p>
<ul>
<li>点击触发器，再双击，设置延时任务时间即可</li>
</ul>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401131550679.png" alt="image-20240113122146371" style="zoom: 50%;" /></p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>windows小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Zotero插件之Jasminum（茉莉花）</title>
    <url>/zotero%E6%8F%92%E4%BB%B6%E4%B9%8Bjasminum%EF%BC%88%E8%8C%89%E8%8E%89%E8%8A%B1%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>需求：根据中文pdf，自动抓取条目信息</p>
<p>实现：</p>
<p><a
href="https://github.com/l0o0/jasminum">官网</a>下载xpi，打开附加组件，文件拖拽到组件页面安装即可</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302251511232.png" /></p>
<p>右键pdf即可抓取中文文献条目信息：</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302251511409.png" /></p>
<span id="more"></span>
<p>也可添加pdf时自动抓取条目信息：</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302251511533.png" /></p>
<p>插件目前支持的功能：</p>
<ul>
<li>拆分或合并 Zotero 中条目作者姓和名</li>
<li>根据知网上下载的文献文件来抓取引用信息（就是根据文件名）</li>
<li>添加中文PDF/CAJ时，自动拉取知网数据，该功能默认关闭。需要到设置中开启，注意添加的文件名需要含有中文，全英文没有效果（还是根据文件名）</li>
<li>为知网的学位论文 PDF 添加书签</li>
<li>更新中文 translators</li>
<li>拉取文献引用次数，是否核心期刊</li>
</ul>
]]></content>
      <categories>
        <category>Tool Software</category>
      </categories>
      <tags>
        <tag>Zotero</tag>
      </tags>
  </entry>
  <entry>
    <title>Zotero搭配Sci-Hub</title>
    <url>/zotero%E6%90%AD%E9%85%8Dsci-hub/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="实现功能">实现功能</h3>
<p>Zotero右键条目实现自动下载pdf</p>
<h3 id="设置sci-hub作为pdf解析器">设置Sci-Hub作为PDF解析器</h3>
<p>打开Zotero的首选项，进入<code>Advanced--&gt;Config Editor</code></p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302250911205.png" /></p>
<p>搜索<code>extensions.zotero.findPDFs.resolvers</code></p>
<p>双击<code>extensions.zotero.findPDFs.resolvers</code>，默认情况下是只有一对
<code>[]</code>。</p>
<p>删除<code>[]</code>，并将以下代码粘贴进去。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[更新版｜Zotero搭配Sci-Hub，真香！](https://mp.weixin.qq.com/s/QMSG24tgn4z8ShfE9pVYMg)
">[1]</span></a></sup></p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line"><span class="string">&quot;name&quot;</span>:<span class="string">&quot;Sci-Hub&quot;</span>,  </span><br><span class="line"><span class="string">&quot;method&quot;</span>:<span class="string">&quot;GET&quot;</span>,  </span><br><span class="line"><span class="string">&quot;url&quot;</span>:<span class="string">&quot;https://sci-hub.se/&#123;doi&#125;&quot;</span>,  </span><br><span class="line"><span class="string">&quot;mode&quot;</span>:<span class="string">&quot;html&quot;</span>,  </span><br><span class="line"><span class="string">&quot;selector&quot;</span>:<span class="string">&quot;#pdf&quot;</span>,  </span><br><span class="line"><span class="string">&quot;attribute&quot;</span>:<span class="string">&quot;src&quot;</span>,  </span><br><span class="line"><span class="string">&quot;automatic&quot;</span>:true  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到此就成功将Sci-Hub配置为PDF解析器了，也就是说替代了默认的Unpaywall。</p>
<p>现在即可右键条目下载pdf了（前提是条目包含doi）</p>
<p>查找文件doi：https://github.com/bwiernik/zotero-shortdoi/releases</p>
<h3 id="参考文章">参考文章</h3>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://mp.weixin.qq.com/s/QMSG24tgn4z8ShfE9pVYMg">更新版｜Zotero搭配Sci-Hub，真香！</a><a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Tool Software</category>
      </categories>
      <tags>
        <tag>Zotero</tag>
      </tags>
  </entry>
  <entry>
    <title>优化Python运行速度</title>
    <url>/%E4%BC%98%E5%8C%96Python%E8%BF%90%E8%A1%8C%E9%80%9F%E5%BA%A6/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>[TOC]</p>
<h1 id="一一般流程">一、一般<a
href="https://blog.51cto.com/u_15353042/3746066">流程</a></h1>
<p>第一, 寻找慢的问题点 第二, 针对比较慢的算法,
要具体的深入的进行分析它慢的原因. 也可以采用计时的方法剖析, 庖丁解牛.
第三步, 优化算法 第四步, 优化编译器和语言问题. 第五步, 上硬件.</p>
<p>考虑哪个函数耗时比较长：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line">t1= time.time()</span><br><span class="line">  函数1()</span><br><span class="line">t2= time.time()</span><br><span class="line"></span><br><span class="line">print(&quot;耗时&quot;,t2-t1)  #多段打印, 多试几次, </span><br></pre></td></tr></table></figure>
<hr />
<p><strong>进程</strong>：一个在内存中运行的应用程序。每个进程都有自己独立的一块内存空间，一个进程可以有多个线程。
<strong>线程</strong>：进程中的一个执行任务，负责当前进程中程序的<a
href="https://blog.csdn.net/ThinkWon/article/details/102021274">执行</a>。</p>
<p>1、全局解释器锁原因：如果你的程序只有单线程、单进程，代码的速度和性能不会受到全局解释器锁的影响。</p>
<p>单进程中使用多线程实现并发，并且是 IO 密集型（例如网络 IO 或磁盘
IO）的线程，GIL
竞争的效果就很明显了。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[为什么 Python 这么慢？ - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/47795989)
">[1]</span></a></sup></p>
<ul>
<li>PyPy 也是一种带有 GIL 的解释器</li>
<li>PyPy 也是一种带有 GIL 的解释器</li>
</ul>
<h1 id="二for循环多进程多线程">二、For循环多进程&amp;多线程</h1>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208122144160.png"
alt="image-20220812213731617" />
<figcaption aria-hidden="true">image-20220812213731617</figcaption>
</figure>
<center>
任务管理器--性能
</center>
<h2 id="gil锁">1、GIL锁</h2>
<p>python始于1991年，创立初期对运算的要求不高，为了解决多线程共享内存的数据安全问题，引入了GIL锁，全称为Global
Interpreter Lock，也就是全局解释器锁。</p>
<p><strong>GIL规定，在一个进程中每次只能有一个线程在运行。</strong>这个GIL锁相当于是线程运行的资格证，某个线程想要运行，首先要获得GIL锁，然后遇到IO或者超时的时候释放GIL锁，给其余的线程去竞争，竞争成功的线程获得GIL锁得到下一次运行的机会。</p>
<p>正是因为有GIL的存在，python的多线程其实是假的，所以才有人说python的多线程非常鸡肋。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="https://blog.csdn.net/Victor2code/article/details/109005171
">[2]</span></a></sup></p>
<h2 id="多进程">2、多进程</h2>
<p><a
href="https://blog.csdn.net/weixin_35757704/article/details/118799165">来源1</a>、</p>
<p>进程的创建和停止都是消耗资源的所以进程绝不是越多越好。因为单个CPU核某时刻只能执行单个进程，所以最好的情况是将进程数量与CPU核数相等，这样可以最大化利用CPU。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 普通情况</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tes</span>(<span class="params">a</span>):               <span class="comment"># for循环里的东西先写成函数</span></span><br><span class="line">    a = <span class="number">2</span> ** a</span><br><span class="line">    time.sleep(<span class="number">0.2</span>)       <span class="comment"># time.sleep()推迟调用线程的运行，可通过参数secs指秒数</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        tes(i)</span><br><span class="line">    t2=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;普通耗时：&quot;</span>,t2-t1)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 普通耗时： 4.1959967613220215</span></span><br></pre></td></tr></table></figure>
<h3 id="进程池">进程池</h3>
<p>维持一个水位即进程数是恒定的，不够就补，并且保持在一个上限，不许超出上限。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tes</span>(<span class="params">a</span>):               <span class="comment"># for循环里的东西先写成函数</span></span><br><span class="line">    a = <span class="number">2</span> ** a</span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t3=time.time()</span><br><span class="line">    pool = multiprocessing.Pool(<span class="number">2</span>)  <span class="comment"># 两个进程执行</span></span><br><span class="line">    <span class="comment"># pool = multiprocessing.Pool(multiprocessing.cpu_count()) # 全部cpu执行</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        pool.apply_async(func=tes,args=(i,))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    t4=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;多进程耗时：&quot;</span>,t4-t3)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 多进程耗时： 2.679999589920044    两进程</span></span><br><span class="line"><span class="comment"># 多进程耗时： 1.9049992561340332   全部CPU</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多进程模板(进程池)</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tes</span>():    <span class="comment"># 把for循环下的内容写成一个函数</span></span><br><span class="line">    代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = multiprocessing.Pool(<span class="number">2</span>)  <span class="comment"># 两个进程执行</span></span><br><span class="line">    <span class="comment"># pool = multiprocessing.Pool(multiprocessing.cpu_count()) # 全部cpu执行</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        pool.apply_async(func=tes,args=(i,))  <span class="comment"># 填写定义的函数、参数</span></span><br><span class="line">    pool.close()     <span class="comment"># close()方法，进程池不再接受新的任务（注意不是进程）</span></span><br><span class="line">    pool.join()    <span class="comment"># join()方法，阻塞主进程，一定要在close()或者terminate()之后。</span></span><br></pre></td></tr></table></figure>
<h2 id="多线程">3、多线程</h2>
<p><a href="https://zhuanlan.zhihu.com/p/34004179">来源1</a>；<a
href="https://zyzypeter.github.io/2017/11/23/Python-thread-and-processing/">来源2</a></p>
<p><a
href="https://blog.csdn.net/Victor2code/article/details/109005171">(96条消息)
python多进程和多线程看这一篇就够了_T型人小付的博客-CSDN博客_python多进程和多线程</a></p>
<h3 id="线程池">线程池</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, wait, ALL_COMPLETED</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tes</span>(<span class="params">a</span>):               <span class="comment"># for循环里的东西先写成函数</span></span><br><span class="line">    a = <span class="number">2</span> ** a</span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ti1=time.time()</span><br><span class="line">    executor = ThreadPoolExecutor(<span class="number">5</span>)</span><br><span class="line">    all_tasks = [executor.submit(tes, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line">    wait(all_tasks, return_when=ALL_COMPLETED)</span><br><span class="line">    ti2=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;多线程耗费时间：&quot;</span>,ti2-ti1)</span><br><span class="line">    </span><br><span class="line">多线程耗费时间： <span class="number">0.8389759063720703</span></span><br></pre></td></tr></table></figure>
<h1 id="脚注">脚注</h1>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zhuanlan.zhihu.com/p/47795989">为什么
Python 这么慢？ - 知乎 (zhihu.com)</a><a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">https://blog.csdn.net/Victor2code/article/details/109005171<a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>【机器学习】Cross-Validation（交叉验证）</title>
    <url>/%E3%80%90%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E3%80%91Cross-Validation%EF%BC%88%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208011735473.png"
alt="image-20220801170610443" />
<figcaption aria-hidden="true">image-20220801170610443</figcaption>
</figure>
<p>该方法存在两个弊端：</p>
<p>1、训练集和测试集划分有多重方式，每种方式的test
MSE和最优degree是不一样的，结果取决于划分方式</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208011735436.png"
alt="image-20220801171705989" />
<figcaption aria-hidden="true">image-20220801171705989</figcaption>
</figure>
<p>2、训练集没有用到所有数据，效果不好</p>
<p>因此提出交叉验证。</p>
<hr />
<p>交叉验证</p>
<ul>
<li><p>LOOCV方法（Leave-one-out
cross-validation）：只用一个数据作为测试集，其他的数据都作为训练集，并将此步骤重复N次（N为数据集的数据数量），结果最后做平均。本质是n折交叉验证。</p></li>
<li><p>K折交叉验证（K-fold Cross
Validation）：测试集将不再只包含一个数据，而是多个，具体数目将根据K的选取决定，结果最后做平均。</p>
<p>五折交叉验证：</p>
<ul>
<li>将所有数据集分成5份</li>
<li>不重复地每次取其中一份做测试集，用其他四份做训练集训练模型，之后计算该模型在测试集上的MSEi</li>
<li>将5次的MSEi取平均得到最后的MSE</li>
</ul></li>
</ul>
<h4 id="参考文章">参考文章</h4>
<p>1、<a
href="https://zhuanlan.zhihu.com/p/24825503">【机器学习】Cross-Validation（交叉验证）详解
- 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>交叉验证</tag>
      </tags>
  </entry>
  <entry>
    <title>好文推荐</title>
    <url>/%E5%A5%BD%E6%96%87%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>1、<a
href="https://retompi.com/archived-blog/posts/2020/01/16/version-control-for-word-files-like-plain-text.html#git-pandoc">如何对
Word 文件进行「纯文本式」版本控制？ | TomBen (retompi.com)</a></p>
<p>2、<a
href="https://backlog.com/git-tutorial/cn/stepup/stepup1_1.html">什么是分支？【分支
(branch)】| 猴子都能懂的GIT入门| 贝格乐（Backlog）</a></p>
<p>3、<a
href="https://blog.51cto.com/yttitan/2409618">Shell脚本中的多任务并发执行_一壶浊酒的技术博客_51CTO博客</a></p>
<p>4、<a
href="https://notebook.community/gmonce/datascience/src/1%20-%20Yet%20Another%20Python%20Encoding%20Tutorial">Yet
Another Python Encoding Tutorial</a></p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>好文推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>小提琴图和箱线图</title>
    <url>/%E5%B0%8F%E6%8F%90%E7%90%B4%E5%9B%BE%E5%92%8C%E7%AE%B1%E7%BA%BF%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>小提琴图（violin
plot）是一种用于可视化数据分布的图表。它结合了箱线图和核密度图的优点，可以更直观地展示数据的分布情况和中位数、四分位数等统计量的位置。</p>
<p>小提琴图通常由两部分组成：中间的白点表示中位数，黑色的厚线表示四分位数范围，而外部的形状则是核密度估计的结果，类似于概率密度函数。不同小提琴之间的比较可以更好地呈现数据之间的差异和相似性。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="ChatGPT
">[1]</span></a></sup></p>
<span id="more"></span>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202304/202304151452788.png" /></p>
<p>outside points：离群点 Upper Adjacent Value：上边界值 Third
Quartile：第三四分位数 Median：中位数，第二四分位数 First Quartile
：第一四分位数 Lower Adjacent Value：下边界值 *** 第一四分位数（Q
1）：又称较小四分位数，等于该样本中所有数值由小到大排列后第25%的数字。
第二四分位数（Q
2）：又称中位数，等于该样本中所有数值由小到大排列后第50%的数字。
第三四分位数（Q
3）：又称较大四分位数，等于该样本中所有数值由小到大排列后第75%的数字。</p>
<p>第三四分位数与第一四分位数的差距又称四分位距（InterQuartile Range,
IQR）<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[四分位数-维基百科](https://zh.wikipedia.org/zh-hans/%E5%9B%9B%E5%88%86%E4%BD%8D%E6%95%B0) 
">[2]</span></a></sup></p>
<p>当有数值与第1与第3四分位数的范围差距1.5×IQR
以上时，该值为离群值（outlier）。 数值位于范围外1.5×IQR 到3×IQR
范围的数值，称作适度离群值（mild outlier）。 数值位于范围外3×IQR
以上的数值，称作极端离群值（extreme outlier）。</p>
<p>小提琴图除了显示上述的统计数据外，它还显示了数据的整体分布。</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202304/202304151452814.png" /></p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202304/202304151452831.png" /></p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202304/202304151452846.png" /></p>
<p>如果数据的四分位数保持不变，箱形图就不会改变。那么，我们可以对数据进行修改，使四分位数不发生变化，但分布的形状会发生很大的变化。下面的
GIF 图说明了这一点。</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202304/202304151455052.webp" /></p>
<ul>
<li>在直方图中，我们看到分布的对称形状</li>
<li>我们可以在箱形图和小提琴图中看到前面提到的指标（中位数、IQR）。</li>
<li>用于创建小提琴图的核密度图与添加在直方图上的核密度图是一样的。小提琴图中较宽的部分代表观测值取值的概率较高，较窄的部分则对应于较低的概率。<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[如何通俗的理解小提琴图 - jinzhao 的文章 - 知乎](
https://zhuanlan.zhihu.com/p/376055263 )
">[3]</span></a></sup></li>
</ul>
<h3 id="参考文章">参考文章</h3>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">ChatGPT<a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zh.wikipedia.org/zh-hans/%E5%9B%9B%E5%88%86%E4%BD%8D%E6%95%B0">四分位数-维基百科</a><a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:3">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zhuanlan.zhihu.com/p/376055263">如何通俗的理解小提琴图
- jinzhao 的文章 - 知乎</a><a href="#fnref:3" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>箱线图</tag>
      </tags>
  </entry>
  <entry>
    <title>文献管理</title>
    <url>/%E6%96%87%E7%8C%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>1、本地文献以一个字母开头（与课题相关）数字文献名作为文件名。（eg：k1、my
literature）</p>
<p>2、本地文献与Endnote相一致，ID为字母与数字，Label填写细分类或关键词，方便定位，Rating打分。</p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>文献管理</tag>
        <tag>Endnote</tag>
      </tags>
  </entry>
  <entry>
    <title>期刊、出版社、索引数据库</title>
    <url>/%E6%9C%9F%E5%88%8A%E3%80%81%E5%87%BA%E7%89%88%E7%A4%BE%E3%80%81%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302222118363.png" /></p>
<ul>
<li><p>研究人员向期刊或者会议投稿，交注册费和相应的审稿费等相关费用<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[会议期刊、出版社、索引工具之间的关系](https://cactusii.github.io/post/ke-yan-xiao-bai/)
">[1]</span></a></sup>；</p></li>
<li><p>会议组织者和期刊联系出版社，交出版费用；</p></li>
<li><p>出版社将论文更新到自己的数据库中，然后将数据库卖给全世界各大高校或企业；</p></li>
<li><p>其他开源数据库抓取出版社数据库的论文题目、摘要、参考文献等信息。</p></li>
</ul>
<p>1、<strong>会议组织者</strong>：一般由某个学校、组织，为了学术/利益举办会议，负责征集科研工作者的论文并决定是否录用，然后联系出版社进行出版发表，因此要征收科研工作者相应的费用，同时需要向出版社交相应的出版费用。</p>
<p>2、<strong>期刊</strong>：期刊论文是科研工作者针对某学术期刊投稿，审稿专家审稿并返回修改意见，最终由期刊编辑部决定是否录用。</p>
<p>3、<strong>出版社</strong>：一般具有一定声望，像IEEE、Springer、ACM，它们旗下有一些会议、期刊，向会议期刊收取出版费，拿取版权，扩充自己的数据库，向其他企业、高校出售来盈利。其实有的出版社即组织学术会议，也出版学术期刊，比如IEEE。</p>
<span id="more"></span>
<p>四大出版社（publisher）：</p>
<ul>
<li>Springer nature：nature及其子刊</li>
<li>Elsevier（爱思唯尔）：Cell，柳叶刀期刊</li>
<li>Wiley：Advanced Materials</li>
<li>Taylor &amp; Francis</li>
</ul>
<p>学术协会团体：IEEE（电气和电子工程师协会）、ACS（美国化学会）、RSC（英国皇家化学学会）、AIP（美国物理协会）、AAAS（美国科学促进会：Science属于它）、NAS（美国国家科学院：PANS属于它）、AMA（美国医学会）<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[全球重要的学术期刊出版社和学术协会介绍](https://zhuanlan.zhihu.com/p/394099449)
">[2]</span></a></sup></p>
<p>4、<strong>出版社数据库</strong>：出版社通常维护自己的数据库，比如IEEE的IEEE
Xplore就是查询该出版社数据库的入口，这些数据库都是可以下载到原文章的。</p>
<p>IEEE：https://ieeexplore.ieee.org/</p>
<p>Springer：https://link.springer.com/</p>
<p>Elsevier：https://www.elsevier.com/solutions/sciencedirect</p>
<p>Taylor &amp; Francis：https://www.tandfonline.com/。</p>
<p>5、<strong>索引数据库</strong>：像<strong>SCI、EI、CPCI-S</strong>等这些数据库其实没有论文的版权，与其说数据库不如说是一个检索工具，类似google/google
scholar，可以综合检索到各大出版社的数据库中的文献，但只能在这上面检索到论文的题目，摘要，参考文献等，和它们自己可以会有一个分类，添加一些附加信息，比如影响因子等。比如<strong>SCI只收录一些高质量的文章</strong>，而EI可能就收录的会多一些。</p>
<p>SCI科学引文索引(web of science)：http://webofknowledge.com</p>
<p>EI工程索引：https://www.engineeringvillage.com</p>
<p>ISTP科技会议录索引：http://webofknowledge.com</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302222118840.png" /></p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302222118931.png" /></p>
<h3 id="参考文章">参考文章</h3>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://cactusii.github.io/post/ke-yan-xiao-bai/">会议期刊、出版社、索引工具之间的关系</a><a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zhuanlan.zhihu.com/p/394099449">全球重要的学术期刊出版社和学术协会介绍</a><a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
  </entry>
  <entry>
    <title>正则表达式（视频笔记）</title>
    <url>/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F(%E8%A7%86%E9%A2%91%E7%AC%94%E8%AE%B0)/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本文为该视频（<a
href="https://www.bilibili.com/video/BV1Kg411g7bC?p=3&amp;share_source=copy_web&amp;vd_source=7f2a81e814313c699f856c2ec72be7d9">三剑客正则</a>）的笔记分享。</p>
<h1 id="基本用法">基本用法</h1>
<p>正则表达式regular expression（RE）（匹配有规律的东西）：</p>
<p>基础正则(Basic RE (BRE) )：<code>^ $ ^$ . * [a-z] [^abc]</code></p>
<p>扩展正则(Extended RE (ERE))：+ | （）{} ？</p>
<p>正则：使用一些符号表达重复出现，大小写，开头/结尾含义</p>
<p>应用：三剑客（grep，awk, sed）、开发语言（python，golang, ...）</p>
<p>使用：过滤有规律的内容</p>
<span id="more"></span>
<table>
<thead>
<tr class="header">
<th>基础正则</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>^</td>
<td>以...开头的行 ^he</td>
</tr>
<tr class="even">
<td>$</td>
<td>以...结尾的行 he$</td>
</tr>
<tr class="odd">
<td>^$</td>
<td>空行</td>
</tr>
<tr class="even">
<td>.</td>
<td>任意一个字符</td>
</tr>
<tr class="odd">
<td>*</td>
<td>前一个字符连续出现（重复）0次或0次以上</td>
</tr>
<tr class="even">
<td>.*</td>
<td>所有内容</td>
</tr>
<tr class="odd">
<td>\</td>
<td>转义字符 ab键</td>
</tr>
<tr class="even">
<td>[]</td>
<td>一个整体，匹配任意一个字符[abc] a或b或c</td>
</tr>
<tr class="odd">
<td>[^]</td>
<td>取反排除， [abc]</td>
</tr>
<tr class="even">
<td>正则贪婪性</td>
<td>熟悉特点即可，.*或连续出现</td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col style="width: 12%" />
<col style="width: 80%" />
<col style="width: 6%" />
</colgroup>
<thead>
<tr class="header">
<th>扩展正则</th>
<th>含义</th>
<th>搭配</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>+</td>
<td>前一个字符连续出现1次或1次以上</td>
<td>[]+</td>
</tr>
<tr class="even">
<td>|</td>
<td>或者</td>
<td></td>
</tr>
<tr class="odd">
<td>（）</td>
<td>一个整体，sed反向引用</td>
<td></td>
</tr>
<tr class="even">
<td>{}</td>
<td>o{n,m}前一个字母o，至少连续出现n次，最多连续出现m次</td>
<td></td>
</tr>
<tr class="odd">
<td>？</td>
<td>连续出现 前一个字符出现0次或1次</td>
<td></td>
</tr>
</tbody>
</table>
<p>注意事项：</p>
<ul>
<li><p>所有的符号英文符号</p></li>
<li><p>学习正则，通过grep命令学习， grep加上单引号</p></li>
<li><p>给grep,egrep加上颜色：<code>alias grep = 'grep — color=auto'</code>
和<code>alias egrep='egrep —color=auto'</code></p></li>
<li><p>注意系统的字符集：en_US.
utf-8(大部分情况没问题)，如果出现问题修改字符集为：<code>export LANG=c</code></p></li>
<li><p>快速掌握正则：配合grep -o 参数学习</p></li>
</ul>
<p>正则vs通配符</p>
<table>
<colgroup>
<col style="width: 29%" />
<col style="width: 33%" />
<col style="width: 37%" />
</colgroup>
<thead>
<tr class="header">
<th>分类</th>
<th>诞生目标（用途）</th>
<th>支持的命令</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>正则（re）</td>
<td>三剑客，高级语言，进行过滤（匹配字符）</td>
<td>三剑客grep,sed,awk,find,rename(ubuntu),expr</td>
</tr>
<tr class="even">
<td>通配符（pathname extension或glob）</td>
<td>匹配文件（文件名）<em>.txt </em>.log {01..10}</td>
<td>Linux下面大部分命令都支持</td>
</tr>
</tbody>
</table>
<h1 id="基础正则详解">基础正则详解</h1>
<p>1、<code>^...</code> 表示以什么开头的行 <code>^he</code>
以he开头的行</p>
<p>2、<code>...$</code>
表示以什么结尾的行<code>he$</code>以he结尾的行</p>
<p>有些结尾并不是看到的字符，有些隐藏了（cat -A 显示所有）</p>
<p>3、<code>^$</code>空行（这一行没有任何内容，也没有空格，空格也是个字符）</p>
<p>排除文件中的空行：<code>grep -v '^$'</code>文件</p>
<p>4、<code>.</code>(点)
表示任意一个字符，但是<code>.</code>（点）不匹配空行</p>
<p>5、<code>\</code> 转义字符：去除原有特殊含义</p>
<p>匹配以点结尾的行 ：<code>grep '.$'</code>文件</p>
<p>转义字符序列： ab键</p>
<p>6、<code>*</code> 前一个字符连续出现0 次或0次以上</p>
<p>连续出现：0（0出现一次）00（0出现2次）addfs(字母出现了6次)</p>
<p>7、<code>.*</code> 所有内容（任意内容）</p>
<p><code>.</code>(点)任意一个字符+ <code>*</code>前一个字符连续出现0
次或0次以上 所以就是所有内容（包括空行）</p>
<p>正则表达式的贪婪性，<code>._</code>表示所有或_连续出现的时候，表现出尽可能贪婪匹配</p>
<p>特殊情况：<code>grep '2*' 文件</code>
或<code>grep '2*' 文件</code>（所有都输出来了）</p>
<p><code>2*</code>数字2出现了0次或0次以上</p>
<p>0次以上： 2 2222 2222</p>
<p>0次：相当于空 （grep 空就全输出了）</p>
<p>8、<code>[] [abc]</code>1次匹配1个字符，匹配任何一个字符（a或b或c）</p>
<p><code>[a-z]</code> 代表a到z的小写字母</p>
<p><code>[A-Z]</code> 代表A到Z的大写字母</p>
<p><code>[a-zA-Z]</code>或<code>[a-Z]</code>代表大小写字母</p>
<p><code>[a-Z0-9]</code>代表大小写字母和数字</p>
<p><code>[a-z]</code>grep 用-i，不区分大小写就是代表大小写字母</p>
<p><code>[ ]</code>里面的内容去掉特殊含义
如<code>[a-Z|]</code>匹配大小写和|</p>
<p><code>（）</code>小括号 括弧</p>
<p><code>[ ]</code>中括号</p>
<p><code>&#123; &#125;</code> 大括号 花括号</p>
<p>9、<code>[^]</code>取反
如<code>[^abc]</code>匹配a或b或c之外的内容</p>
<h1 id="扩展正则详解">扩展正则详解</h1>
<p>1、<code>+</code>前一个字符连续出现1次或1次以上</p>
<p><code>grep -E '0+' 文件</code>
0出现一次或一次以上，这三种命令一样效果</p>
<p><code>grep '0+' 文件</code>grep没用E参数不能使用扩展正则，但是转义字符把扩展正则转为基本正则。不推荐这样使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">egrep &#x27;0+&#x27; 文件</span><br></pre></td></tr></table></figure>
<p>2、 | 或者 如<code>egrep 'apple | APPLE' 文件</code></p>
<table>
<thead>
<tr class="header">
<th>符号</th>
<th>含义</th>
<th>应用场景</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>[]</td>
<td>1次匹配1个字符 [apple] a或p或l或e</td>
<td>匹配单个字符[]和+</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td>匹配1个字符或多个 a</td>
</tr>
</tbody>
</table>
<p>3、（）被括起来的内容，表示一个整体（一个字符）、后向引用（反向引用sed）</p>
<p><code>egrep 'oldb(o|e)y' 文件</code> 匹配oldboy或oldbey的字符</p>
<p>4、<code>&#123;&#125;</code>连续出现</p>
<table>
<thead>
<tr class="header">
<th>符号</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>o{n,m}</td>
<td>前一个字母o，至少连续出现n次，最多连续出现m次</td>
<td>≥n ≤m</td>
</tr>
<tr class="even">
<td>o{n}</td>
<td>前一个字母o，连续出现n次</td>
<td>==n</td>
</tr>
<tr class="odd">
<td>o{n,}</td>
<td>前一个字母o，至少连续出现n次</td>
<td>≥n</td>
</tr>
<tr class="even">
<td>o{,m}</td>
<td>前一个字母o，最多连续出现m次</td>
<td>≤m</td>
</tr>
</tbody>
</table>
<p>5、<code>？</code>连续出现 前一个字符出现0次或1次</p>
<p><code>egrep 'god | gd' 文件</code>等于
<code>egrep 'go?d' 文件</code></p>
<p>过滤身份证号码： <code>egrep '[0-9]&#123;17&#125;[0-9x]' 文件</code>
（1-17位数字，最后一个是数字或x）</p>
<p>排除文件中的空行或含有#号的行：<code>egrep -v '^$ | #' 文件</code></p>
<p>表达式<code>[0-255]</code>是一个字符集，它的含义是匹配
0，1，2，5中任意一个字符</p>
<p><code>[1-9][0-9]</code>可以匹配10到99之间的数字。这两个是最简单的。</p>
<hr />
<p>grep '搜索内容' 文件</p>
<table>
<tbody>
<tr class="odd">
<td>-a</td>
<td>将 binary 文件以 text 文件的方式搜寻数据</td>
</tr>
<tr class="even">
<td>-c</td>
<td>计算找到 '搜寻字符串' 的次数</td>
</tr>
<tr class="odd">
<td>-i</td>
<td>忽略大小写的不同，所以大小写视为相同</td>
</tr>
<tr class="even">
<td>-n</td>
<td>顺便输出行号</td>
</tr>
<tr class="odd">
<td>-v</td>
<td>反向选择，亦即显示出没有 '搜寻字符串' 内容的那一行！</td>
</tr>
<tr class="even">
<td>--color=auto</td>
<td>可以将找到的关键词部分加上颜色的显示喔！</td>
</tr>
<tr class="odd">
<td>-o</td>
<td>显示匹配过程，即只显示匹配到的内容</td>
</tr>
<tr class="even">
<td>-E</td>
<td>支持扩展正则(扩展正则用grep -E 或egrep)</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Regex</tag>
        <tag>Video notes</tag>
      </tags>
  </entry>
  <entry>
    <title>期刊影响力</title>
    <url>/%E6%9C%9F%E5%88%8A%E5%BD%B1%E5%93%8D%E5%8A%9B/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>影响因子（Impact Factor）：某期刊前两年发表的论文在该报告年份（JCR
year）中被引用总次数除以该期刊在这两年内发表的论文总数。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="https://baike.baidu.com/item/%E5%BD%B1%E5%93%8D%E5%9B%A0%E5%AD%90/574727
">[1]</span></a></sup></p>
<p>期刊的IF（影响因子）每年不断浮动，把IF定值作为学术评价指标不适合，而且不同学科领域期刊的影响因子差异很大，仅凭IF不能直观地比较不同领域的期刊。把同一学科领域的期刊，<strong>按IF大到小做排序后，划分入不同区域。</strong>只要是某领域1区的期刊，就是该领域的顶级刊物，直观反映该刊在领域内的水准和大致排位。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="https://kyc.szcu.edu.cn/2023/0328/c2593a50685/page.htm
">[2]</span></a></sup></p>
<span id="more"></span>
<ul>
<li><p>JCR分区：汤森路透公司制定的JCR分区(原来是汤森路透，后来易主科睿唯安)，一般简称为JCR
分区(Journal Citation Reports，简称JCR)。</p>
<p>JCR将收录期刊分为176个不同学科类别。每个学科分类按期刊的影响因子高低，平均分为Q1、Q2、Q3和Q4四个区：</p>
<ul>
<li><p>影响因子前25%(含25%)期刊划分为Q1区；</p></li>
<li><p>影响因子前25%～50% 为Q2区；</p></li>
<li><p>影响因子前50%～75% 为Q3区；</p></li>
<li><p>影响因子75%之后为Q4区。</p></li>
</ul></li>
<li><p>中科院分区：中国科学院国家科学图书馆制定的JCR分区，一般简称为「中科院分区」。</p>
<p>中科院分区目前分为基础版和升级版（试行）</p>
<p>中科院分区（基础版）先将JCR中所有期刊分为数学、物理、化学、生物、地学、天文、工程技术、医学、环境科学、农林科学、社会科学、管理科学及综合性期刊13
大类。每个学科分类按照期刊的3年平均影响因子高低，分为4四个区：</p>
<ul>
<li><p>影响因子前5%为该类1 区；</p></li>
<li><p>影响因子前6% ～ 20% 为2 区；</p></li>
<li><p>影响因子前21% ～ 50% 为3 区；</p></li>
<li><p>影响因子后50%为4区。</p></li>
</ul>
<p>中科院分区升级版在2020年1月公布，在基础版的基础上做了以下调整。</p>
<ul>
<li>针对期刊收录范围，升级版由基础版的只收录SCI期刊，扩展为收录SCI期刊和SSCI期刊。</li>
<li>针对学科分类，升级版将期刊由基础版的13个学科扩展至18个。针对分区标准，升级版由基础版的按照影响因子分区，改为了按照期刊超越指数分区。</li>
<li>值得一提的是，中科院分区目前属于过渡期，基础版和升级版均在更新和发布。2022年起，将只公布升级版。</li>
</ul></li>
</ul>
<p><strong>JCR分区 PK 中科院分区</strong></p>
<ul>
<li><p>01 学科划分不同</p>
<p>科睿唯安JCR的Journal
Ranking没有设置大类学科，只分为176个具体学科，也就是中科院分区表中所指的小类学科。</p></li>
<li><p>02 分区方法不同</p>
<p>JCR是按照<strong>“平均主义”思想</strong>，根据刊物IF的高至低平均划分4个区，每个区含有该领域总量25%的期刊；中科院的分区如同<strong>社会阶层的金字塔结构</strong>，1区只有5%的顶级期刊，2~4区期刊数量也逐层增加。于是，采用中科院分区后往往出现<strong>“掉区”</strong>的情况。</p></li>
</ul>
<p>　　显然中科院的1区和2区杂志很少，杂志质量相对也高，基本都是本领域的顶级期刊。所以有的人发表的论文按JCR分区标准算一区，而按中科院分区算2区甚至三区。</p>
<ul>
<li><p>03 指标取值不同</p>
<p>JCR是按当期（1年）的IF进行分区，中科院是按刊物前3年IF平均值进行分区。</p></li>
<li><p>04 写法不同</p>
<p>一般的，JCR中1区的期刊写作“Q1”，中科院1区的期刊写作“1区”，如此类推。最后的重点——我们到底该看哪个分区？
　　其实两种分区方式都比较权威，具体怎么看，最直接的方法是看你们学校/单位认哪个。</p></li>
</ul>
<h3 id="参考文章">参考文章</h3>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">https://baike.baidu.com/item/%E5%BD%B1%E5%93%8D%E5%9B%A0%E5%AD%90/574727<a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">https://kyc.szcu.edu.cn/2023/0328/c2593a50685/page.htm<a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>期刊</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式基础</title>
    <url>/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="元字符">元字符</h1>
<p>元字符是具有特殊意义的字符，其定义在正则表达式中并不是统一的。元字符在字符组外和字符组内意义不一样。</p>
<ul>
<li><p><code>^</code>: 脱字符，开头锚点</p></li>
<li><p><code>$</code>:美元符，结尾锚点</p></li>
<li><p><code>[]</code>: 字符组</p></li>
<li><p><code>[^]</code>：排除型字符组</p></li>
<li><p><code>.</code>：点号，单个任意字符（字符组外部）</p></li>
<li><p><code>\&lt;</code>：单词起始位置（某些egrep可能不支持，perl使用<code>\b</code>）</p></li>
<li><p><code>\&gt;</code>：单词结束位置（某些egrep可能不支持，perl使用<code>\b</code>）</p></li>
<li><p><code>|</code>：
或者，也叫多选分支（多选项），分隔两边表达式</p></li>
<li><p><code>()</code>：限制竖线（多选项）范围；字符组成单元，受量词作用；反向引用捕获文本</p>
<ul>
<li><p><code>（？：）</code>：只分组不捕获，及得到的文本不会保存到变量中，不影响捕获计数</p>
<p><span id="more"></span></p></li>
</ul></li>
<li><p>量词：</p>
<ul>
<li><code>？</code>：可选项，前元素出现0/1次</li>
<li><code>+</code>： 重复出现，前元素&gt;=1</li>
<li><code>*</code>：重复出现，前元素&gt;=0</li>
</ul></li>
<li><p>区间量词：</p>
<ul>
<li><p><code>&#123;&#125;</code>：自定义重现次数</p></li>
<li><table>
<thead>
<tr class="header">
<th>符号</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>o{n,m}</td>
<td>前一个字母o，至少连续出现n次，最多连续出现m次</td>
<td>≥n ≤m</td>
</tr>
<tr class="even">
<td>o{n}</td>
<td>前一个字母o，连续出现n次</td>
<td>==n</td>
</tr>
<tr class="odd">
<td>o{n,}</td>
<td>前一个字母o，至少连续出现n次</td>
<td>≥n</td>
</tr>
<tr class="even">
<td>o{,m}</td>
<td>前一个字母o，最多连续出现m次</td>
<td>≤m</td>
</tr>
</tbody>
</table></li>
</ul></li>
<li><p><code>\1，\2</code>：反向引用
（匹配第一组、第二组括号内字表达式匹配的文本）</p></li>
</ul>
<p><code>\</code>: 转义符</p>
<p><code>-</code>：字符组内：普通符号（[之后，[^之后）、表示范围</p>
<p><code>.*</code>：一组任何字符（某些工具中，不包括换行符）</p>
<table>
<colgroup>
<col style="width: 6%" />
<col style="width: 93%" />
</colgroup>
<thead>
<tr class="header">
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> 制表符</td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>换行符</td>
</tr>
<tr class="odd">
<td> 回车符</td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>任何空白字符（whitespace
character)：空格符、制表符、进纸符、回车符</td>
</tr>
<tr class="odd">
<td></td>
<td>除</td>
</tr>
<tr class="even">
<td></td>
<td>即[a-zA-Z0-9] 可使用 +来匹配一个单词</td>
</tr>
<tr class="odd">
<td></td>
<td>除，也就是<code>[^a-zA-Z0-9]</code></td>
</tr>
<tr class="even">
<td> [0-9],即数字</td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>除，即<code>[^0-9]</code></td>
</tr>
</tbody>
</table>
<h1 id="tips">Tips</h1>
<ul>
<li><p>一个字符组，即使是排除型字符组，也需要一个字符</p></li>
<li><p>字符组只能匹配一个字符，多选项匹配任意长度文本</p></li>
<li><p>锚点可以分为两大类：简单锚点（^、$、…）和复杂锚点（例如顺序环视和逆序环视）。</p></li>
<li><p>egrep的正则使用：<code>egrep '^(from|subject)：' file</code></p></li>
</ul>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208191721658.png"
alt="image-20220818103601114" />
<figcaption aria-hidden="true">image-20220818103601114</figcaption>
</figure>
<ul>
<li><p><code>(first|lst)</code> = <code>(fir|l)st</code></p></li>
<li><p><code>^a|b|c:.</code>与<code>^(a|b|c):.</code>不一样，括号的作用就是分组</p></li>
<li><p><code>\&lt;cat\&gt;</code>
：单词分界符（不是所有egrep都支持），匹配cat，单词版本的<code>^</code>和<code>$</code></p></li>
</ul>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208181102326.png"
alt="image-20220818110215589" />
<figcaption aria-hidden="true">image-20220818110215589</figcaption>
</figure>
<h1 id="反向引用">反向引用</h1>
<p>匹配与表达式先前部分匹配的同样的文本。</p>
<p><code>([a-z])([0-9]) \1\2</code>：<code>\1</code>代表<code>[a-z]</code>匹配的内容，<code>\2</code>代表<code>[0-9]匹配的内容</code></p>
<p>匹配<code>the the</code>：</p>
<ul>
<li><p><code>\&lt;the the\&gt;</code></p></li>
<li><p><code>\&lt;(A-Za-z+) +\1\&gt;</code>
比第一种找到的范围更大</p></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$price=~s/(\.\d\d[1-9]?)\d*/$1/</span><br><span class="line">$price   =~   s/  (\.\d\d[1-9]?)\d*  /$1/</span><br><span class="line"># 用括号内的内容   替换掉  括号内容加一个数字字符</span><br><span class="line"># 即去掉数字</span><br><span class="line">$price    # perl的变量</span><br><span class="line">=~  # 连接</span><br><span class="line">s/regex/replacement/ #查找和替换</span><br><span class="line">s/regex/replacement/g # g全局操作，即全局替换</span><br><span class="line">s/regex/replacement/i # i忽略大小写</span><br><span class="line">m/regex/ # 正则表达式匹配文本</span><br></pre></td></tr></table></figure>
<h1 id="环视断言">环视（断言）</h1>
<p>选择一个位置：顺序环视，即从左到右，匹配字符，最后回到原点即左边，肯定则有该匹配字符，否定则没有；逆序环视，即从右往左，匹配字符，最后回到原点即右边，肯定则有该匹配字符，否定则没有；所以找到字符在右的，使用顺序环视，找的字符在左的，使用逆序环视。</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208182050323.png"
alt="image-20220818205023327" />
<figcaption aria-hidden="true">image-20220818205023327</figcaption>
</figure>
<p>正向先行断言：正向顺序环视 负向先行断言：否定顺序环视
正向后行断言：肯定逆序环视 负向后行断言：否定逆序环视</p>
<p><code>(?=jeffrey)jeff</code>=<code>jeff(?=rey)</code>：都能精确匹配第一行，第二行不会匹配</p>
<p><code>jeff</code>：两行都能匹配到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jeffrey</span><br><span class="line">jeffdrson</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208181719151.png"
alt="image-20220818171920809" />
<figcaption aria-hidden="true">image-20220818171920809</figcaption>
</figure>
<h1 id="其他">其他</h1>
<p>程序设计语言有 3 种处理正则表达式的方式：集成式
（integrated）、程序式（procedural）和面向对象式（object
oriented）。在第一种方式中，正则表达式是直接内建在语言之中的，Perl就是如此。Python采用的是面向对象式的办法。Awk
使用的是集成式处理方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">R = re.<span class="built_in">compile</span>(<span class="string">&quot;^Subjrct:(.*)&quot;</span>,re.IGNORECASE)；</span><br><span class="line">M = R.search(line)</span><br><span class="line"><span class="keyword">if</span> M:</span><br><span class="line">    subject = M.group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>宽松排列和注释模式
：此模式会忽略字符组外部的所有空白字符。字符组内部的空白字符仍然有效（java.util.regex是例外），＃符号和换行符之间的内容视为注释。</p>
<p>点号通配模式（dot-match-all match
mode，也叫“单行模式”）：通常，点号是不能匹配换行符的。对现代编程语言来说，点号能够匹配换行符的模式和不能匹配的模式同样有用。这两种模式哪个更方便，取决于具体的情况。许多程序提供了两种方法供正则表达式选择。</p>
<p>增强的行锚点模式（Enhanced line-anchor match mode，也叫
“多行文本模式”）：增强的行锚点模式会影响到行锚点「^」和「$」的匹配。通常情况
下，锚点「^」不能匹配字符串内部的换行符，而只能匹配目标字符串
的起始位置。但是在此增强模式下，它能够匹配字符串中内嵌的文本行的开头位置。</p>
<p>文字文本模式：“文字文本（literal text）”模式几乎不能识别任何正则表达
式元字符。</p>
<p>字符组通常表示肯定断言（positive assertion）。也就是说，
它们必须匹配一个字符。排除型字符组仍然需要匹配一个字符，只是
它没有在字符组中列出而已。</p>
<p>在某些工具软件中，点号用来缩略表示可以匹配任何字符的字符
组，而在其他工具中，点号能匹配除了换行符之外的任何字符。</p>
<p>简单的字符组减法：<code>[[a-z]-[aeiou]]</code></p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208191133180.png"
alt="image-20220819113303159" />
<figcaption aria-hidden="true">image-20220819113303159</figcaption>
</figure>
<p>完整的字符组集合运算：<code>[[a-z]&amp;&amp;[^aeiou]]</code></p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208191136925.png"
alt="image-20220819113645224" />
<figcaption aria-hidden="true">image-20220819113645224</figcaption>
</figure>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208191139421.png"
alt="image-20220819113949496" />
<figcaption aria-hidden="true">image-20220819113949496</figcaption>
</figure>
<h1 id="推荐阅读">推荐阅读</h1>
<ul>
<li><a href="https://regexlearn.com/zh-cn">Regex Learn -
逐步从零基础到高阶。</a></li>
<li><a href="https://www.r2coding.com/#/README?id=正则表达式">Road 2
Coding (r2coding.com)</a></li>
<li><a
href="https://deerchao.cn/tutorials/regex/regex.htm">正则表达式30分钟入门教程
(deerchao.cn)</a></li>
<li>精通正则表达式（effrey E. F. Friedl）：本文的绝大多数内容来源</li>
</ul>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Regex</tag>
      </tags>
  </entry>
  <entry>
    <title>波士顿房价数据集的处理</title>
    <url>/%E6%B3%A2%E5%A3%AB%E9%A1%BF%E6%88%BF%E4%BB%B7%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="需求">需求</h3>
<p>波士顿房价数据集在scikit-learn1.2版本以后被移除了。
目前自己用的刚好是1.2版本，但是需要复现书中的一些代码（Python机器学习基础教程），所以需要从其他途径获取波士顿房价数据集，主要是获得data(506,
104)和相关的target。</p>
<span id="more"></span>
<h3 id="实现">实现</h3>
<p>1、获得data(506,104)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data_url = <span class="string">&quot;http://lib.stat.cmu.edu/datasets/boston&quot;</span></span><br><span class="line">raw_df = pd.read_csv(data_url, sep=<span class="string">&quot;\s+&quot;</span>, skiprows=<span class="number">22</span>, header=<span class="literal">None</span>)</span><br><span class="line">data = np.hstack([raw_df.values[::<span class="number">2</span>, :], raw_df.values[<span class="number">1</span>::<span class="number">2</span>, :<span class="number">2</span>]])</span><br><span class="line">target = raw_df.values[<span class="number">1</span>::<span class="number">2</span>, <span class="number">2</span>] <span class="comment"># 归一化和特征构造后都没有变化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Data shape: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data.shape))</span><br><span class="line"></span><br><span class="line">X = MinMaxScaler().fit_transform(data)</span><br><span class="line">X = PolynomialFeatures(degree=<span class="number">2</span>, include_bias=<span class="literal">False</span>).fit_transform(X) <span class="comment"># X即为最后的data(506,104)</span></span><br><span class="line"><span class="built_in">print</span>(X.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># out:</span></span><br><span class="line"><span class="comment"># Data shape: (506, 13)  </span></span><br><span class="line"><span class="comment"># X shape: (506, 104)</span></span><br></pre></td></tr></table></figure>
<p>2、获取target：</p>
<p>对数据进行归一化和多项式构造，并没有改变行的布局，只是列发生变化，所以shape变化的前后，target不变。</p>
<h3 id="理解">理解</h3>
<h4 id="特征的由少变多">特征的由少变多</h4>
<p>最初的 13 个特征加上这 13 个特征两两组合（有放回）得到的 91
个特征，一共有 104 个特征。</p>
<p>两两组合计算： 思路1：</p>
<blockquote>
<p>共13个特征，第一次抽取1这个特征，再放回1，也就是1可以和13个特征组合，也就是允许1和1组合。</p>
<p>第二次抽取2这个特征，再放回2，2也可以和13个特征组合，但是第一次抽取时1和2已经组合过了，所以需要去除这个1和2组合，即2只能和12个特征组合。</p>
<p>第三次抽取3这个特征，再放回3，3也可以和13个特征组合，但是第一次3和1已经组合过了，第二次3和2已经组合过了，即3只能和11个特征组合。</p>
<p>第 1 个特征可以与 13 个特征相乘，第 2 个可以与 12 个特征相乘（除了第
1 个），第 3 个可以与 11 个特征相乘……依次相加，13 + 12 + 11 + … + 1 =
91。</p>
</blockquote>
<p>思路2：当成两部分计算，之前自己算成78，就是忽略了有放回这个条件即忽略了绿色部分；</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302071417095.png" /></p>
<h4 id="minmaxscaler">MinMaxScaler()</h4>
<p>Feature
scaling，常见的提法有“特征归一化”、“标准化”，是数据预处理中的重要技术。<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[为什么要做特征归一化/标准化？](https://blog.csdn.net/blogshinelee/article/details/102875044)
">[3]</span></a></sup>本文将Feature
scaling叫作特征标准化，归一化指代min-max normalization。</p>
<p>常用feature scaling（标准化）方法：</p>
<ul>
<li>Rescaling (min-max normalization、range scaling) / 归一化</li>
<li>Mean normalization</li>
<li>Standardization (Z-score Normalization)</li>
<li>Scaling to unit length</li>
</ul>
<p>上述4种feature
scaling方式，前3种为逐行操作，最后1种为逐列操作。本文只讨论min-max
normalization这个方式。</p>
<p>当数据(x)按照最小值中心化后，再按极差（最大值 -
最小值）缩放，数据移动了最小值个单位，并且会被收敛到 <code>[0,1]</code>
之间(默认)，而这个过程，就叫做数据归一化(Normalization，又称Min-Max
Scaling)<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[preprocessing.MinMaxScaler用法](https://hg95.github.io/sklearn-notes/Chapter3/preprocessing.MinMaxScaler%E7%94%A8%E6%B3%95.html)">[1]</span></a></sup>。</p>
<p>归一化其实就是标准化的一种方式，只不过归一化是将数据映射到了<code>[0,1]</code>这个区间中。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[使用sklearn进行对数据标准化、归一化以及将数据还原](https://blog.csdn.net/FrankieHello/article/details/79659111)">[2]</span></a></sup></p>
<p>归一化之后的数据服从正态分布，公式如下： <span
class="math display">\[X^* = \frac{x-min(x)}{max(x)-min(x)}\]</span></p>
<figure>
<img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302071417617.png"
alt="归一化过程" />
<figcaption aria-hidden="true">归一化过程</figcaption>
</figure>
<p><a
href="https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html?highlight=minmaxscaler#sklearn.preprocessing.MinMaxScaler">preprocessing.MinMaxScaler
官方文档</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">sklearn</span>.preprocessing.MinMaxScaler(feature_range=(<span class="number">0</span>, <span class="number">1</span>), *, copy=<span class="literal">True</span>, clip=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>默认数据归一到 <code>[ 0，1 ]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line">data = np.array([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]).reshape(-<span class="number">1</span>, <span class="number">1</span>) </span><br><span class="line">mm = MinMaxScaler()   <span class="comment"># 实例化</span></span><br><span class="line">mm_data = mm.fit_transform(data)  <span class="comment">#与下面注释的两行一样</span></span><br><span class="line"><span class="comment"># mm = mm.fit(data)  # fit，在这里本质是生成min(x)和max(x)</span></span><br><span class="line"><span class="comment"># mm_data = mm.transform(data) # 通过接口导出结果</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data：\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;归一化的data：\n&#123;&#125;&quot;</span>.<span class="built_in">format</span>(mm_data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># out：</span></span><br><span class="line"><span class="comment"># data：</span></span><br><span class="line"><span class="comment"># [[3]</span></span><br><span class="line"><span class="comment">#  [4]</span></span><br><span class="line"><span class="comment">#  [5]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化的data：</span></span><br><span class="line"><span class="comment"># [[0. ]</span></span><br><span class="line"><span class="comment">#  [0.5]</span></span><br><span class="line"><span class="comment">#  [1. ]]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = np.array([[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">78</span>,<span class="number">3</span>],[<span class="number">60</span>,<span class="number">56</span>,<span class="number">32</span>],[<span class="number">97</span>,<span class="number">43</span>,<span class="number">12</span>]])</span><br><span class="line">mm = MinMaxScaler()  </span><br><span class="line">mm_data = mm.fit_transform(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data：\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;归一化的data：\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(mm_data))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data的shape:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(data.shape))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最大值：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(mm.data_max_))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最小值：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(mm.data_min_))</span><br><span class="line"></span><br><span class="line"><span class="comment"># out:</span></span><br><span class="line"><span class="comment"># data：</span></span><br><span class="line"><span class="comment"># [[ 3  4  5]</span></span><br><span class="line"><span class="comment">#  [ 1 78  3]</span></span><br><span class="line"><span class="comment">#  [60 56 32]</span></span><br><span class="line"><span class="comment">#  [97 43 12]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化的data：</span></span><br><span class="line"><span class="comment"># [[0.02083333 0.         0.06896552]</span></span><br><span class="line"><span class="comment">#  [0.         1.         0.        ]</span></span><br><span class="line"><span class="comment">#  [0.61458333 0.7027027  1.        ]</span></span><br><span class="line"><span class="comment">#  [1.         0.52702703 0.31034483]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># data的shape:(4, 3)</span></span><br><span class="line"><span class="comment"># 最大值：[97. 78. 32.]</span></span><br><span class="line"><span class="comment"># 最小值：[1. 4. 3.]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>列是特征，行是样本，所以这里的归一化都是以列为单位；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler, PolynomialFeatures</span><br><span class="line"></span><br><span class="line">np.set_printoptions(threshold = np.inf) <span class="comment"># 不使用省略号表示</span></span><br><span class="line">np.set_printoptions(suppress = <span class="literal">True</span>) <span class="comment"># 不使用科学计数显示</span></span><br><span class="line"></span><br><span class="line">data_url = <span class="string">&quot;http://lib.stat.cmu.edu/datasets/boston&quot;</span></span><br><span class="line">raw_df = pd.read_csv(data_url, sep=<span class="string">&quot;\s+&quot;</span>, skiprows=<span class="number">22</span>, header=<span class="literal">None</span>)</span><br><span class="line">data = np.hstack([raw_df.values[::<span class="number">2</span>, :], raw_df.values[<span class="number">1</span>::<span class="number">2</span>, :<span class="number">2</span>]])</span><br><span class="line">target = raw_df.values[<span class="number">1</span>::<span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">mm = MinMaxScaler()  <span class="comment"># 实例化</span></span><br><span class="line">mm = mm.fit(data)   <span class="comment"># 得出最大值，最小值</span></span><br><span class="line">data_g = mm.transform(data) <span class="comment"># 导出归一化结果</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data shape: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data.shape))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;X shape: &#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(data_g.shape)) <span class="comment"># 只做了归一化，前后特征维度没变</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data前3行：\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(data[<span class="number">0</span>:<span class="number">3</span>,]))  <span class="comment"># 验证按列进行归一化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;归一化后的data_g:\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(data_g[<span class="number">0</span>:<span class="number">3</span>,]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最小值：&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(mm.data_min_))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最大值：&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(mm.data_max_))</span><br><span class="line"></span><br><span class="line"><span class="comment"># out:</span></span><br><span class="line"><span class="comment"># data shape: (506, 13)</span></span><br><span class="line"><span class="comment"># X shape: (506, 13)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># data前3行：</span></span><br><span class="line"><span class="comment"># [[  0.00632  18.        2.31      0.        0.538     6.575    65.2</span></span><br><span class="line"><span class="comment">#     4.09      1.      296.       15.3     396.9       4.98   ]</span></span><br><span class="line"><span class="comment">#  [  0.02731   0.        7.07      0.        0.469     6.421    78.9</span></span><br><span class="line"><span class="comment">#     4.9671    2.      242.       17.8     396.9       9.14   ]</span></span><br><span class="line"><span class="comment">#  [  0.02729   0.        7.07      0.        0.469     7.185    61.1</span></span><br><span class="line"><span class="comment">#     4.9671    2.      242.       17.8     392.83      4.03   ]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化后的data_g:</span></span><br><span class="line"><span class="comment"># [[0.         0.18       0.06781525 0.         0.31481481 0.57750527</span></span><br><span class="line"><span class="comment">#   0.64160659 0.26920314 0.         0.20801527 0.28723404 1.</span></span><br><span class="line"><span class="comment">#   0.08967991]</span></span><br><span class="line"><span class="comment">#  [0.00023592 0.         0.24230205 0.         0.17283951 0.5479977</span></span><br><span class="line"><span class="comment">#   0.78269825 0.34896198 0.04347826 0.10496183 0.55319149 1.</span></span><br><span class="line"><span class="comment">#   0.2044702 ]</span></span><br><span class="line"><span class="comment">#  [0.0002357  0.         0.24230205 0.         0.17283951 0.6943859</span></span><br><span class="line"><span class="comment">#   0.59938208 0.34896198 0.04347826 0.10496183 0.55319149 0.98973725</span></span><br><span class="line"><span class="comment">#   0.06346578]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最小值：[  0.00632   0.        0.46      0.        0.385     3.561     2.9</span></span><br><span class="line"><span class="comment">#    1.1296    1.      187.       12.6       0.32      1.73   ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大值：[ 88.9762 100.      27.74     1.       0.871    8.78   100.      12.1265</span></span><br><span class="line"><span class="comment">#   24.     711.      22.     396.9     37.97  ]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>((<span class="number">0.00632</span>-<span class="number">0.00632</span>)/(<span class="number">88.9762</span>-<span class="number">0.00632</span>))</span><br><span class="line"><span class="built_in">print</span>((<span class="number">0.02731</span>-<span class="number">0.00632</span>)/(<span class="number">88.9762</span>-<span class="number">0.00632</span>))</span><br><span class="line"><span class="built_in">print</span>((<span class="number">0.02729</span>-<span class="number">0.00632</span>)/(<span class="number">88.9762</span>-<span class="number">0.00632</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># out:</span></span><br><span class="line"><span class="comment"># 0.0</span></span><br><span class="line"><span class="comment"># 0.00023592253917842758</span></span><br><span class="line"><span class="comment"># 0.00023569774400055386</span></span><br></pre></td></tr></table></figure>
<h4 id="polynomialfeatures">PolynomialFeatures()</h4>
<p>再对波士顿数据进行归一化后，需要将13个特征两两相乘，添加更多的特征，需要用到多项式进行特征构造，即使用
PolynomialFeatures</p>
<p><a
href="https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.PolynomialFeatures.html">PolynomialFeatures官方文档</a></p>
<p>使用 sklearn.preprocessing.PolynomialFeatures
这个类可以进行特征的构造，构造的方式就是特征与特征相乘（自己与自己，自己与其他人），这种方式叫做使用多项式的方式。例如：有
a、b 两个特征，那么它的 2 次多项式的次数为 <span
class="math inline">\([1,a,b,a^{2},ab,b^{2}]\)</span>
<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[sklearn 的 PolynomialFeatures 的用法](https://www.cnblogs.com/liweiwei1419/p/9715702.html)
">[4]</span></a></sup>。</p>
<p>PolynomialFeatures 这个类有 3 个参数：</p>
<ul>
<li><code>degree</code>：控制多项式的次数；</li>
<li><code>interaction_only</code>：默认为 False，如果指定为
True，那么就不会有特征自己和自己结合的项，组合的特征中没有 <span
class="math inline">\(a^2\)</span> 和 <span
class="math inline">\(b^2\)</span> ；</li>
<li><code>include_bias</code>：默认为 True 。如果为 True
的话，那么结果中就会有 0 次幂项，即全为 1 这一列。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span>  PolynomialFeatures</span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>]])</span><br><span class="line">poly = PolynomialFeatures(degree=<span class="number">2</span>, include_bias=<span class="literal">False</span>) <span class="comment"># 实例化，指定2次多项式，去除0次幂项</span></span><br><span class="line">x_d = poly.fit_transform(x)  <span class="comment"># 导出特征构造的结果</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;特征构造前：\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;特征构造后：\n&#123;&#125;&quot;</span>.<span class="built_in">format</span>(x_d))</span><br><span class="line"></span><br><span class="line"><span class="comment"># out：</span></span><br><span class="line"><span class="comment"># 特征构造前：</span></span><br><span class="line"><span class="comment"># [[2 3]</span></span><br><span class="line"><span class="comment">#  [4 5]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征构造后：</span></span><br><span class="line"><span class="comment"># [[ 2.  3.  4.  6.  9.]</span></span><br><span class="line"><span class="comment">#  [ 4.  5. 16. 20. 25.]]</span></span><br></pre></td></tr></table></figure>
<h3 id="参考文章">参考文章</h3>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://hg95.github.io/sklearn-notes/Chapter3/preprocessing.MinMaxScaler%E7%94%A8%E6%B3%95.html">preprocessing.MinMaxScaler用法</a><a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/FrankieHello/article/details/79659111">使用sklearn进行对数据标准化、归一化以及将数据还原</a><a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:3">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/blogshinelee/article/details/102875044">为什么要做特征归一化/标准化？</a><a href="#fnref:3" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:4">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/liweiwei1419/p/9715702.html">sklearn
的 PolynomialFeatures 的用法</a><a href="#fnref:4" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>专业书笔记</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>皮尔森（逊）相关系数（Pearson Correlation Coefficient, PCC）</title>
    <url>/%E7%9A%AE%E5%B0%94%E6%A3%AE%EF%BC%88%E9%80%8A%EF%BC%89%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0%EF%BC%88pearson-correlation-coefficient-pcc%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="介绍">介绍</h3>
<h4 id="皮尔森相关系数">皮尔森相关系数</h4>
<p>皮尔森相关系数也称皮尔森积矩相关系数(Pearson product-moment
correlation coefficient)
，是一种线性相关系数，是最常用的一种相关系数。记为r，用来反映变量X和变量Y的线性相关程度，r
值介于-1到1之间，绝对值越大表明相关性越强。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[python 皮尔森相关系数（Pearson）](https://blog.csdn.net/small__roc/article/details/123519616)
">[1]</span></a></sup></p>
<p>适用连续变量。</p>
<p>相关系数 与相关程度一般划分为 - 0.8 - 1.0 极强相关 - 0.6 - 0.8 强相关
- 0.4 - 0.6 中等程度相关 - 0.2 - 0.4 弱相关 - 0.0 - 0.2
极弱相关或无相关</p>
<p>原假设：两者不存在相关性
P值小，即我们观察的样本（不存在相关性）发生的概率小，存在相关性的概率大，如果原假设成立即不存在相关性，那么我们这个样本就很极端很显著。</p>
<p><strong>相关系数绝对值越大，越相关，P值越小越相关。</strong></p>
<span id="more"></span>
<h4 id="线性回归的r平方">线性回归的R平方</h4>
<p>线性回归后得到的r平方和使用皮尔森相关求得的r再平方数值上面是一样的。<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[请问皮尔逊相关系数和r方是一种东西吗？](http://zhidao.baidu.com/question/493668152452206612/answer/2899388201)
">[3]</span></a></sup></p>
<p>R平方：决定系数，反应因变量的全部变异能通过回归关系被自变量解释的比例。<span
class="math inline">\(R^2\)</span>
值越接近1，吻合程度越高，越接近0，则吻合程度越低。<span
class="math inline">\(R^2\)</span> 作为相关系数，一般机器默认的是<span
class="math inline">\(R^2\)</span>
&gt;0.99，这样才具有可行度和线性关系。<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[线性回归r2代表什么](https://worktile.com/kb/ask/6156.html)
">[4]</span></a></sup></p>
<h3 id="使用">使用</h3>
<p><code>scipy.stats.pearsonr(x, y, *, alternative='two-sided')</code></p>
<p><strong>Parameters</strong></p>
<ul>
<li>x(N,) array_like Input
array.<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[scipy.stats.pearsonr](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html)
">[2]</span></a></sup></li>
<li>y(N,) array_like Input array.</li>
<li>alternative {‘two-sided’, ‘greater’, ‘less’}, optional</li>
</ul>
<p>Defines the alternative hypothesis. Default is ‘two-sided’. The
following options are available:</p>
<ul>
<li>‘two-sided’: the correlation(相关) is nonzero</li>
<li>‘less’: the correlation is negative (less than zero)</li>
<li>‘greater’: the correlation is positive (greater than zero)</li>
</ul>
<p><strong>Attributes</strong></p>
<ul>
<li><code>statistic</code> ：float，Pearson product-moment
<strong>correlation coefficient</strong>.</li>
<li><code>pvalue</code> ：float，The p-value associated with the chosen
alternative.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python实现</span></span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> pearsonr</span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">y = [<span class="number">1.2</span>,<span class="number">2.2</span>,<span class="number">3.1</span>,<span class="number">4.1</span>]</span><br><span class="line">result = pearsonr(x,y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pearson相关系数: &#123;:.6f&#125;&quot;</span>.<span class="built_in">format</span>(result.statistic))  <span class="comment"># result[0]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;P-Value: &#123;:.6f&#125;&quot;</span>.<span class="built_in">format</span>(result.pvalue))  <span class="comment"># result[1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># out:</span></span><br><span class="line"><span class="comment"># pearson相关系数: 0.999783</span></span><br><span class="line"><span class="comment"># P-Value: 0.000217</span></span><br></pre></td></tr></table></figure>
<p><code>numpy.corrcoef(x, y=None, rowvar=True, bias=&lt;no value&gt;, ddof=&lt;no value&gt;, *, dtype=None)</code></p>
<p>Return Pearson product-moment correlation
coefficients.<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[numpy.corrcoef](https://numpy.org/doc/stable/reference/generated/numpy.corrcoef.html)
">[5]</span></a></sup></p>
<p>这里计算的是特征与特征（行与行/列与列）的相关系数。</p>
<p><strong>Parameters</strong></p>
<ul>
<li><code>x</code>：array_like，A 1-D or 2-D array containing multiple
variables and observations.</li>
<li><code>y</code>：array_like, optional，An additional set of variables
and observations. y has the same shape as x.</li>
<li><code>rowvar</code>：bool, optional，If rowvar is True (default),
then <strong>each row represents a variable, with observations in the
columns</strong>. Otherwise, the relationship is transposed: each column
represents a variable, while the rows contain observations.
默认行为特征，列为样本；</li>
<li><code>dtype</code>：data-type, optional，Data-type of the result. By
default, the return data-type will have at least numpy.float64
precision.</li>
</ul>
<p>Returns: R：ndarray，The correlation coefficient matrix of the
variables.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>])</span><br><span class="line">b = pd.Series([<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">0</span>])</span><br><span class="line">c = pd.Series([<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">2</span>])</span><br><span class="line">x = np.vstack((a,b,c))</span><br><span class="line">r = np.corrcoef(x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x:\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r:\n&#123;&#125;&quot;</span>.<span class="built_in">format</span>(r))</span><br><span class="line"></span><br><span class="line"><span class="comment"># out:</span></span><br><span class="line"><span class="comment"># x:</span></span><br><span class="line"><span class="comment"># [[ 1  2  3  4  5  6  7  8  9 10]</span></span><br><span class="line"><span class="comment">#  [ 2  4  1  5  1  3  6  2  7  0]</span></span><br><span class="line"><span class="comment">#  [ 0  3  2  1  4  7  1  9  6  2]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># r:</span></span><br><span class="line"><span class="comment"># [[1.         0.10233683 0.47840854]</span></span><br><span class="line"><span class="comment">#  [0.10233683 1.         0.0242104 ]</span></span><br><span class="line"><span class="comment">#  [0.47840854 0.0242104  1.        ]]</span></span><br></pre></td></tr></table></figure>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302221100116.png" /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">b = np.array([[<span class="number">11</span>, <span class="number">25</span>, <span class="number">346</span>], [<span class="number">734</span>, <span class="number">48</span>, <span class="number">49</span>]])</span><br><span class="line">r = np.corrcoef(a,b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a:\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b:\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r:\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(r))</span><br><span class="line"></span><br><span class="line"><span class="comment"># out:</span></span><br><span class="line"><span class="comment"># a:</span></span><br><span class="line"><span class="comment"># [[1 2 3]</span></span><br><span class="line"><span class="comment">#  [4 5 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b:</span></span><br><span class="line"><span class="comment"># [[ 11  25 346]</span></span><br><span class="line"><span class="comment">#  [734  48  49]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># r:</span></span><br><span class="line"><span class="comment"># [[ 1.          1.          0.88390399 -0.86539304]</span></span><br><span class="line"><span class="comment">#  [ 1.          1.          0.88390399 -0.86539304]</span></span><br><span class="line"><span class="comment">#  [ 0.88390399  0.88390399  1.         -0.53057867]</span></span><br><span class="line"><span class="comment">#  [-0.86539304 -0.86539304 -0.53057867  1.        ]]</span></span><br></pre></td></tr></table></figure>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302221100313.png" /></p>
<h3 id="参考文献">参考文献</h3>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/small__roc/article/details/123519616">python
皮尔森相关系数（Pearson）</a><a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html">scipy.stats.pearsonr</a><a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:3">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://zhidao.baidu.com/question/493668152452206612/answer/2899388201">请问皮尔逊相关系数和r方是一种东西吗？</a><a href="#fnref:3" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:4">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://worktile.com/kb/ask/6156.html">线性回归r2代表什么</a><a href="#fnref:4" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:5">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://numpy.org/doc/stable/reference/generated/numpy.corrcoef.html">numpy.corrcoef</a><a href="#fnref:5" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Statistics</tag>
      </tags>
  </entry>
  <entry>
    <title>简谈 Python yield</title>
    <url>/%E7%AE%80%E8%B0%88-python-yield/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>带yield的函数是一个生成器（generator），而不是一个函数了，这个生成器有一个函数就是next函数，next就相当于“下一步”生成哪个数，这一次的next开始的地方是接着上一次的next停止的地方执行的。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[python中yield的用法详解——最简单，最清晰的解释](https://blog.csdn.net/mieleizhi0522/article/details/82142856)
">[1]</span></a></sup></p>
<p>先把yield看做“<strong>return</strong>”，在程序中返回某个值，返回之后程序就不再往下运行了。</p>
<p>程序执行遇到yield关键字，yield返回后面的值之后，程序暂停，直到再次调用next方法或send方法。</p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;starting...&quot;</span>)  <span class="comment"># 输出starting...</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = <span class="keyword">yield</span> <span class="number">4</span>     <span class="comment"># 返回4，停止运行,不赋值，res为none.</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;res:&quot;</span>,res) <span class="comment"># 输出res值</span></span><br><span class="line">g = foo()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g))  <span class="comment"># 从yield返回值，并停止</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">20</span>)   <span class="comment"># 输出20个星号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g))  <span class="comment"># 从上次停止的地方开始运行，直到遇到yield返回停止</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># out:</span></span><br><span class="line"><span class="comment"># starting...</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># ********************</span></span><br><span class="line"><span class="comment"># res: None</span></span><br><span class="line"><span class="comment"># 4</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;starting...&quot;</span>)   <span class="comment"># 输出starting...</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = <span class="keyword">yield</span> <span class="number">4</span>      <span class="comment"># 返回4，停止运行,不赋值，res为none.</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;res:&quot;</span>,res)  <span class="comment"># 输出res值</span></span><br><span class="line">g = foo()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g))   <span class="comment"># 从yield返回值，并停止</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">20</span>)    <span class="comment"># 输出20个星号</span></span><br><span class="line"><span class="built_in">print</span>(g.send(<span class="number">7</span>)) <span class="comment"># 从上次停止的地方开始运行，并将7赋值给res,直到遇到yield返回停止</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># out:</span></span><br><span class="line"><span class="comment"># starting...</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># ********************</span></span><br><span class="line"><span class="comment"># res: 7</span></span><br><span class="line"><span class="comment"># 4</span></span><br></pre></td></tr></table></figure>
<h3 id="参考文章">参考文章</h3>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/mieleizhi0522/article/details/82142856">python中yield的用法详解——最简单，最清晰的解释</a><a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>简谈array,reshape,dataframe</title>
    <url>/%E7%AE%80%E8%B0%88array-reshape-dataframe/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="array">array</h3>
<p>Numpy的数据结构是n维的数组对象，叫做ndarray。
NumPy数组一般是同质的（但有一种特殊的数组类型例外，它是异质的），即数组中的所有元素类型必须是一致的。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[NumPy中的ndarray与Pandas的Series和DataFrame之间的区别与转换](https://zhuanlan.zhihu.com/p/83660582)">[1]</span></a></sup></p>
<p>优点：</p>
<ul>
<li>内存块风格：ndarray中的所有元素的类型都是相同的，存储元素时内存可以连续，在科学计算中，Numpy的ndarray就可以省掉很多循环语句，代码使用方面比Python原生list简单的多。</li>
<li>ndarray支持并行化运算（向量化运算）</li>
<li>Numpy底层使用C语言编写，内部解除了GIL（全局解释器锁），其对数组的操作速度不受Python解释器的限制，效率远高于纯Python代码。</li>
</ul>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array([ <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>])  <span class="comment"># 16行，没有列</span></span><br><span class="line"></span><br><span class="line">y = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">8</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">5</span>]])  <span class="comment"># 2行4列</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x行:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(x.shape[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x维度:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(x.shape))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y行:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(y.shape[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y列:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(y.shape[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># out:</span></span><br><span class="line"><span class="comment"># x行:16</span></span><br><span class="line"><span class="comment"># x维度:(16,)</span></span><br><span class="line"><span class="comment"># y行:2</span></span><br><span class="line"><span class="comment"># y列:4</span></span><br></pre></td></tr></table></figure>
<h4 id="reshape">reshape（）</h4>
<p><a
href="https://numpy.org/doc/stable/reference/generated/numpy.reshape.html">官方文档</a></p>
<p><code>numpy.reshape(a, newshape, order='C')[source]</code></p>
<ul>
<li>a：数组--需要处理的数据<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[python基础之numpy.reshape详解](https://www.jianshu.com/p/fc2fe026f002)
">[3]</span></a></sup></li>
<li>newshape：新的格式--整数或整数数组，如(2,3)表示2行3列，新的形状应该与原来的形状兼容，即行数和列数相乘后等于a中元素的数量</li>
<li>order : 可选范围为{‘C’, ‘F’,
‘A’}。使用索引顺序读取a的元素，并按照索引顺序将元素放到变换后的的数组中。如果不进行order参数的设置，默认参数为C。</li>
</ul>
<p>（1）“C”指的是用类C写的读/索引顺序的元素，最后一个维度变化最快，第一个维度变化最慢。以二维数组为例，简单来讲就是<strong>横着读，横着写，优先读/写一行</strong>。</p>
<p>（2）“F”是指用FORTRAN类索引顺序读/写元素，最后一个维度变化最慢，第一个维度变化最快。<strong>竖着读，竖着写，优先读/写一列</strong>。注意，“C”和“F”选项不考虑底层数组的内存布局，只引用索引的顺序。</p>
<p>（3）“A”选项所生成的数组的效果与原数组a的数据存储方式有关，如果数据是按照FORTRAN存储的话，它的生成效果与”F“相同，否则与“C”相同。这里可能听起来有点模糊，下面会给出示例。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">82</span>,<span class="number">63</span>,<span class="number">91</span>,<span class="number">52</span>],[<span class="number">121</span>,<span class="number">345</span>,<span class="number">567</span>,<span class="number">987</span>]])</span><br><span class="line"></span><br><span class="line">x1 = x.reshape((<span class="number">2</span>,<span class="number">6</span>),order=<span class="string">&#x27;C&#x27;</span>)  <span class="comment"># 横着读，横着写，优先读/写一行</span></span><br><span class="line">x2 = x.reshape((<span class="number">2</span>,<span class="number">6</span>),order=<span class="string">&#x27;F&#x27;</span>)  <span class="comment"># 竖着读，竖着写，优先读/写一列</span></span><br><span class="line">x3 = x.reshape((<span class="number">2</span>,<span class="number">6</span>),order=<span class="string">&#x27;A&#x27;</span>)  <span class="comment"># 原数组FORTRAN存储，则竖着读，竖着写，优先读/写一列，否则横着读，横着写，优先读/写一行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x:\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x1:\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(x1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x2:\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(x2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x3:\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(x3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># out:</span></span><br><span class="line"><span class="comment"># x:</span></span><br><span class="line"><span class="comment"># [[  1   2   3   4]</span></span><br><span class="line"><span class="comment">#  [ 82  63  91  52]</span></span><br><span class="line"><span class="comment">#  [121 345 567 987]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x1:</span></span><br><span class="line"><span class="comment"># [[  1   2   3   4  82  63]</span></span><br><span class="line"><span class="comment">#  [ 91  52 121 345 567 987]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x2:</span></span><br><span class="line"><span class="comment"># [[  1 121  63   3 567  52]</span></span><br><span class="line"><span class="comment">#  [ 82   2 345  91   4 987]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x3:</span></span><br><span class="line"><span class="comment"># [[  1   2   3   4  82  63]</span></span><br><span class="line"><span class="comment">#  [ 91  52 121 345 567 987]]</span></span><br></pre></td></tr></table></figure>
<p>出现-1的话，有两种情况 -
<code>reshape(-1)</code>：原本数组有n个元素，返回一个n行无列的数组 -
<code>reshape(-1,n)</code>
n为任意数字，n为列数，-1会根据列数，自动计算出新数组的行数，再根据这个新的维度重新组合数组。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">82</span>,<span class="number">63</span>,<span class="number">91</span>,<span class="number">52</span>],[<span class="number">121</span>,<span class="number">345</span>,<span class="number">567</span>,<span class="number">987</span>]])</span><br><span class="line">y = x.reshape(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x:\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y:\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(y))  </span><br><span class="line"></span><br><span class="line"><span class="comment"># out:</span></span><br><span class="line"><span class="comment"># x:</span></span><br><span class="line"><span class="comment"># [[  1   2   3   4]</span></span><br><span class="line"><span class="comment">#  [ 82  63  91  52]</span></span><br><span class="line"><span class="comment">#  [121 345 567 987]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># y:</span></span><br><span class="line"><span class="comment"># [  1   2   3   4  82  63  91  52 121 345 567 987]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">82</span>,<span class="number">63</span>,<span class="number">91</span>,<span class="number">52</span>],[<span class="number">121</span>,<span class="number">345</span>,<span class="number">567</span>,<span class="number">987</span>]])</span><br><span class="line">y = x.reshape(-<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x:\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y:\n&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(y))  </span><br><span class="line"></span><br><span class="line"><span class="comment"># out:</span></span><br><span class="line"><span class="comment"># x:</span></span><br><span class="line"><span class="comment"># [[  1   2   3   4]</span></span><br><span class="line"><span class="comment">#  [ 82  63  91  52]</span></span><br><span class="line"><span class="comment">#  [121 345 567 987]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># y:</span></span><br><span class="line"><span class="comment"># [[  1   2]</span></span><br><span class="line"><span class="comment">#  [  3   4]</span></span><br><span class="line"><span class="comment">#  [ 82  63]</span></span><br><span class="line"><span class="comment">#  [ 91  52]</span></span><br><span class="line"><span class="comment">#  [121 345]</span></span><br><span class="line"><span class="comment">#  [567 987]]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是二维数据，6行1列，表示（6,1） </span></span><br><span class="line">[[ <span class="number">0.08540663</span>]</span><br><span class="line"> [ <span class="number">1.85038409</span>]</span><br><span class="line"> [-<span class="number">2.41396732</span>]</span><br><span class="line"> [ <span class="number">1.39196365</span>]</span><br><span class="line"> [-<span class="number">0.35908504</span>]</span><br><span class="line"> [ <span class="number">0.64526911</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是一维数据，6行无列（6，）</span></span><br><span class="line">[ <span class="number">0.08540663</span>  <span class="number">1.85038409</span> -<span class="number">2.41396732</span>  <span class="number">1.39196365</span> -<span class="number">0.35908504</span>  <span class="number">0.64526911</span>]</span><br></pre></td></tr></table></figure>
<p>上面二维变一维：reshape(-1) 一维变二维：reshape(-1,1)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[ <span class="number">0.08540663</span>],[ <span class="number">1.85038409</span>],[-<span class="number">2.41396732</span>],[ <span class="number">1.39196365</span>],[-<span class="number">0.35908504</span>],[ <span class="number">0.64526911</span>]]) <span class="comment"># a是二维数据</span></span><br><span class="line">b = a.reshape(-<span class="number">1</span>)  <span class="comment"># b是一维数据</span></span><br><span class="line">c = b.reshape(-<span class="number">1</span>,<span class="number">1</span>) <span class="comment"># c是二维数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a的维度：&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(a.shape))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b的维度：&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(b.shape))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(c))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c的维度：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(c.shape))</span><br><span class="line"></span><br><span class="line"><span class="comment"># a的维度：(6, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b：[ 0.08540663  1.85038409 -2.41396732  1.39196365 -0.35908504  0.64526911]</span></span><br><span class="line"><span class="comment"># b的维度：(6,)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c：[[ 0.08540663]</span></span><br><span class="line"><span class="comment">#  [ 1.85038409]</span></span><br><span class="line"><span class="comment">#  [-2.41396732]</span></span><br><span class="line"><span class="comment">#  [ 1.39196365]</span></span><br><span class="line"><span class="comment">#  [-0.35908504]</span></span><br><span class="line"><span class="comment">#  [ 0.64526911]]</span></span><br><span class="line"><span class="comment"># c的维度：(6, 1)</span></span><br></pre></td></tr></table></figure>
<h3 id="dataframe">dataframe</h3>
<p>Pandas有两个主要的数据结构，Series和DataFrame，记住大小写区分。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[numpy 和 pandas 的区别详解](https://benpaodewoniu.github.io/2018/12/17/python39/)
">[2]</span></a></sup></p>
<p>Series类似于一维数组，和Numpy的array接近，由一组数据和数据标签组成。数据标签有索引的作用。</p>
<p>Series是一维的数据结构，DataFrame是一个表格型的数据结构，它含有不同的列，每列都是不同的数据类型。我们可以把DataFrame看作Series组成的字典，它既有行索引也有列索引。</p>
<h3 id="dataframe转化成array">dataframe转化成array:</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df=df.values</span><br></pre></td></tr></table></figure>
<h3 id="array转化成dataframe">array转化成dataframe</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(df)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>]])</span><br><span class="line">b = pd.DataFrame(a)</span><br><span class="line">c = b.values</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))</span><br><span class="line"></span><br><span class="line"><span class="comment"># out:</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="参考文章">参考文章</h3>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zhuanlan.zhihu.com/p/83660582">NumPy中的ndarray与Pandas的Series和DataFrame之间的区别与转换</a><a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://benpaodewoniu.github.io/2018/12/17/python39/">numpy
和 pandas 的区别详解</a><a href="#fnref:2" rev="footnote"> ↩︎</a></span>
</li>
<li id="fn:3">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.jianshu.com/p/fc2fe026f002">python基础之numpy.reshape详解</a><a href="#fnref:3" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>类，模块，包，库区别？</title>
    <url>/%E7%B1%BB%EF%BC%8C%E6%A8%A1%E5%9D%97%EF%BC%8C%E5%8C%85%EF%BC%8C%E5%BA%93%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h4 id="一模块包库">一、模块，包，库</h4>
<p><strong>模块</strong>，英文为Modules，本质上是一个Python程序，以.py作为文件后缀。任何py文件都可以作为一个模块。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="python中的模块、库、包有什么区别？ - 风影忍着的回答 - 知乎 &lt;https://www.zhihu.com/question/30082392/answer/2030353759&gt;
">[1]</span></a></sup></p>
<p>大型项目需要多个模块，用<strong>包(package)</strong>
来管理模块。Python包，就是里面装了一个.py文件的文件夹。</p>
<p>Python包具有下面3个性质: 1.它实质上是一个文件夹;
2.该文件夹里面一定有_init_.py模块，其他的模块可以有也可以没有;
3.它的本质依然是模块，因此一个包里面还可以装其他的包；</p>
<p>严格来说Python中是没有<strong>库(library)</strong>
的，模块（module）和包（package）都是Python语法中有的概念，而库只是一个通俗的说法。平时说的<strong>库既可以是一个模块也可以是一个包</strong>。证据就是我们可以打开Python的安装目录，里面有一个叫做Lib的文件夹，打开这个文件夹之后就会发现很多“标准库”都在里面，我们常用的os库、random库、re库都在里面，这些“库”都是一个个的python文件即模块；而json、collections、sqlite3还有tkinter这些“库”又是一个一个的文件夹（里面都有__init__.py)也就是包</p>
<h4 id="二从类到包">二、从类到包</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n</span>):    <span class="comment"># 定义了一个方法__init__ </span></span><br><span class="line">		self.name = n</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):         <span class="comment"># 定义了一个方法speak</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>描述一个真实的对象一般有两种方式，他可以做什么（行为），他是什么样的（属性或特征）
Python中一个对象的特征也称为属性（attribute）。它所具有的行为也称为方法（method）。类是一个模板，具有相同的属性和行为。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单理解，不是很严谨</span></span><br><span class="line">我是XXX    <span class="comment"># 这是一个类</span></span><br><span class="line"></span><br><span class="line">我是周杰伦  <span class="comment"># 这是创建了一个实例（对象）周杰伦</span></span><br><span class="line">我是昆凌   <span class="comment"># 这是创建了另一个实例（对象）昆凌</span></span><br><span class="line"><span class="comment"># 两个对象具有相同的一般行为和特征</span></span><br></pre></td></tr></table></figure>
<p>我是周杰伦，self.name= JayChou
我和self是一样的，它是一个指向实例本身的引用，所以方法的定义必须包含形参self。self为前缀的变量可供类中所有方法使用。</p>
<p>首字母大写的是类，类中的函数称为方法
函数和方法本质是一样的，差别在于调用方法
<code>_init_</code>是特殊的方法，用类创建实例时，都会自动运行它</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Restaurant</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,<span class="built_in">type</span></span>):</span><br><span class="line">        self.restaurant_name = name</span><br><span class="line">        self.cuisine_type = <span class="built_in">type</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">describe_restaurant</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.restaurant_name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.cuisine_type&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_restaurant</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;the restaurant is opening&quot;</span>)</span><br><span class="line"></span><br><span class="line">restaurant = Restaurant(<span class="string">&quot;尚丹佳&quot;</span>,<span class="string">&quot;饭店&quot;</span>) <span class="comment"># 创建了一个restaurant的实例</span></span><br><span class="line">restaurant.describe_restaurant()</span><br><span class="line">restaurant.open_restaurant()</span><br></pre></td></tr></table></figure>
<p>一个模块（一个.py文件）中存储多个类
一个文件夹有一个mycar.py文件(一个模块)，该py文件中包含Car类和Battery类</p>
<p>导入模块中的一部分类： from 模块 import 类 form mycar import
Car，Battery</p>
<p>导入整个模块： import 模块</p>
<p>包（库）包含多个模块。</p>
<p>下载了一个gapminder包（库）：包里有如下内容：</p>
<p><img
src="https://gitee.com/starmus/image_typora/raw/master/Pasted%20image%2020221120223939.png" /></p>
<p>导入包后，要使用包的类或函数，都是直接<code>包名.函数</code>或者<code>包名.类</code>
也可以用 <code>import  包  as  别名</code> 去简化包名，方便一些。</p>
<p>比如这个包有3个模块（3个py文件）</p>
<p>init模块（该模块定义了一个属性）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .data <span class="keyword">import</span> _load_gapminder</span><br><span class="line"><span class="keyword">from</span> .version <span class="keyword">import</span> __version__</span><br><span class="line">gapminder = _load_gapminder()</span><br></pre></td></tr></table></figure>
<p>data模块(该模块定义了一个函数)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pkg_resources</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_load_gapminder</span>():</span><br><span class="line">    content = pkg_resources.resource_string(<span class="string">&#x27;gapminder&#x27;</span>, <span class="string">&#x27;gapminder.csv&#x27;</span>).decode()</span><br><span class="line">    <span class="keyword">return</span> pd.read_csv(StringIO(content))</span><br></pre></td></tr></table></figure>
<p>version模块（该模块定义了一个属性）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__version__ = <span class="number">0.1</span></span><br></pre></td></tr></table></figure>
<p>包的使用： 导入包后，包内的属性和函数就可以使用了</p>
<p><img
src="https://gitee.com/starmus/image_typora/raw/master/Pasted%20image%2020221120225544.png" /></p>
<p><img
src="https://gitee.com/starmus/image_typora/raw/master/Pasted%20image%2020221120225259.png" /></p>
<p><img
src="https://gitee.com/starmus/image_typora/raw/master/Pasted%20image%2020221120225615.png" /></p>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;">python中的模块、库、包有什么区别？
- 风影忍着的回答 - 知乎
<a href="https://www.zhihu.com/question/30082392/answer/2030353759">https://www.zhihu.com/question/30082392/answer/2030353759</a><a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>绘图的线型、颜色、标记</title>
    <url>/%E7%BB%98%E5%9B%BE%E7%9A%84%E7%BA%BF%E5%9E%8B%E3%80%81%E9%A2%9C%E8%89%B2%E3%80%81%E6%A0%87%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h5 id="绘图.plot">绘图：.plot()</h5>
<p><code>plt.plot()</code>：绘制点和线<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[matplotlib.pyplot.plot](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot)
">[1]</span></a></sup></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> randn</span><br><span class="line">plt.plot(randn(<span class="number">50</span>).cumsum(),<span class="string">&#x27;k--&#x27;</span>)   <span class="comment"># 生成50个正态分布的数</span></span><br></pre></td></tr></table></figure>
<ul>
<li>randn函数返回一个或一组样本，具有标准正态分布；</li>
<li>cumsum函数计算各行的累加值<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="&lt;https://blog.csdn.net/banana1006034246/article/details/78841461&gt;
">[2]</span></a></sup>；</li>
<li>in：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">a.cumsum()</span><br></pre></td></tr></table></figure>
<p>out：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array([ <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>])</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><code>k--</code> 是线性选项，指定黑色虚线；</p>
<h5
id="颜色color标记marker线型linestyle">颜色（color），标记(marker)，线型(linestyle)</h5>
<p>指定绿色虚线：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.plot(x,y,<span class="string">&#x27;g--&#x27;</span>)  <span class="comment"># 一样的效果，更简洁</span></span><br><span class="line">ax.plot(x,y,linestyle=<span class="string">&#x27;--&#x27;</span>,color=<span class="string">&#x27;g&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>指定黑色虚线，标记类型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(randn(<span class="number">50</span>).cumsum(),<span class="string">&#x27;ko--&#x27;</span>)</span><br><span class="line">plt.plot(randn(<span class="number">50</span>).cumsum(),color=<span class="string">&#x27;k&#x27;</span>,linestyle=<span class="string">&#x27;dashed&#x27;</span>,marker=<span class="string">&#x27;o&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>用字符串指定时，颜色一定在最前面，可规范顺序：color+marker+line
style</p>
<p>Color<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="&lt;http://math.loyola.edu/~loberbro/matlab/html/colorsInMatlab.html&gt;
">[3]</span></a></sup>：</p>
<table>
<thead>
<tr class="header">
<th>Long Name</th>
<th>Short Name</th>
<th>RGB Triplet</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>blue</td>
<td>b</td>
<td>[0,0,1]</td>
</tr>
<tr class="even">
<td>black</td>
<td>k</td>
<td>[0,0,0]</td>
</tr>
<tr class="odd">
<td>red</td>
<td>r</td>
<td>[1,0,0]</td>
</tr>
<tr class="even">
<td>green</td>
<td>g</td>
<td>[0,1,0]</td>
</tr>
<tr class="odd">
<td>yellow</td>
<td>y</td>
<td>[1,1,0]</td>
</tr>
<tr class="even">
<td>cyan</td>
<td>c</td>
<td>[0,1,1]</td>
</tr>
<tr class="odd">
<td>magenta</td>
<td>m</td>
<td>[1,0,1]</td>
</tr>
<tr class="even">
<td>white</td>
<td>w</td>
<td>[1,1,1]</td>
</tr>
</tbody>
</table>
<p>Marker<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="&lt;https://www.mathworks.com/help/matlab/creating_plots/specify-line-and-marker-appearance-in-plots.html&gt;
">[4]</span></a></sup>：</p>
<table>
<colgroup>
<col style="width: 22%" />
<col style="width: 38%" />
<col style="width: 39%" />
</colgroup>
<thead>
<tr class="header">
<th>Marker</th>
<th>Description</th>
<th>Resulting Marker</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"o"</td>
<td>Circle</td>
<td><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319310.png" /></td>
</tr>
<tr class="even">
<td>"+"</td>
<td>Plus sign</td>
<td><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319423.png" /></td>
</tr>
<tr class="odd">
<td>"*"</td>
<td>Asterisk</td>
<td><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319507.png" /></td>
</tr>
<tr class="even">
<td>"."</td>
<td>Point</td>
<td><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319579.png" /></td>
</tr>
<tr class="odd">
<td>"x"</td>
<td>Cross</td>
<td><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319647.png" /></td>
</tr>
<tr class="even">
<td>"_"</td>
<td>Horizontal line</td>
<td><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319704.png" /></td>
</tr>
<tr class="odd">
<td>" | "</td>
<td>Vertical line</td>
<td><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319799.png" /></td>
</tr>
<tr class="even">
<td>"square"</td>
<td>Square</td>
<td><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319868.png" /></td>
</tr>
<tr class="odd">
<td>"diamond"</td>
<td>Diamond</td>
<td><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319941.png" /></td>
</tr>
<tr class="even">
<td>"^"</td>
<td>Upward-pointing triangle</td>
<td><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319014.png" /></td>
</tr>
<tr class="odd">
<td>"v"</td>
<td>Downward-pointing triangle</td>
<td><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319087.png" /></td>
</tr>
<tr class="even">
<td>"&gt;"</td>
<td>Right-pointing triangle</td>
<td><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319188.png" /></td>
</tr>
<tr class="odd">
<td>"&lt;"</td>
<td>Left-pointing triangle</td>
<td><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319266.png" /></td>
</tr>
<tr class="even">
<td>"pentagram"</td>
<td>Pentagram</td>
<td><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319344.png" /></td>
</tr>
<tr class="odd">
<td>"hexagram"</td>
<td>Hexagram</td>
<td><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319433.png" /></td>
</tr>
</tbody>
</table>
<p>Line Style<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="&lt;https://www.mathworks.com/help/matlab/creating_plots/specify-line-and-marker-appearance-in-plots.html&gt;
">[4]</span></a></sup>：</p>
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 18%" />
<col style="width: 69%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Line Style</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Resulting Line</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">"-"</td>
<td style="text-align: left;">Solid line</td>
<td style="text-align: left;"><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319503.png" /></td>
</tr>
<tr class="even">
<td style="text-align: left;">"- -"</td>
<td style="text-align: left;">Dashed line</td>
<td style="text-align: left;"><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319575.png" /></td>
</tr>
<tr class="odd">
<td style="text-align: left;">":"</td>
<td style="text-align: left;">Dotted line</td>
<td style="text-align: left;"><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319674.png" /></td>
</tr>
<tr class="even">
<td style="text-align: left;">"-."</td>
<td style="text-align: left;">Dash-dotted line</td>
<td style="text-align: left;"><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319753.png" /></td>
</tr>
</tbody>
</table>
<p>Draw Style：在线型图中，可按非线性插值；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(randn(<span class="number">50</span>),<span class="string">&#x27;ko--&#x27;</span>,drawstyle=<span class="string">&#x27;steps-post&#x27;</span>,label=<span class="string">&#x27;steps-post&#x27;</span>)  </span><br><span class="line">plt.legend(loc=<span class="string">&quot;best&quot;</span>)  <span class="comment"># 给图像加图例</span></span><br></pre></td></tr></table></figure>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319819.png" /></p>
<p>目前有三种可选：steps、steps-mid、steps-post 具体差别还待探究；</p>
<p><img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319919.png" />
该图出处：<a
href="https://matplotlib.org/stable/gallery/lines_bars_and_markers/step_demo.html"
class="uri">https://matplotlib.org/stable/gallery/lines_bars_and_markers/step_demo.html</a></p>
<h5 id="参考文章">参考文章</h5>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot">matplotlib.pyplot.plot</a><a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/banana1006034246/article/details/78841461">https://blog.csdn.net/banana1006034246/article/details/78841461</a><a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:3">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://math.loyola.edu/~loberbro/matlab/html/colorsInMatlab.html">http://math.loyola.edu/~loberbro/matlab/html/colorsInMatlab.html</a><a href="#fnref:3" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:4">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.mathworks.com/help/matlab/creating_plots/specify-line-and-marker-appearance-in-plots.html">https://www.mathworks.com/help/matlab/creating_plots/specify-line-and-marker-appearance-in-plots.html</a><a href="#fnref:4" rev="footnote">
↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>解决npm下载慢问题</title>
    <url>/%E8%A7%A3%E5%86%B3npm%E4%B8%8B%E8%BD%BD%E6%85%A2%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h5 id="npm镜像">npm镜像：</h5>
<p>淘宝：<code>http://registry.npm.taobao.org</code></p>
<p>腾讯云：<code>http://mirrors.cloud.tencent.com/npm/</code></p>
<p>华为云：<code>https://mirrors.huaweicloud.com/repository/npm/</code></p>
<span id="more"></span>
<h5 id="下载时临时使用淘宝镜像">下载时临时使用淘宝镜像</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install xxx --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<hr />
<h5 id="永久更改镜像">永久更改镜像</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>再执行 <code>npm config get registry</code> 返回
<code>http://registry.npm.taobao.org</code> 则设置成功</p>
<hr />
<h5 id="通过使用淘宝定制的cnpm安装">通过使用淘宝定制的cnpm安装：</h5>
<ul>
<li>安装cnpm</li>
</ul>
<p><code>npm install -g cnpm --registry=https://registry.npmmirror.com</code></p>
<ul>
<li>使用cnpm</li>
</ul>
<p><code>cnpm install xxx</code></p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>设置 Next 主题支持 Latex 渲染</title>
    <url>/%E8%AE%BE%E7%BD%AE-next-%E4%B8%BB%E9%A2%98%E6%94%AF%E6%8C%81-latex-%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>需求：让 hexo 的 next 主题支持渲染 LaTeX 语法的数学公式。</p>
<p>环境： <code>hexo version</code>即可查看hexo版本； <img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301252237479.png"
alt="img" /></p>
<p>查看<code>theme/next/package.json</code>即可查看next版本； <img
src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301252237584.png"
alt="img" /></p>
<span id="more"></span>
<p>步骤：</p>
<p>1、Powershell :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-rendered-marked</span><br><span class="line">npm install hexo-<span class="built_in">filter</span>-mathjax --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>2、修改next主题配置文件，搜索math，找到mathjax，修改为true；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">	enable: true</span><br></pre></td></tr></table></figure>
<p>3、在文章的 front-matter 中添加 <code>mathjax: true</code>
，该文章即可渲染[<a
href="app://obsidian.md/index.html#fn-1-66fd1567c623a948">1]</a>；建议将
<code>mathjax: true</code> 写入 <code>\scaffolds</code> 的 post.md
文件中的 front-matter，以后每篇文章都会自动添加，自动渲染。</p>
<h3 id="参考文章">参考文章</h3>
<hr />
<ol type="1">
<li><a
href="https://roro4ever.github.io/2019/12/01/hexo-Next主题渲染-latex-公式的配置方法/hexo-next主题渲染-latex-公式的配置方法/">Hexo
Next主题渲染 Latex 公式的配置方法</a><a
href="app://obsidian.md/index.html#fnref-1-66fd1567c623a948">↩︎</a></li>
</ol>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>配置word版本控制</title>
    <url>/%E9%85%8D%E7%BD%AEword%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h4 id="下载git软件和pandoc软件">下载Git软件和Pandoc软件</h4>
<p>按照官网下载即可</p>
<h4 id="配置git">配置Git</h4>
<p>命令 <code>cd</code> 直接进入用户目录，找到文件
<code>.gitconfig</code>，使用文本编辑器打开它，加入下面的内容，然后保存<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[如何对 Word 文件进行「纯文本式」版本控制？ | TomBen (retompi.com)](https://retompi.com/archived-blog/posts/2020/01/16/version-control-for-word-files-like-plain-text.html#安装-git-与-pandoc)
">[1]</span></a></sup>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[diff <span class="string">&quot;pandoc&quot;</span>]</span><br><span class="line">   textconv=pandoc --to=markdown</span><br><span class="line">   prompt = <span class="literal">false</span></span><br><span class="line"> [<span class="built_in">alias</span>]</span><br><span class="line">   wdiff = diff --word-diff=color --unified=1</span><br></pre></td></tr></table></figure>
<p>新建一个文件夹，以后Word文件均放置于此，右键git bash here
，初始化仓库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建 Git 仓库</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>在Word 目录下，新建一个文件
<code>.gitattributes</code>，写入下面的内容，然后保存。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*.docx diff=pandoc</span><br></pre></td></tr></table></figure>
<p>现在就可以再该目录下新建word文件了，最后保存的时候，记得用Git Bash
提交到本地仓库，有大修改的时候就commit一次，有Github或Gitee账号，可以上传到账号上。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add . # 添加文件</span><br><span class="line">git commit -a -m &quot;备注信息&quot;  # 设置-a，修改文件后不需要再执行git add命令  </span><br></pre></td></tr></table></figure>
<h4 id="参考文章">参考文章</h4>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://retompi.com/archived-blog/posts/2020/01/16/version-control-for-word-files-like-plain-text.html#%E5%AE%89%E8%A3%85-git-%E4%B8%8E-pandoc">如何对
Word 文件进行「纯文本式」版本控制？ | TomBen
(retompi.com)</a><a href="#fnref:1" rev="footnote"> ↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <tags>
        <tag>Git</tag>
        <tag>word</tag>
        <tag>Pandoc</tag>
      </tags>
  </entry>
  <entry>
    <title>P2七校巡回演讲002图像基础知识和规范</title>
    <url>/p2%E4%B8%83%E6%A0%A1%E5%B7%A1%E5%9B%9E%E6%BC%94%E8%AE%B2002%E5%9B%BE%E5%83%8F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8C%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401141655230.png" alt="" style="zoom:20%;" /></p>
<p>ppt绘制的图片，可导出位图、矢量图（emf、wmf）</p>
<span id="more"></span>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401142211627.png" alt="" style="zoom:20%;" /></p>
<p>颜色种类对应位深度</p>
<p>查看图片信息：</p>
<ul>
<li><p>windows：右键--属性--详细信息</p></li>
<li><p>Photoshop：</p>
<ul>
<li><p>图像--图像大小：看dpi、实际尺寸</p></li>
<li><p>图像--模式（勾选rgb,8位通道），三种通道，每个通道有<code>2^8</code>种颜色，总的颜色种类有（<code>2^8</code>）×（<code>2^8</code>）×（<code>2^8</code>）=<code>2^24</code></p></li>
<li><p>文件--存储为tiff：lzw压缩投稿</p>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401142223031.png" alt="" style="zoom:25%;" /></p></li>
</ul></li>
</ul>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401142218219.png" alt="" style="zoom:20%;" /></p>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401142223062.png" alt="" style="zoom:20%;" /></p>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401142223967.png" alt="" style="zoom:20%;" /></p>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401142228198.png" alt="" style="zoom:20%;" /></p>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401142232244.png" alt="" style="zoom:20%;" /></p>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401142235076.png" alt="" style="zoom:20%;" /></p>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401142236595.png" alt="" style="zoom:20%;" /></p>
<center>
300dpi对最小图片要求像素354
</center>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401142238968.png" alt="" style="zoom:20%;" /></p>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401142240705.png" alt="" style="zoom:20%;" /></p>
<p>等宽字体：</p>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401142242708.png" alt="" style="zoom:25%;" /></p>
<p>第三种字体symbol:</p>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401142244649.png" alt="" style="zoom:20%;" /></p>
]]></content>
      <tags>
        <tag>科研绘图</tag>
      </tags>
  </entry>
  <entry>
    <title>P1科研四部曲：论文作图、数据处理、大学技巧、实验图等</title>
    <url>/p1%E7%A7%91%E7%A0%94%E5%9B%9B%E9%83%A8%E6%9B%B2%EF%BC%9A%E8%AE%BA%E6%96%87%E4%BD%9C%E5%9B%BE%E3%80%81%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E3%80%81%E5%A4%A7%E5%AD%A6%E6%8A%80%E5%B7%A7%E3%80%81%E5%AE%9E%E9%AA%8C%E5%9B%BE%E7%AD%89/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>笔记来源：https://www.bilibili.com/video/BV1F4411e7nw?p=1&amp;vd_source=9f04b059fdee5024fd04678f53de10ad</p>
<span id="more"></span>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401141651883.png" alt="" style="zoom:20%;" /></p>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401141651824.png" alt="" style="zoom:20%;" /></p>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401141651577.png" alt="" style="zoom:20%;" /></p>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401141651140.png" alt="" style="zoom:20%;" /></p>
<p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202305/202401141651451.png" alt="" style="zoom:20%;" /></p>
]]></content>
      <tags>
        <tag>科研绘图</tag>
      </tags>
  </entry>
  <entry>
    <title>图片基本概念</title>
    <url>/%E5%85%B3%E4%BA%8E%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="图片基本概念">图片基本概念</h3>
<h4 id="位图与矢量图">位图与矢量图</h4>
<p>图片格式主要分为位图（Bitmap）和矢量图（Vector）<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[【果断收藏】SCI期刊的图片接收要求！](https://mp.weixin.qq.com/s?__biz=MzIyODA4NDE1OA==&amp;mid=2247487677&amp;idx=1&amp;sn=25d77ffdd7e7787b292e0c6bb037f493&amp;chksm=e856006cdf21897a7c35607978634b635b4452ae6c8b955d095352a84f7892f83a021242c703&amp;scene=21#wechat_redirect)
">[1]</span></a></sup>。</p>
<ul>
<li><p><strong>位图</strong>：（也可叫栅格图、点阵图）由像素点构成，放大之后可见如马赛克般的像素小点。位图常为.psd、.tiff、.jpg、.png、.bmp。处理位图时，输出图像的质量取决于处理过程开始时设置的分辨率高低。</p></li>
<li><p><strong>矢量图</strong>：任意放大但清晰度不变，拥有无限的分辨率。矢量图常为.wmf、.emf、.cdx、.ai、.eps、.svg、.pdf、文档。</p></li>
</ul>
<span id="more"></span>
<p>目前多数期刊要求图片格式为TIFF位图或者EPS矢量图，并且通常要求形成独立文档。因此，建议科研图片保存为TIFF位图或者EPS矢量图。</p>
<p><img src="C:\Users\19468\AppData\Roaming\Typora\typora-user-images\image-20240114151328331.png" alt="" style="zoom: 25%;" /></p>
<p>Tip1：建议大家保存图形、表、示意图或其他线图为矢量图。保存照片、复杂的插图为位图。</p>
<p>Tip
2：在图表转换成图片时，将图片格式设定为TIFF格式的位图或EPS的矢量图形式。</p>
<p>Tip 3：如何将Excel中的图表转成高清晰度的位图呢？
将Excel图表转存为PDF文档，PDF文档可以通过Adobe
Illustrator或Photoshop打开后再转存为TIFF文档，稍微不同的是，使用Adobe
Illustrator转存成TIFF文档才指定分辨率，而使用Photoshop打开PDF文档时就会询问选择什么分辨率。</p>
<h4 id="像素pxpixel">像素px（Pixel）</h4>
<p>它就是一个点，一个像素点，是屏幕上显示数据的最基本的点，单个像素没有具体的尺寸概念。相同尺寸的显示器下，像素越多，单个像素的尺寸就越小，屏幕越清晰；像素越少，单个像素的尺寸就越大，屏幕越模糊。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[【知识点】不明白px、pt、ppi、dpi、位图、矢量图？该收藏这篇文章了！](https://zhuanlan.zhihu.com/p/434250550)
">[2]</span></a></sup>比如某张图片像素数目 (Pixels)：宽 1024 px, 768
px</p>
<h4 id="ptpoint">pt（Point）</h4>
<p>是一个点，一个专用的印刷单位“磅”，大小为1/72英寸=0.35mm，大小固定。</p>
<h4 id="ppipixels-per-inch">ppi（Pixels per inch）</h4>
<p>图像分辨率，一个密度单位，指每英寸所包含的像素数目,ppi越大，像素越多，图片显示越清晰。</p>
<h4 id="dpidots-per-inch">dpi（Dots per inch）</h4>
<p>打印分辨率，一个密度单位，指每英寸点数，是一个量度单位，用于点阵数码影像，指每一英寸长度中，取样、可显示或输出点的数目。「dot」一般也翻译为「点」，但此点（dot）非彼点（point）。dot
是用在打印设备上，所以它描绘的是打印精度，1英寸所能打印的墨点数量，值越大，印刷越精细。大部分期刊要求的是300dpi及以上的分辨率，之所以这样要求，是因为最后文章是要用于出版的，而杂志的出版方式以纸质要求为准。dpi是打印机通过墨粉成滴将图像呈现在纸张上的一种表述方式。当杂志只有在线形式时，一般要求的就是ppi，而大多杂志都是有纸质刊物的，所以都要求的是dpi。</p>
<p><strong>实际尺寸 (Print Size)</strong>: 厘米 cm，英尺
inch。1英寸为2.54 厘米</p>
<p>占用磁盘空间：几兆 M, 几 k</p>
<p>常见换算：</p>
<ul>
<li><p>屏幕上的显示：像素量px=像素密度ppi*屏幕尺寸inch</p></li>
<li><p>纸张上的打印：像素数目（垂直或水平）=分辨率×实际尺寸<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span
class="hint--top hint--error hint--medium hint--rounded hint--bounce"
aria-label="[【4. 论文作图之图片的大小：像素数目、分辨率的正确调整方法】](https://www.bilibili.com/video/BV1Ke4y1e7Ve/?share_source=copy_web&amp;vd_source=7f2a81e814313c699f856c2ec72be7d9) ↩
">[3]</span></a></sup> Pixels=Resolution (DPI) X Print size (in
inches)</p></li>
</ul>
<h4 id="图片大小">图片大小</h4>
<p>期刊对图片的物理大小会有明确的说明，一般只会规定图片的宽度，图片可设定为单栏、1.5栏或双栏图片。</p>
<p><img src="C:\Users\19468\AppData\Roaming\Typora\typora-user-images\image-20240113215842956.png" alt="" style="zoom:22%;" /></p>
<h4 id="颜色模式">颜色模式</h4>
<p>彩色图片的颜色模式一般分为两种：RGB和CMYK。简单来说，RGB用于显示屏上，CMYK用于印刷中，RGB图比CMYK图色彩更亮丽，表现效果更好。根据以上整理的各期刊的要求来看，绝大多数期刊要求提供RGB模式的图片，这大概是因为图片由RGB转变为CMYK模式较易，但反过来转变的话，图像的表现力会下降。</p>
<p>使用绘图软件“新建文档”时就选择RGB模式，软件默认的8位/信道足够达到大多期刊的要求了，图片另存时也优先选择RGB模式。如果杂志特别要求提供CMYK模式的图片，RGB模式也很方便转换为CMYK模式！</p>
<p><img src="C:\Users\19468\AppData\Roaming\Typora\typora-user-images\image-20240114152234971.png" alt="" style="zoom:67%;" /></p>
<h4 id="图片的格式转换">图片的格式转换</h4>
<p>论文提交时，一般要求上传图片的格式为 jpg 或 tif 或 eps,
参考杂志的投稿说明。 图片的格式转换方法</p>
<ul>
<li>方法 1: PowerPoint 中的“图片另存为”</li>
<li>方法 2: Photoshop 中的“另存为”</li>
<li>方法 3: Windowsi 画图程序中的“另存为”</li>
</ul>
<p>矢量pdf转emf：https://convert2.cn/pdf-to-emf</p>
<h3 id="参考文章">参考文章</h3>
<div id="footnotes">
<hr>
<div id="footnotelist">
<ol style="list-style: none; padding-left: 0; margin-left: 40px">
<li id="fn:1">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://mp.weixin.qq.com/s?__biz=MzIyODA4NDE1OA==&amp;mid=2247487677&amp;idx=1&amp;sn=25d77ffdd7e7787b292e0c6bb037f493&amp;chksm=e856006cdf21897a7c35607978634b635b4452ae6c8b955d095352a84f7892f83a021242c703&amp;scene=21#wechat_redirect">【果断收藏】SCI期刊的图片接收要求！</a><a href="#fnref:1" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:2">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zhuanlan.zhihu.com/p/434250550">【知识点】不明白px、pt、ppi、dpi、位图、矢量图？该收藏这篇文章了！</a><a href="#fnref:2" rev="footnote">
↩︎</a></span>
</li>
<li id="fn:3">
<span
style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span
style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.bilibili.com/video/BV1Ke4y1e7Ve/?share_source=copy_web&amp;vd_source=7f2a81e814313c699f856c2ec72be7d9">【4.
论文作图之图片的大小：像素数目、分辨率的正确调整方法】</a>
↩︎<a href="#fnref:3" rev="footnote"> ↩︎</a></span>
</li>
</ol>
</div>
</div>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>矢量图</tag>
        <tag>科研绘图</tag>
      </tags>
  </entry>
</search>

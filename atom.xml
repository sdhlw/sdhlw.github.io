<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jay&#39;s Blog</title>
  
  
  <link href="https://www.sdhlw.top/atom.xml" rel="self"/>
  
  <link href="https://www.sdhlw.top/"/>
  <updated>2023-02-02T09:49:59.190Z</updated>
  <id>https://www.sdhlw.top/</id>
  
  <author>
    <name>Jay Chou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python机器学习基础教程【第一章】</title>
    <link href="https://www.sdhlw.top/python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E3%80%90%E7%AC%AC%E4%B8%80%E7%AB%A0%E3%80%91/"/>
    <id>https://www.sdhlw.top/python%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E3%80%90%E7%AC%AC%E4%B8%80%E7%AB%A0%E3%80%91/</id>
    <published>2023-02-02T09:43:19.000Z</published>
    <updated>2023-02-02T09:49:59.190Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本书的附加代码可以在 GitHub 下载：<a href="https://github.com/amueller/introduction_to_ml_with_python">https://github.com/amueller/introduction_to_ml_with_python</a></p><p>监督学习算法（supervised learning algorithm）<br>无监督学习算法（unsupervised learning algorithm）</p><p>在机器学习中，这里的每个实体或每一行被称为一个样本（sample）或数据点，而每一列（用来描述这些实体的属性）则被称为特征（feature）。</p><p>如何构建良好的数据表征，这被称为特征提取（feature extraction）或特征工程（feature engineering）</p><p><strong>scikit-learn</strong> 依赖于另外两个 Python 包：NumPy （Python 科学计算的基础包之一）和 SciPy（ Python 中用于科学计算的函数集合）。<br>算法详细文档：<a href="https://scikit-learn.org/stable/index.html">https://scikit-learn.org/stable/index.html</a><br>用户指南：<a href="http://scikit-learn.org/stable/user_guide.html">http://scikit-learn.org/stable/user_guide.html</a></p><span id="more"></span><p>若想绘图和进行交互式开发，还应该安装 matplotlib（Python 主要的科学绘图库）、IPython 和 Jupyter Notebook（在浏览器中运行代码的交互环境）。</p><p><strong>pandas</strong> 是用于处理和分析数据的 Python 库。它基于一种叫作 DataFrame 的数据结构，这种数据结构模仿了 R 语言中的 DataFrame。</p><p><strong>mglearn</strong> 库是我们为本书编写的实用函数库，以免将代码清单与绘图和数据加载的细节混在一起。</p><h4 id="第一个应用"><a href="#第一个应用" class="headerlink" title="第一个应用"></a>第一个应用</h4><h5 id="1、了解数据"><a href="#1、了解数据" class="headerlink" title="1、了解数据"></a>1、了解数据</h5><p>in：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line">iris_dataset = load_iris()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Keys of iris_dataset: \n&#123;&#125;&quot;</span>.<span class="built_in">format</span>(iris_dataset.keys()))</span><br></pre></td></tr></table></figure><p>out：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Keys of iris_dataset: dict_keys([<span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;target&#x27;</span>, <span class="string">&#x27;frame&#x27;</span>, <span class="string">&#x27;target_names&#x27;</span>, <span class="string">&#x27;DESCR&#x27;</span>, <span class="string">&#x27;feature_names&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>, <span class="string">&#x27;data_module&#x27;</span>])</span><br></pre></td></tr></table></figure><ul><li>DESCR 键对应的值是数据集的简要说明</li><li>target_names 键对应的值是一个字符串数组，里面包含我们要预测的花的品种</li><li>feature_names 键对应的值是一个字符串列表，对每一个特征进行了说明</li><li>data 里面是花萼长度、花萼宽度、花瓣长度、花瓣宽度的测量数据，格式为 NumPy 数组,data 数组的每一行对应一朵花，列代表每朵花的四个测量数据，数组中包含 150 朵不同的花的测量数据。</li><li>target 是一维数组，每朵花对应其中一个数据，0 代表 setosa，1 代表 versicolor，2 代表 virginica</li></ul><h5 id="2、划分训练集和测试集"><a href="#2、划分训练集和测试集" class="headerlink" title="2、划分训练集和测试集"></a>2、划分训练集和测试集</h5><p>机器学习中的个体叫作样本（sample），其属性叫作特征（feature）。data 数组的形状（shape）是样本数乘以特征数。</p><p>一部分数据用于构建机器学习模型，叫作训练数据（training data）或训练<br>集（training set）。其余的数据用来评估模型性能，叫作测试数据（test data）、测试集（test set）或留出集（hold-out set）。</p><p><strong>train_test_split</strong> 函数可以打乱数据集并进行拆分。</p><p>scikit-learn 中的数据通常用大写的 X 表示，而标签用小写的 y 表示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 划分训练集和测试集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(iris_dataset[<span class="string">&#x27;data&#x27;</span>], iris_dataset[<span class="string">&#x27;target&#x27;</span>], random_state=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302021528408.png"></p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302021528467.png"></p><ul><li>random_state 参数指定了随机数生成器的种子，保证这行代码的输出始终相同；</li></ul><h5 id="3、观察数据"><a href="#3、观察数据" class="headerlink" title="3、观察数据"></a>3、观察数据</h5><p>如果不用机器学习能不能轻松完成任务，或者需要的信息有没有包含在数据中？检查数据也是发现异常值和特殊值的好方法。</p><p>检查数据的最佳方法之一就是将其可视化。</p><p>一种可视化方法是绘制<strong>散点图（scatter plot）</strong>，用这种方法难以对多于 3 个特征的数据集作图。</p><p>解决这个问题的一种方法是绘制<strong>散点图矩阵（pair plot）</strong>，从而可以两两查看所有的特征。散点图矩阵无法同时显示所有特征之间的关系，所以这种可视化方法可能无法展示数据的某些有趣内容。</p><p>训练集中特征的散点图矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用X_train中的数据创建DataFrame</span></span><br><span class="line"><span class="comment"># 利用iris_dataset.feature_names中的字符串对数据列进行标记</span></span><br><span class="line">iris_dataframe = pd.DataFrame(X_train, columns=iris_dataset.feature_names)</span><br><span class="line"><span class="comment"># 利用DataFrame创建散点图矩阵，按y_train着色</span></span><br><span class="line">grr = pd.scatter_matrix(iris_dataframe, c=y_train, figsize=(<span class="number">15</span>, <span class="number">15</span>), marker=<span class="string">&#x27;o&#x27;</span>,</span><br><span class="line"> hist_kwds=&#123;<span class="string">&#x27;bins&#x27;</span>: <span class="number">20</span>&#125;, s=<span class="number">60</span>, alpha=<span class="number">.8</span>)</span><br></pre></td></tr></table></figure><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302021528536.png" alt="|500"></p><p>绘制散点图矩阵函数： pandas的scatter_matrix。<br>版本较新换成：pd.plotting.scatter_matrix</p><p><code>pandas.DataFrame( data, index, columns, dtype, copy)</code></p><ul><li>data：一组数据(ndarray、series, map, lists, dict 等类型)<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Pandas 数据结构 - DataFrame](https://www.runoob.com/pandas/pandas-dataframe.html)">[1]</span></a></sup>。</li><li>index：索引值，或者可以称为行标签。</li><li>columns：列标签，默认为 RangeIndex (0, 1, 2, …, n) 。</li><li>dtype：数据类型。</li><li>copy：拷贝数据，默认为 False。</li></ul><p><code>scatter_matrix(frame, alpha=0.5, c,figsize=None, ax=None, diagonal=&#39;hist&#39;, marker=&#39;.&#39;, density_kwds=None,hist_kwds=None, range_padding=0.05, **kwds)</code></p><ul><li>frame，pandas dataframe对象<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[pandas库scatter_matrix绘图可视化参数详解](https://blog.csdn.net/wangxingfan316/article/details/80033557)">[3]</span></a></sup></li><li>alpha， 图像透明度，一般取(0,1]</li><li>figsize，以英寸为单位的图像大小，一般以元组 (width, height) 形式设置</li><li>ax，可选一般为none</li><li>diagonal，必须且只能在{‘hist’, ‘kde’}中选择1个，’hist’表示直方图(Histogram plot),’kde’表示核密度估计(Kernel Density Estimation)；该参数是scatter_matrix函数的关键参数</li><li>marker。Matplotlib可用的标记类型，如’.’，’,’，’o’等<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[绘图的线型、颜色、标记](https://www.sdhlw.top/%E7%BB%98%E5%9B%BE%E7%9A%84%E7%BA%BF%E5%9E%8B%E3%80%81%E9%A2%9C%E8%89%B2%E3%80%81%E6%A0%87%E8%AE%B0/)">[2]</span></a></sup></li><li>density_kwds。(other plotting keyword arguments，可选)，与kde相关的字典参数</li><li>hist_kwds。与hist相关的字典参数</li><li>range_padding。(float, 可选)，图像在x轴、y轴原点附近的留白(padding)，该值越大，留白距离越大，图像远离坐标原点</li><li>kwds。与scatter_matrix函数本身相关的字典参数</li><li>c。颜色</li></ul><h5 id="4、构建模型：k近邻算法"><a href="#4、构建模型：k近邻算法" class="headerlink" title="4、构建模型：k近邻算法"></a>4、构建模型：k近邻算法</h5><p>k 近邻分类器算法对一个新的数据点做出预测，算法会在训练集中寻找与这个新数据点距离最近的数据点，然后将找到的数据点的标签赋值给这个新数据点。</p><p>k 近邻算法中 k 的含义是，我们可以考虑训练集中与新数据点最近的任意 k 个邻居（比如说，距离最近的 3 个或 5 个邻居），而不是只考虑最近的那一个。然后，我们可以用这些邻居中数量最多的类别做出预测。</p><p>scikit-learn 中所有的机器学习模型都在各自的类中实现，这些类被称为 Estimator类。k 近邻分类算法是在 neighbors 模块的KNeighborsClassifier 类中实现的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line">knn = KNeighborsClassifier(n_neighbors=<span class="number">1</span>)  <span class="comment"># 实例化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于训练集来构建模型</span></span><br><span class="line">knn.fit(X_train, y_train)</span><br></pre></td></tr></table></figure><p>fit 方法返回的是 knn 对象本身并做原处修改，因此我们得到了分类器的字符串表示。</p><h5 id="5、预测"><a href="#5、预测" class="headerlink" title="5、预测"></a>5、预测</h5><p>in：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X_new = np.array([[<span class="number">5</span>, <span class="number">2.9</span>, <span class="number">1</span>, <span class="number">0.2</span>]])</span><br><span class="line">prediction = knn.predict(X_new)   </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Prediction: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(prediction))</span><br></pre></td></tr></table></figure><p>out：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Prediction: [0]</span><br></pre></td></tr></table></figure><p>们模型的预测，这朵新的鸢尾花属于类别 0，也就是说它属于 setosa 品种。</p><h5 id="6、评估模型"><a href="#6、评估模型" class="headerlink" title="6、评估模型"></a>6、评估模型</h5><p>计算精度（accuracy）来衡量模型的优劣，精度就是品种预<br>测正确的花所占的比例。</p><p>in：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(np.mean(y_pred == y_test)))</span><br></pre></td></tr></table></figure><p>out：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test set score: 0.97</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(knn.score(X_test, y_test))) </span><br><span class="line"><span class="comment"># knn 对象的 score 方法来计算测试集的精度,结果是一致的</span></span><br></pre></td></tr></table></figure><p>对于测试集中的鸢尾花，我们的预测有 97% 是正确的。根据一些数学假设，对于新的鸢尾花，可以认为我们的模型预测结果有 97% 都是正确的。</p><h5 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h5><p>首先有150行样本，4列特征的鸢尾花（Iris）数据集。</p><p>鸢尾花（Iris）一共有三个品种：setosa、versicolor 或 virginica，因此这是一个三分类问题。在分类问题中，可能的品种被称为类别（class），每朵花的品种被称为它的标签（label）。</p><ul><li>划分训练集和测试集（train_test_split 函数）</li><li>构建模型：k近邻算法（knn.fit 函数）</li><li>预测测试集（knn.predict 函数）</li><li>计算精度（knn.score 函数）</li></ul><h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><h5 id="name-‘null’-is-not-defined"><a href="#name-‘null’-is-not-defined" class="headerlink" title="name ‘null’ is not defined"></a>name ‘null’ is not defined</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;d:\MyData\**\book-Python����ѧϰ�����̳�.ipynb&quot;, line 23, in &lt;module&gt;</span><br><span class="line">    &quot;execution_count&quot;: null,</span><br><span class="line">NameError: name &#x27;null&#x27; is not defined</span><br><span class="line"></span><br><span class="line">[Done] exited with code=1 in 0.198 seconds</span><br></pre></td></tr></table></figure><p>重装Vscode中的jupyter插件</p><h5 id="mglearn如何导入本地"><a href="#mglearn如何导入本地" class="headerlink" title="mglearn如何导入本地"></a>mglearn如何导入本地</h5><p>1、下载包：<a href="https://github.com/amueller/introduction_to_ml_with_python">https://github.com/amueller/introduction_to_ml_with_python</a></p><p>2、查看包的存放位置<br>cell中输入：<code>%pip show pandas</code> ,运行，查看包的位置（<code>c:\users\用户名\appdata\local\programs\python\python310\lib\site-packages</code>）</p><p>3、把mglearn文件夹放到包的存放位置（<code>c:\users\用户名\appdata\local\programs\python\python310\lib\site-packages</code>）</p><p>mylearn一些函数过时了，无法导入 ：<br><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202302/202302021528610.png"></p><p>mylearn主要是用于美化的，所以在此先忽略掉</p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.runoob.com/pandas/pandas-dataframe.html">Pandas 数据结构 - DataFrame</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.sdhlw.top/%E7%BB%98%E5%9B%BE%E7%9A%84%E7%BA%BF%E5%9E%8B%E3%80%81%E9%A2%9C%E8%89%B2%E3%80%81%E6%A0%87%E8%AE%B0/">绘图的线型、颜色、标记</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/wangxingfan316/article/details/80033557">pandas库scatter_matrix绘图可视化参数详解</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;本书的附加代码可以在 GitHub 下载：&lt;a href=&quot;https://github.com/amueller/introduction_to_ml_with_python&quot;&gt;https://github.com/amueller/introduction_to_ml_with_python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;监督学习算法（supervised learning algorithm）&lt;br&gt;无监督学习算法（unsupervised learning algorithm）&lt;/p&gt;
&lt;p&gt;在机器学习中，这里的每个实体或每一行被称为一个样本（sample）或数据点，而每一列（用来描述这些实体的属性）则被称为特征（feature）。&lt;/p&gt;
&lt;p&gt;如何构建良好的数据表征，这被称为特征提取（feature extraction）或特征工程（feature engineering）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;scikit-learn&lt;/strong&gt; 依赖于另外两个 Python 包：NumPy （Python 科学计算的基础包之一）和 SciPy（ Python 中用于科学计算的函数集合）。&lt;br&gt;算法详细文档：&lt;a href=&quot;https://scikit-learn.org/stable/index.html&quot;&gt;https://scikit-learn.org/stable/index.html&lt;/a&gt;&lt;br&gt;用户指南：&lt;a href=&quot;http://scikit-learn.org/stable/user_guide.html&quot;&gt;http://scikit-learn.org/stable/user_guide.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="Python" scheme="https://www.sdhlw.top/tags/python/"/>
    
    <category term="专业书笔记" scheme="https://www.sdhlw.top/tags/%E4%B8%93%E4%B8%9A%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Machine Learning" scheme="https://www.sdhlw.top/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>Hexo代码块折叠功能</title>
    <link href="https://www.sdhlw.top/hexo%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8A%98%E5%8F%A0%E5%8A%9F%E8%83%BD/"/>
    <id>https://www.sdhlw.top/hexo%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8A%98%E5%8F%A0%E5%8A%9F%E8%83%BD/</id>
    <published>2023-01-25T14:35:42.000Z</published>
    <updated>2023-01-30T15:39:57.210Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>实现同样的效果：</p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301252237971.gif"></p><p>本博客环境：<code>hexo@6.2.0</code>，<code>next@7.8.0</code>，以下所有代码，建立在这个基础之上。</p><p>由 jQuery 选择器选择代码模块<code>.highlight</code>相关的DOM节点，给超过某个高度的代码模块添加展开收起的盒子，让盒子实现展开隐藏效果。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[hexo博客代码折叠功能](https://www.toimc.com/hexo-usage-2/)">[1]</span></a></sup></p><p><code>hexo version</code>即可查看hexo版本；</p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301252237479.png"></p><p>查看<code>theme/next/package.json</code>即可查看next版本；</p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301252237584.png"></p><span id="more"></span><h3 id="1、添加-code-unfold-js"><a href="#1、添加-code-unfold-js" class="headerlink" title="1、添加 code-unfold.js"></a>1、添加 code-unfold.js</h3><p>把<code>code-unfold.js</code>放置在了<code>themes/next/source/js/code-unfold.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">var CODE_MAX_HEIGHT = 200;</span><br><span class="line">var containers = [];</span><br><span class="line"></span><br><span class="line">// 展开</span><br><span class="line">$(&#x27;body&#x27;).on(&#x27;click&#x27;, &#x27;.js_unfold_code_btn&#x27;, function () &#123;</span><br><span class="line">  $(this).closest(&#x27;.js_highlight_container&#x27;).addClass(&#x27;on&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">// 收起</span><br><span class="line">$(&#x27;body&#x27;).on(&#x27;click&#x27;, &#x27;.js_retract_code_btn&#x27;, function () &#123;</span><br><span class="line">  var $container = $(this).closest(&#x27;.js_highlight_container&#x27;).removeClass(&#x27;on&#x27;);</span><br><span class="line">  var winTop = $(window).scrollTop();</span><br><span class="line">  var offsetTop = $container.offset().top;</span><br><span class="line">  $(this).css(&#x27;top&#x27;, 0);</span><br><span class="line">  if (winTop &gt; offsetTop) &#123;</span><br><span class="line">    // 设置滚动条位置</span><br><span class="line">    $(&#x27;body, html&#x27;).animate(&#123;</span><br><span class="line">      scrollTop: $container.offset().top - CODE_MAX_HEIGHT</span><br><span class="line">    &#125;, 600);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 滚动事件，触发动画效果</span><br><span class="line">$(window).on(&#x27;scroll&#x27;, function () &#123;</span><br><span class="line">  var scrollTop = $(window).scrollTop();</span><br><span class="line">  var temp = [];</span><br><span class="line">  for (let i = 0; i &lt; containers.length; i++) &#123;</span><br><span class="line">    var item = containers[i];</span><br><span class="line">    var &#123; $container, height, $hide, hasHorizontalScrollbar &#125; = item;</span><br><span class="line">    if ($container.closest(&#x27;body&#x27;).length === 0) &#123;</span><br><span class="line">      // 如果 $container 元素已经不在页面上, 则删除该元素</span><br><span class="line">      // 防止pjax页面跳转之后，元素未删除</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    temp.push(item);</span><br><span class="line">    if (!$container.hasClass(&#x27;on&#x27;)) &#123;</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    var offsetTop = $container.offset().top;</span><br><span class="line">    var hideBtnHeight = $hide.outerHeight();</span><br><span class="line">    // 减去按钮高度，减去底部滚动条高度</span><br><span class="line">    var maxTop = parseInt(height - (hasHorizontalScrollbar ? 17 : 0) - hideBtnHeight);</span><br><span class="line">    let top = parseInt(</span><br><span class="line">      Math.min(</span><br><span class="line">        Math.max(scrollTop - offsetTop, 0), // 如果小于 0 ，则取 0</span><br><span class="line">        maxTop,// 如果大于 height ，则取 height</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">    // 根据 sin 曲线设置&quot;收起代码&quot;位置</span><br><span class="line">    var halfHeight = parseInt($(window).height() / 2 * Math.sin((top / maxTop) * 90 * (2 * Math.PI/360)));</span><br><span class="line">    $hide.css(&#x27;top&#x27;, Math.min(top + halfHeight, maxTop));</span><br><span class="line">  &#125;</span><br><span class="line">  containers = temp;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 添加隐藏容器</span><br><span class="line">function addCodeWrap($node) &#123;</span><br><span class="line">  var $container = $node.wrap(&#x27;&lt;div class=&quot;js_highlight_container highlight-container&quot;&gt;&lt;div class=&quot;highlight-wrap&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;).closest(&#x27;.js_highlight_container&#x27;);</span><br><span class="line"></span><br><span class="line">  // 底部 &quot;展开代码&quot; 与 侧边栏 &quot;收起代码&quot;</span><br><span class="line">  var $btn = $(`</span><br><span class="line">    &lt;div class=&quot;highlight-footer&quot;&gt;</span><br><span class="line">      &lt;a class=&quot;js_unfold_code_btn show-btn&quot; href=&quot;javascript:;&quot;&gt;展开代码&lt;i class=&quot;fa fa-angle-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;a class=&quot;js_retract_code_btn hide-btn&quot; href=&quot;javascript:;&quot;&gt;&lt;i class=&quot;fa fa-angle-up&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;收起代码&lt;/a&gt;</span><br><span class="line">  `);</span><br><span class="line"></span><br><span class="line">  $container.append($btn);</span><br><span class="line">  return $container;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function codeUnfold () &#123;</span><br><span class="line">  $(&#x27;.highlight&#x27;).each(function () &#123;</span><br><span class="line">    // 防止重复渲染</span><br><span class="line">    if (this.__render__ === true) &#123;</span><br><span class="line">      return true;</span><br><span class="line">    &#125;</span><br><span class="line">    this.__render__ = true;</span><br><span class="line">    var $this = $(this);</span><br><span class="line">    var height = $(this).outerHeight();</span><br><span class="line">    if (height &gt; CODE_MAX_HEIGHT) &#123;</span><br><span class="line">      // 添加展开&amp;收起容器</span><br><span class="line">      var $container = addCodeWrap($this, height);</span><br><span class="line">      containers.push(&#123;</span><br><span class="line">        $container,</span><br><span class="line">        height,</span><br><span class="line">        $hide: $container.find(&#x27;.js_retract_code_btn&#x27;),</span><br><span class="line">        hasHorizontalScrollbar: this.scrollWidth &gt; this.offsetWidth,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、添加-jquery"><a href="#2、添加-jquery" class="headerlink" title="2、添加 jquery"></a>2、添加 jquery</h3><p>修改next主题配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fancybox: true  </span><br></pre></td></tr></table></figure><p>因为<code>fancybox</code>会依赖<code>jquery</code>，所以设置成<code>true</code>；</p><h3 id="3、引用-code-unfold-js"><a href="#3、引用-code-unfold-js" class="headerlink" title="3、引用 code-unfold.js"></a>3、引用 code-unfold.js</h3><p>修改文件<code>themes/next/layout/_scripts/index.njk</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 在最后添加  </span><br><span class="line">&#123;&#123;- next_js(&#x27;code-unfold.js&#x27;) &#125;&#125;  </span><br></pre></td></tr></table></figure><p>next8.0的模板是使用njk，旧版是使用swig<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Hexo-5.x 与 NexT-8.x 跨版本升级](https://www.imczw.com/post/tech/hexo5-next8-updated.html#more)">[2]</span></a></sup>；我的next是7.8版本，没有 <code>index.njk</code> 文件只有 <code>index.swig</code> 文件；查看了njk文件感觉和添加进去的代码格式似乎没有差别，尝试将以上代码添加到 <code>index.swig</code> 文件中；</p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301252237664.png"></p><p>下面找到文件<code>themes/next/source/js/next-boot.js</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NexT.boot.refresh = function () &#123;  </span><br><span class="line">  // 添加一行代码  </span><br><span class="line">  codeUnfold()  </span><br><span class="line">    </span><br><span class="line">  // ...</span><br></pre></td></tr></table></figure><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301252237750.png"></p><h3 id="4、添加样式"><a href="#4、添加样式" class="headerlink" title="4、添加样式"></a>4、添加样式</h3><p>1、创建 <code>highlight.styl</code><br>可以添加<code>theme/next/source/css/_common/components/highlight.styl</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">// 展开收起效果</span><br><span class="line">.highlight-container</span><br><span class="line">  position: relative</span><br><span class="line">  background-color: highlight-background</span><br><span class="line">  &amp;.on</span><br><span class="line">    .highlight-footer</span><br><span class="line">      display: none</span><br><span class="line">    .hide-btn</span><br><span class="line">      display: flex</span><br><span class="line">    .highlight-wrap</span><br><span class="line">      max-height: none</span><br><span class="line">  .highlight-wrap</span><br><span class="line">    overflow: hidden</span><br><span class="line">    max-height: 200px</span><br><span class="line">  .highlight-footer</span><br><span class="line">    position absolute</span><br><span class="line">    width: 100%</span><br><span class="line">    left: 0</span><br><span class="line">    bottom: 0</span><br><span class="line">    height: 60px</span><br><span class="line">    background-image: &#x27;linear-gradient(-180deg, rgba(255,255,255,0) 0%, %s 65%)&#x27; % highlight-background;</span><br><span class="line">    text-align: center</span><br><span class="line">  .show-btn</span><br><span class="line">    font-size: 12px</span><br><span class="line">    color: #fff</span><br><span class="line">    position: absolute</span><br><span class="line">    left: 50%</span><br><span class="line">    transform: translateX(-50%)</span><br><span class="line">    bottom: 0</span><br><span class="line">    line-height: 2em</span><br><span class="line">    text-decoration: none</span><br><span class="line">    padding: 0 0.8em</span><br><span class="line">    text-align: center</span><br><span class="line">    border-radius: 4px 4px 0</span><br><span class="line">    &amp;:hover</span><br><span class="line">      text-decoration: none</span><br><span class="line">  .hide-btn</span><br><span class="line">    color: #fff</span><br><span class="line">    font-size: 12px</span><br><span class="line">    width: 22px</span><br><span class="line">    position: absolute</span><br><span class="line">    left: -21px</span><br><span class="line">    top: 0</span><br><span class="line">    line-height: 1em</span><br><span class="line">    text-decoration: none</span><br><span class="line">    text-align: center</span><br><span class="line">    display: none</span><br><span class="line">    flex-direction: column</span><br><span class="line">    background-color: highlight-background</span><br><span class="line">    border-radius: 4px 0 0 4px</span><br><span class="line">    padding: 0.1em 0 0.6em</span><br><span class="line">    transition: top ease 0.35s</span><br><span class="line">  .fa-angle-up,</span><br><span class="line">  .fa-angle-down</span><br><span class="line">    font-style: normal</span><br><span class="line">    color: #fff</span><br><span class="line">  .fa-angle-up:before</span><br><span class="line">    content:&quot;\f106&quot;</span><br><span class="line">  .fa-angle-down:before</span><br><span class="line">    content:&quot;\f107&quot;</span><br><span class="line">    margin-left: 0.5em</span><br><span class="line">  .js_unfold_code_btn, .js_retract_code_btn</span><br><span class="line">    background: rgba(0,0,0,0.5)</span><br><span class="line">    border-bottom: none !important</span><br><span class="line">    &amp;:hover</span><br><span class="line">      border-bottom-color: none !important</span><br></pre></td></tr></table></figure><p>2、引用样式<br>找到文件 <code>themes/next/source/css/_common/components/index.styl</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@import &#x27;post&#x27;;</span><br><span class="line">@import &#x27;pages&#x27;;</span><br><span class="line">@import &#x27;third-party&#x27;;</span><br><span class="line">// 添加这一行，不要加分号！！</span><br><span class="line">@import &#x27;highlight&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该目录下（ <code>themes/next/source/css/_common/components/</code>）没找到 <code>index.styl</code> ，尝试将 <code>@import &#39;highlight&#39;</code> 添加到 <code>components.styl</code> ，看是否可行；</p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301252237863.png"></p><p>实现了想要的效果，做的修改是可行的！</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.toimc.com/hexo-usage-2/">hexo博客代码折叠功能</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.imczw.com/post/tech/hexo5-next8-updated.html#more">Hexo-5.x 与 NexT-8.x 跨版本升级</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;实现同样的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301252237971.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;本博客环境：&lt;code&gt;hexo@6.2.0&lt;/code&gt;，&lt;code&gt;next@7.8.0&lt;/code&gt;，以下所有代码，建立在这个基础之上。&lt;/p&gt;
&lt;p&gt;由 jQuery 选择器选择代码模块&lt;code&gt;.highlight&lt;/code&gt;相关的DOM节点，给超过某个高度的代码模块添加展开收起的盒子，让盒子实现展开隐藏效果。&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--error hint--medium hint--rounded hint--bounce&quot; aria-label=&quot;[hexo博客代码折叠功能](https://www.toimc.com/hexo-usage-2/)&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hexo version&lt;/code&gt;即可查看hexo版本；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301252237479.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;查看&lt;code&gt;theme/next/package.json&lt;/code&gt;即可查看next版本；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301252237584.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="Software" scheme="https://www.sdhlw.top/tags/software/"/>
    
    <category term="Hexo" scheme="https://www.sdhlw.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>NPM---Node 包管理器</title>
    <link href="https://www.sdhlw.top/npm-node-%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>https://www.sdhlw.top/npm-node-%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/</id>
    <published>2023-01-22T16:02:55.000Z</published>
    <updated>2023-01-22T16:19:45.391Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>npm（“Node 包管理器”）是 JavaScript 运行时 Node.js 的默认程序包管理器。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[什么是 npm —— 写给初学者的编程教程](https://www.freecodecamp.org/chinese/news/what-is-npm-a-node-package-manager-tutorial-for-beginners/)">[1]</span></a></sup></p><p>npm 由两个主要部分组成：</p><ul><li><p>用于发布和下载程序包的 CLI（命令行界面）工具</p></li><li><p>托管 JavaScript 程序包的  在线存储库<span id="more"></span></p></li></ul><p>为了更直观地解释，我们可以将存储库  npmjs.com  视为一个物流集散中心，该中心从卖方（npm 包裹的作者）那里接收货物的包裹，并将这些货物分发给买方（npm 包裹的用户）。</p><p>为了促进此过程，npmjs.com  物流集散中心雇用了一群勤劳的袋熊（npm CLI），他们将被分配给每个  npmjs.com  用户作为私人助理。 因此，dependencies（依赖项）会如下传递给 JavaScript 开发人员：</p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222349448.png"></p><p>发布 JS 软件包的过程如下：</p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222349502.png"></p><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>每个 JavaScript 项目（无论是 Node.js 还是浏览器应用程序）都可以被当作 npm 软件包，并且通过  package.json  来描述项目和软件包信息。</p><p>我们可以将 package.json 视为快递盒子上的运输信息。</p><p>当运行  <code>npm init</code>  初始化 JavaScript&#x2F;Node.js 项目时，将生成 <code>package.json</code>文件，文件内的内容(基本元数据)由开发人员提供：</p><ul><li><code>name</code>：JavaScript 项目或库的名称。</li><li><code>version</code>：项目的版本。通常，在应用程序开发中，由于没有必要对开源库进行版本控制，因此经常忽略这一块。但是，仍可以用它来定义版本。</li><li><code>description</code>：项目的描述。</li><li><code>license</code>：项目的许可证。</li></ul><h4 id="npm-scripts"><a href="#npm-scripts" class="headerlink" title="npm scripts"></a>npm scripts</h4><p><code>package.json</code>  还支持一个  <code>scripts</code>  属性，可以把它当作在项目本地运行的命令行工具。例如，一个 npm 项目的  <code>scripts</code>部分可能看起来像这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write **/*.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;format-check&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --check **/*.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint src/**/*.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ncc build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build &amp;&amp; npm run format &amp;&amp; npm run lint &amp;&amp; npm run pack &amp;&amp; npm test&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>eslint</code>，<code>prettier</code>，<code>ncc</code>，<code>jest</code>  不是安装为全局可执行文件，而是安装在项目本地的 <code>node_modules/.bin/</code> 中。</p><p>最新引入的  <a href="https://www.freecodecamp.org/news/npm-vs-npx-whats-the-difference/">npx</a>  使我们可以像在全局安装程序一样运行这些  <code>node_modules</code>  项目作用域命令，方法是在其前面加上  <code>npx ...</code>（即<code>npx prettier --write ** / *。ts</code>）。</p><h4 id="package-lock-json"><a href="#package-lock-json" class="headerlink" title="package-lock.json"></a>package-lock.json</h4><p>该文件描述了 npm JavaScript 项目中使用的依赖项的确切版本。如果  <code>package.json</code>  是通用的描述性标签，则  <code>package-lock.json</code>  是成分表。</p><p>就像我们通常不会读取食品包装袋上的成分表（除非你太无聊或需要知道）一样，<code>package-lock.json</code>  并不会被开发人员一行一行进行读取。</p><p><code>package-lock.json</code>  通常是由  <code>npm install</code>  命令生成的，也可以由我们的 NPM CLI 工具读取，以确保使用  <code>npm ci</code>  复制项目的构建环境。</p><h4 id="dependencies-vs-devDependencies"><a href="#dependencies-vs-devDependencies" class="headerlink" title="dependencies vs devDependencies"></a>dependencies vs devDependencies</h4><p>devDependencies  里面的插件只用于开发环境，不用于生产环境，而 dependencies  是需要发布到生产环境的。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[npm -i 与npm install -s与-d的区别](https://www.cnblogs.com/cina33blogs/p/9210931.html)">[2]</span></a></sup></p><p>这两个以键值对象的形式出现，其中 npm 库的名称为键，其<a href="https://semver.org/">语义格式</a>版本为值。 大家可以看看 <a href="https://github.com/actions/typescript-action">Github 的 TypeScript 操作模板</a>中的示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@actions/core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.2.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@actions/github&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.1.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@types/jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^25.1.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@types/node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^13.9.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@typescript-eslint/parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.22.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@zeit/ncc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.21.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint-plugin-github&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.4.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint-plugin-jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^23.8.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^25.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jest-circus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^25.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;js-yaml&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.13.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.19.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ts-jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^25.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.8.3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这些依赖通过带有  <code>--save</code>  或  <code>--save-dev</code>  标志的  <code>npm install</code>  命令安装。 它们分别用于生产和开发&#x2F;测试环境。 在下一节中，我们将更深入地研究这些软件包的安装。</p><p>同时，理解语义版本前面的符号非常重要（假设你已经阅读 <a href="https://semver.org/">semver</a> 的  <code>major.minor.patch</code>  模型）：</p><ul><li><code>^</code>：表示最新的次版本，例如， <code>^1.0.4</code>  可能会安装主版本系列  <code>1</code>  的最新次版本 <code>1.3.0</code>。</li><li><code>〜</code>：表示最新的补丁程序版本，与  <code>^</code>  类似， <code>〜1.0.4</code>  可能会安装次版本系列 <code>1.0</code>  的最新次版本<code>1.0.7</code>。</li></ul><p>所有这些确切的软件包版本都将记录在  <code>package-lock.json</code>  文件中。</p><h4 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h4><p>这是现在我们开发 JavaScript&#x2F;Node.js 应用程序时最常用的命令。</p><p>默认情况下，<code>npm install &lt;package-name&gt;</code>  将安装带有  <code>^</code>  版本号的软件包的最新版本。npm 项目上下文中的  <code>npm install</code>  将根据  <code>package.json</code>  规范将软件包下载到项目的  <code>node_modules</code>  文件夹中，从而升级软件包的版本（并重新生成  <code>package-lock.json</code>  ）。 <code>npm install &lt;package-name&gt;</code>  可以基于  <code>^</code>  和  <code>〜</code>  版本匹配。</p><p>如果要在全局上下文中安装程序包，可以在机器的任何地方使用它，则可以指定全局标志  <code>-g</code>（例如  <a href="https://github.com/tapio/live-server">live-server</a>）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i module_name  -S  = &gt;  npm install module_name --save    写入到 dependencies 对象</span><br><span class="line"></span><br><span class="line">npm i module_name  -D  =&gt; npm install module_name --save-dev   写入到 devDependencies 对象</span><br><span class="line"></span><br><span class="line">npm i module_name  -g  全局安装</span><br></pre></td></tr></table></figure><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.freecodecamp.org/chinese/news/what-is-npm-a-node-package-manager-tutorial-for-beginners/">什么是 npm —— 写给初学者的编程教程</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/cina33blogs/p/9210931.html">npm -i 与npm install -s与-d的区别</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;npm（“Node 包管理器”）是 JavaScript 运行时 Node.js 的默认程序包管理器。&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--error hint--medium hint--rounded hint--bounce&quot; aria-label=&quot;[什么是 npm —— 写给初学者的编程教程](https://www.freecodecamp.org/chinese/news/what-is-npm-a-node-package-manager-tutorial-for-beginners/)
&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;npm 由两个主要部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用于发布和下载程序包的 CLI（命令行界面）工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;托管 JavaScript 程序包的  在线存储库</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="NPM" scheme="https://www.sdhlw.top/tags/npm/"/>
    
    <category term="Java" scheme="https://www.sdhlw.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo评论功能的实现：Gitalk</title>
    <link href="https://www.sdhlw.top/hexo%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%9Agitalk/"/>
    <id>https://www.sdhlw.top/hexo%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%9Agitalk/</id>
    <published>2023-01-22T15:50:20.000Z</published>
    <updated>2023-01-30T15:30:30.931Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>需求：<br>1、用Gitalk实现评论功能<br>2、去除之前的Valine实现的评论功能</p><p>可在主题配置文件搜索<code>comment system</code>，查看支持的评论系统；个人使用Gitalk进行配置；<br><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346734.png"></p><span id="more"></span><h3 id="Gitalk评论功能"><a href="#Gitalk评论功能" class="headerlink" title="Gitalk评论功能"></a>Gitalk评论功能</h3><h4 id="1、注册OAuth-application"><a href="#1、注册OAuth-application" class="headerlink" title="1、注册OAuth application"></a>1、注册OAuth application</h4><ol><li>在 github 中进行注册，进入 <a href="https://github.com/settings/profile">https://github.com/settings/profile</a></li><li>点击左侧 Developer settings</li><li>Register a new application</li></ol><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346185.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Application name:#应用名称</span><br><span class="line">Homepage URL：  #网站URL(填自己的博客主页地址) </span><br><span class="line">Application description#描述  </span><br><span class="line">Authorization callback URL:#网站URL(填自己的博客主页地址)  </span><br></pre></td></tr></table></figure><ol start="4"><li>注册完成之后，会得到：<code>Client ID</code> 和 <code>Client Secret</code><sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Hexo Next主题 添加文章评论功能](https://xinyufeng.net/2020/06/01/Hexo-Next%E4%B8%BB%E9%A2%98-%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/)">[1]</span></a></sup></li></ol><h4 id="2、新建存放博客评论仓库"><a href="#2、新建存放博客评论仓库" class="headerlink" title="2、新建存放博客评论仓库"></a>2、新建存放博客评论仓库</h4><p>可以在 github 中建一个项目，专门用来存储你的博客评论</p><h4 id="3、配置-Next-主题文件"><a href="#3、配置-Next-主题文件" class="headerlink" title="3、配置 Next 主题文件"></a>3、配置 Next 主题文件</h4><p>编辑主题配置文件：<code>themes\next\ _config.yml</code>，找到有关 gitalk的相关配置进行填写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true 开启gitalk评论，不需要配置</span><br><span class="line">  owner: github用户名</span><br><span class="line">  admin: github用户名</span><br><span class="line">  repo: 博客的仓库名称(注意不是地址)</span><br><span class="line">  ClientID: 上面生成的Client ID</span><br><span class="line">  ClientSecret: 上面生成的Client Secret</span><br><span class="line">  labels: &#x27;gitalk&#x27; github issue 对应的issue标签（新建一个）</span><br><span class="line">  distractionFreeMode: true  无干扰模式，不需要更改</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是我的配置：<br><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346259.png"></p><p>进入到 <code>themes\next\layout\post.swig</code>（我的博客是基于 Next，如果有差异，替换路径中的 next 即可），添加 gitalk 模板文件的导入<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[如何在 hexo 博客中，集成 gitalk 评论插件](https://eminoda.github.io/2021/06/16/hexo-gitalk-comment-plugins-in-github-issue/?)">[2]</span></a></sup>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &#123;### Line 357，如果行数有差异，只需要在 POST END 文章结束后添加即可 ###&#125; --&gt;  </span><br><span class="line">&#123;% if theme.git_talk.enabled and not is_index %&#125;  </span><br><span class="line">&lt;div&gt;&#123;% include &#x27;git-talk.swig&#x27; %&#125;&lt;/div&gt;  </span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>然后添加 <code>git-talk.swig</code> 文件（<code>themes\next\layout\git-talk.swig</code>），文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&quot; /&gt;  </span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;  </span><br><span class="line">  var gitalk = new Gitalk(&#123;  </span><br><span class="line">    clientID: &quot;&#123;&#123;theme.git_talk.clientID&#125;&#125;&quot;,  </span><br><span class="line">    clientSecret: &quot;&#123;&#123;theme.git_talk.clientSecret&#125;&#125;&quot;,  </span><br><span class="line">    repo: &quot;eminoda.github.io&quot;, // 博客仓库地址  </span><br><span class="line">    owner: &quot;eminoda&quot;, // github 用户名  </span><br><span class="line">    admin: [&quot;eminoda&quot;], // github 用户名  </span><br><span class="line">    perPage: 20,  </span><br><span class="line">    id: location.pathname.slice(0, 50), // 查找 issus 的条件，后面将对 id 有针对逻辑  </span><br><span class="line">    title: &quot;&#123;&#123;page.title&#125;&#125;&quot;,  </span><br><span class="line">    body: &quot;🚀 &quot; + location.href + &quot;\n\n欢迎通过 issues 留言 ，互相交流学习😊&quot;, // 初始化后，issues 的内容  </span><br><span class="line">  &#125;);  </span><br><span class="line">  gitalk.render(&quot;gitalk-container&quot;);  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>以上操作完成后，打开文章即可看到以下页面，需要登录github账号初始化；每篇文章都需要进行登录初始化才可以使用；</p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346322.png" alt="未登录"></p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346388.png" alt="初始化后"></p><h4 id="4、全部文章批量初始化Issues"><a href="#4、全部文章批量初始化Issues" class="headerlink" title="4、全部文章批量初始化Issues"></a>4、全部文章批量初始化Issues</h4><p>对于一个刚起步的博客站点没有任何问题，新增一篇文章，初始化下issue，顺手的事情。</p><p>但对于一个历史站点，里面可能有百篇文章，如果希望看到别人阅读的回复，则需要人工每篇进行初始化，不太现实，则需要程序来批量初始化。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[如何在 hexo 博客中，集成 gitalk 评论插件](https://eminoda.github.io/2021/06/16/hexo-gitalk-comment-plugins-in-github-issue/?)">[2]</span></a></sup></p><h5 id="4-1-开启-OAuth-认证"><a href="#4-1-开启-OAuth-认证" class="headerlink" title="4.1 开启 OAuth 认证"></a>4.1 开启 OAuth 认证</h5><p>需要在 <strong>Developer Setting</strong> 开启 <strong>Personal access tokens</strong><sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[hexo gitalk 评论自动初始化](https://blog.jijian.link/2020-01-10/hexo-gitalk-auto-init/)">[3]</span></a></sup></p><h5 id="4-2-安装项目依赖"><a href="#4-2-安装项目依赖" class="headerlink" title="4.2 安装项目依赖"></a>4.2 安装项目依赖</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i request xml-parser blueimp-md5 moment hexo-generator-sitemap -S</span><br></pre></td></tr></table></figure><p>需要的包：request、xml-parser、 blueimp-md5、 moment、 hexo-generator-sitemap</p><h5 id="4-3-修改-hexo-generator-sitemap-配置"><a href="#4-3-修改-hexo-generator-sitemap-配置" class="headerlink" title="4.3 修改 hexo-generator-sitemap 配置"></a>4.3 修改 hexo-generator-sitemap 配置</h5><p>项目根目录配置文件 <code>_config.yml</code> 添加配置<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[hexo next](https://white-than-wood.zone/2022/08/30/hexo-next/)">[5]</span></a></sup>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#Sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">  template: ./sitemap_template.xml</span><br><span class="line">  rel: false</span><br><span class="line">  tag: true</span><br><span class="line">  category: false</span><br></pre></td></tr></table></figure><p>项目根目录新建文件 <code>sitemap_template.xml</code> ，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;urlset xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt;  </span><br><span class="line">  &#123;% for post in posts %&#125;  </span><br><span class="line">  &lt;url&gt;  </span><br><span class="line">    &lt;loc&gt;&#123;&#123; post.permalink | uriencode &#125;&#125;&lt;/loc&gt;  </span><br><span class="line">    &#123;% if post.updated %&#125;  </span><br><span class="line">    &lt;lastmod&gt;&#123;&#123; post.updated.toISOString() &#125;&#125;&lt;/lastmod&gt;  </span><br><span class="line">    &#123;% elif post.date %&#125;  </span><br><span class="line">    &lt;lastmod&gt;&#123;&#123; post.date.toISOString() &#125;&#125;&lt;/lastmod&gt;  </span><br><span class="line">    &#123;% endif %&#125;  </span><br><span class="line">    &lt;date&gt;&#123;&#123; post.date &#125;&#125;&lt;/date&gt;  </span><br><span class="line">    &lt;title&gt;&#123;&#123; post.title + &#x27; | &#x27; + config.title &#125;&#125;&lt;/title&gt;  </span><br><span class="line">    &#123;# nunjucks 模版语法 https://github.com/mozilla/nunjucks #&#125;  </span><br><span class="line">    &lt;desc&gt;&#123;&#123; post.description | default(post.excerpt) | default(post.content) | default(config.description) | striptags | truncate(200, true, &#x27;&#x27;) &#125;&#125;&lt;/desc&gt;  </span><br><span class="line">  &lt;/url&gt;  </span><br><span class="line">  &#123;% endfor %&#125;  </span><br><span class="line">&lt;/urlset&gt;</span><br></pre></td></tr></table></figure><h5 id="4-4-执行-hexo-generate-命令，生成-sitemap"><a href="#4-4-执行-hexo-generate-命令，生成-sitemap" class="headerlink" title="4.4 执行 hexo generate 命令，生成 sitemap"></a>4.4 执行 hexo generate 命令，生成 sitemap</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>此命令执行成功之后， <code>public</code> 目录下应该有生成 <code>sitemap.xml</code> 文件，如果没有此文件，请检查包是否安装成功。</p><h5 id="4-5-添加自动初始化程序"><a href="#4-5-添加自动初始化程序" class="headerlink" title="4.5 添加自动初始化程序"></a>4.5 添加自动初始化程序</h5><p>项目根目录新建文件 <code>talk-auto-init.js</code> ，内容如下<sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[hexo主题next中gitalk配置与评论初始化](https://www.toimc.com/hexo-usage-3/)">[6]</span></a></sup>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const url = require(&#x27;url&#x27;);</span><br><span class="line"></span><br><span class="line">const request = require(&#x27;request&#x27;);</span><br><span class="line">const xmlParser = require(&#x27;xml-parser&#x27;);</span><br><span class="line">const md5 = require(&#x27;md5&#x27;);</span><br><span class="line"></span><br><span class="line">// 配置信息</span><br><span class="line">const config = &#123;</span><br><span class="line">  username: &#x27;toimc&#x27;, // GitHub repository 所有者，可以是个人或者组织。对应Gitalk配置中的owner</span><br><span class="line">  repo: &quot;toimc.github.io&quot;, // 储存评论issue的github仓库名，仅需要仓库名字即可。对应 Gitalk配置中的repo</span><br><span class="line">  token: &#x27;xxxxxx&#x27;, // 前面申请的 personal access token</span><br><span class="line">  sitemap: path.join(__dirname, &#x27;./public/sitemap.xml&#x27;), // 自己站点的 sitemap 文件地址</span><br><span class="line">  cache: true, // 是否启用缓存，启用缓存会将已经初始化的数据写入配置的 gitalkCacheFile 文件，下一次直接通过缓存文件判断</span><br><span class="line">  gitalkCacheFile: path.join(__dirname, &#x27;./gitalk-init-cache.json&#x27;), // 用于保存 gitalk 已经初始化的 id 列表</span><br><span class="line">  gitalkErrorFile: path.join(__dirname, &#x27;./gitalk-init-error.json&#x27;), // 用于保存 gitalk 初始化报错的数据</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const api = &#x27;https://api.github.com/repos/&#x27; + config.username + &#x27;/&#x27; + config.repo + &#x27;/issues&#x27;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 读取 sitemap 文件</span><br><span class="line">* 远程 sitemap 文件获取可参考 https://www.npmjs.com/package/sitemapper</span><br><span class="line">*/</span><br><span class="line">const sitemapXmlReader = (file) =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const data = fs.readFileSync(file, &#x27;utf8&#x27;);</span><br><span class="line">    const sitemap = xmlParser(data);</span><br><span class="line">    let ret = [];</span><br><span class="line">    sitemap.root.children.forEach(function (url) &#123;</span><br><span class="line">      const loc = url.children.find(function (item) &#123;</span><br><span class="line">        return item.name === &#x27;loc&#x27;;</span><br><span class="line">      &#125;);</span><br><span class="line">      if (!loc) &#123;</span><br><span class="line">        return false;</span><br><span class="line">      &#125;</span><br><span class="line">      const title = url.children.find(function (item) &#123;</span><br><span class="line">        return item.name === &#x27;title&#x27;;</span><br><span class="line">      &#125;);</span><br><span class="line">      const desc = url.children.find(function (item) &#123;</span><br><span class="line">        return item.name === &#x27;desc&#x27;;</span><br><span class="line">      &#125;);</span><br><span class="line">      const date = url.children.find(function (item) &#123;</span><br><span class="line">        return item.name === &#x27;date&#x27;;</span><br><span class="line">      &#125;);</span><br><span class="line">      ret.push(&#123;</span><br><span class="line">        url: loc.content,</span><br><span class="line">        title: title.content,</span><br><span class="line">        desc: desc.content,</span><br><span class="line">        date: date.content,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    return ret;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    return [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 获取 gitalk 使用的 id</span><br><span class="line">const getGitalkId = (&#123;</span><br><span class="line">  url: u,</span><br><span class="line">  date</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">  const link = url.parse(u);</span><br><span class="line">  // 链接不存在，不需要初始化</span><br><span class="line">  if (!link || !link.pathname) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  if (!date) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  return md5(link.pathname);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 通过以请求判断是否已经初始化</span><br><span class="line">* @param &#123;string&#125; gitalk 初始化的id</span><br><span class="line">* @return &#123;[boolean, boolean]&#125; 第一个值表示是否出错，第二个值 false 表示没初始化， true 表示已经初始化</span><br><span class="line">*/</span><br><span class="line">const getIsInitByRequest = (id) =&gt; &#123;</span><br><span class="line">  const options = &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      &#x27;Authorization&#x27;: &#x27;token &#x27; + config.token,</span><br><span class="line">      &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;,</span><br><span class="line">      &#x27;Accept&#x27;: &#x27;application/json&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    url: api + &#x27;?labels=&#x27; + id + &#x27;,Gitalk&#x27;,</span><br><span class="line">    method: &#x27;GET&#x27;</span><br><span class="line">  &#125;;</span><br><span class="line">  return new Promise((resolve) =&gt; &#123;</span><br><span class="line">    request(options, function (err, response, body) &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">        return resolve([err, false]);</span><br><span class="line">      &#125;</span><br><span class="line">      if (response.statusCode != 200) &#123;</span><br><span class="line">        return resolve([response, false]);</span><br><span class="line">      &#125;</span><br><span class="line">      const res = JSON.parse(body);</span><br><span class="line">      if (res.length &gt; 0) &#123;</span><br><span class="line">        return resolve([false, true]);</span><br><span class="line">      &#125;</span><br><span class="line">      return resolve([false, false]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 通过缓存判断是否已经初始化</span><br><span class="line">* @param &#123;string&#125; gitalk 初始化的id</span><br><span class="line">* @return &#123;boolean&#125; false 表示没初始化， true 表示已经初始化</span><br><span class="line">*/</span><br><span class="line">const getIsInitByCache = (() =&gt; &#123;</span><br><span class="line">  // 判断缓存文件是否存在</span><br><span class="line">  let gitalkCache = false;</span><br><span class="line">  try &#123;</span><br><span class="line">    gitalkCache = require(config.gitalkCacheFile);</span><br><span class="line">  &#125; catch (e) &#123;&#125;</span><br><span class="line">  return function (id) &#123;</span><br><span class="line">    if (!gitalkCache) &#123;</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (gitalkCache.find((&#123;</span><br><span class="line">        id: itemId</span><br><span class="line">      &#125;) =&gt; (itemId === id))) &#123;</span><br><span class="line">      return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">// 根据缓存，判断链接是否已经初始化</span><br><span class="line">// 第一个值表示是否出错，第二个值 false 表示没初始化， true 表示已经初始化</span><br><span class="line">const idIsInit = async (id) =&gt; &#123;</span><br><span class="line">  if (!config.cache) &#123;</span><br><span class="line">    return await getIsInitByRequest(id);</span><br><span class="line">  &#125;</span><br><span class="line">  // 如果通过缓存查询到的数据是未初始化，则再通过请求判断是否已经初始化，防止多次初始化</span><br><span class="line">  if (getIsInitByCache(id) === false) &#123;</span><br><span class="line">    return await getIsInitByRequest(id);</span><br><span class="line">  &#125;</span><br><span class="line">  return [false, true];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 初始化</span><br><span class="line">const gitalkInit = (&#123;</span><br><span class="line">  url,</span><br><span class="line">  id,</span><br><span class="line">  title,</span><br><span class="line">  desc</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">  //创建issue</span><br><span class="line">  const reqBody = &#123;</span><br><span class="line">    &#x27;title&#x27;: title,</span><br><span class="line">    &#x27;labels&#x27;: [id, &#x27;Gitalk&#x27;],</span><br><span class="line">    &#x27;body&#x27;: url + &#x27;\r\n\r\n&#x27; + desc</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  const options = &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      &#x27;Authorization&#x27;: &#x27;token &#x27; + config.token,</span><br><span class="line">      &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;,</span><br><span class="line">      &#x27;Accept&#x27;: &#x27;application/json&#x27;,</span><br><span class="line">      &#x27;Content-Type&#x27;: &#x27;application/json;charset=UTF-8&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    url: api,</span><br><span class="line">    body: JSON.stringify(reqBody),</span><br><span class="line">    method: &#x27;POST&#x27;</span><br><span class="line">  &#125;;</span><br><span class="line">  return new Promise((resolve) =&gt; &#123;</span><br><span class="line">    request(options, function (err, response, body) &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">        return resolve([err, false]);</span><br><span class="line">      &#125;</span><br><span class="line">      if (response.statusCode != 201) &#123;</span><br><span class="line">        return resolve([response, false]);</span><br><span class="line">      &#125;</span><br><span class="line">      return resolve([false, true]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 写入内容</span><br><span class="line">* @param &#123;string&#125; fileName 文件名</span><br><span class="line">* @param &#123;string&#125; content 内容</span><br><span class="line">*/</span><br><span class="line">const write = async (fileName, content, flag = &#x27;w+&#x27;) =&gt; &#123;</span><br><span class="line">  return new Promise((resolve) =&gt; &#123;</span><br><span class="line">    fs.open(fileName, flag, function (err, fd) &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">        resolve([err, false]);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      fs.writeFile(fd, content, function (err) &#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">          resolve([err, false]);</span><br><span class="line">          return;</span><br><span class="line">        &#125;</span><br><span class="line">        fs.close(fd, (err) =&gt; &#123;</span><br><span class="line">          if (err) &#123;</span><br><span class="line">            resolve([err, false]);</span><br><span class="line">            return;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        resolve([false, true]);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const init = async () =&gt; &#123;</span><br><span class="line">  const urls = sitemapXmlReader(config.sitemap);</span><br><span class="line">  // 报错的数据</span><br><span class="line">  const errorData = [];</span><br><span class="line">  // 已经初始化的数据</span><br><span class="line">  const initializedData = [];</span><br><span class="line">  // 成功初始化数据</span><br><span class="line">  const successData = [];</span><br><span class="line">  for (const item of urls) &#123;</span><br><span class="line">    const &#123;</span><br><span class="line">      url,</span><br><span class="line">      date,</span><br><span class="line">      title,</span><br><span class="line">      desc</span><br><span class="line">    &#125; = item;</span><br><span class="line">    const id = getGitalkId(&#123;</span><br><span class="line">      url,</span><br><span class="line">      date</span><br><span class="line">    &#125;);</span><br><span class="line">    if (!id) &#123;</span><br><span class="line">      console.log(`id: 生成失败 [ $&#123;id&#125; ] `);</span><br><span class="line">      errorData.push(&#123;</span><br><span class="line">        ...item,</span><br><span class="line">        info: &#x27;id 生成失败&#x27;,</span><br><span class="line">      &#125;);</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    const [err, res] = await idIsInit(id);</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      console.log(`Error: 查询评论异常 [ $&#123;title&#125; ] , 信息：`, err || &#x27;无&#x27;);</span><br><span class="line">      errorData.push(&#123;</span><br><span class="line">        ...item,</span><br><span class="line">        info: &#x27;查询评论异常&#x27;,</span><br><span class="line">      &#125;);</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    if (res === true) &#123;</span><br><span class="line">      // console.log(`--- Gitalk 已经初始化 --- [ $&#123;title&#125; ] `);</span><br><span class="line">      initializedData.push(&#123;</span><br><span class="line">        id,</span><br><span class="line">        url,</span><br><span class="line">        title,</span><br><span class="line">      &#125;);</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(`Gitalk 初始化开始... [ $&#123;title&#125; ] `);</span><br><span class="line">    const [e, r] = await gitalkInit(&#123;</span><br><span class="line">      id,</span><br><span class="line">      url,</span><br><span class="line">      title,</span><br><span class="line">      desc</span><br><span class="line">    &#125;);</span><br><span class="line">    if (e || !r) &#123;</span><br><span class="line">      console.log(`Error: Gitalk 初始化异常 [ $&#123;title&#125; ] , 信息：`, e || &#x27;无&#x27;);</span><br><span class="line">      errorData.push(&#123;</span><br><span class="line">        ...item,</span><br><span class="line">        info: &#x27;初始化异常&#x27;,</span><br><span class="line">      &#125;);</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    successData.push(&#123;</span><br><span class="line">      id,</span><br><span class="line">      url,</span><br><span class="line">      title,</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(`Gitalk 初始化成功! [ $&#123;title&#125; ] - $&#123;id&#125;`);</span><br><span class="line">    continue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  console.log(&#x27;&#x27;); // 空输出，用于换行</span><br><span class="line">  console.log(&#x27;--------- 运行结果 ---------&#x27;);</span><br><span class="line">  console.log(&#x27;&#x27;); // 空输出，用于换行</span><br><span class="line"></span><br><span class="line">  if (errorData.length !== 0) &#123;</span><br><span class="line">    console.log(`报错数据： $&#123;errorData.length&#125; 条。参考文件 $&#123;config.gitalkErrorFile&#125;。`);</span><br><span class="line">    await write(config.gitalkErrorFile, JSON.stringify(errorData, null, 2));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  console.log(`本次成功： $&#123;successData.length&#125; 条。`);</span><br><span class="line"></span><br><span class="line">  // 写入缓存</span><br><span class="line">  if (config.cache) &#123;</span><br><span class="line">    console.log(`写入缓存： $&#123;(initializedData.length + successData.length)&#125; 条，已初始化 $&#123;initializedData.length&#125; 条，本次成功： $&#123;successData.length&#125; 条。参考文件 $&#123;config.gitalkCacheFile&#125;。`);</span><br><span class="line">    await write(config.gitalkCacheFile, JSON.stringify(initializedData.concat(successData), null, 2));</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(`已初始化： $&#123;initializedData.length&#125; 条。`);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">init();</span><br></pre></td></tr></table></figure><p>以上代码需改动的地方：<br><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346457.png"></p><p>修改博客根目录下的<code>package.json</code>，新增命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;  </span><br><span class="line">  &quot;talk&quot;: &quot;node talk-auto-init.js&quot;  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>注意观察文件格式，若放在最后一个，前面需要一个逗号，个人配置如下：<br><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346522.png"></p><p>项目的 package.json 是配置和描述如何与程序交互和运行的中心。<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[package.json 详解](https://juejin.cn/post/6844904006746112007)">[4]</span></a></sup></p><h5 id="4-6-执行命令"><a href="#4-6-执行命令" class="headerlink" title="4.6 执行命令"></a>4.6 执行命令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run talk</span><br></pre></td></tr></table></figure><p>若出现以下情况，则成功啦：<br><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346583.png"></p><h5 id="4-7-命令合并"><a href="#4-7-命令合并" class="headerlink" title="4.7 命令合并"></a>4.7 命令合并</h5><p>修改 <code>package.json</code> 中的 build 命令，将自动初始化添加到 build 之后，这样每次执行 build 命令就会自动执行初始化命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;  </span><br><span class="line">  &quot;build&quot;: &quot;hexo generate &amp;&amp; node talk-auto-init.js&quot;  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="去除valine评论系统："><a href="#去除valine评论系统：" class="headerlink" title="去除valine评论系统："></a>去除valine评论系统：</h3><p>编辑<code>themes\next\ _config.yml</code>文件：将enable选项改为false即可<br><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346687.png"></p><h3 id="某个页面要不要评论"><a href="#某个页面要不要评论" class="headerlink" title="某个页面要不要评论"></a>某个页面要不要评论</h3><p>可以单独关闭某个页面的评论，在页面的 Front-matter 中添加 comments 字段，设为 false。比如标签页不想要评论，则在标签页面中做如下设置<sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[【Hexo】nexT主题使用攻略基础——添加评论功能](https://blog.csdn.net/weixin_48927364/article/details/123321038)">[7]</span></a></sup>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: xxxxxxxxx</span><br><span class="line">date: 2022-03-06 17:05:24</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><h3 id="报错及解决"><a href="#报错及解决" class="headerlink" title="报错及解决"></a>报错及解决</h3><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346783.png">修改package.json少了个逗号；</p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346884.png"></p><p>原因：<code>talk-auto-init.js</code>有误，之前借鉴的是这篇文章：<a href="https://blog.jijian.link/2020-01-10/hexo-gitalk-auto-init/">hexo gitalk 评论自动初始化</a>里的<code>talk-auto-init.js</code>，造成错误，适用于我的是这篇文章的<code>talk-auto-init.js</code>：<a href="https://www.toimc.com/hexo-usage-3/">hexo主题next中gitalk配置与评论初始化</a>本文贴出的也是这篇<code>talk-auto-init.js</code>；</p><p>解决方案：修改 <code>talk-auto-init.js</code> ：</p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346983.png"></p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346081.png"></p><p>修改之后还是有一些成功了，有一些还是报错，直接删除用第一篇的文章的<code>talk-auto-init.js</code>，用第二篇文章的<code>talk-auto-init.js</code>，再改个人配置即可；</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://xinyufeng.net/2020/06/01/Hexo-Next%E4%B8%BB%E9%A2%98-%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/">Hexo Next主题 添加文章评论功能</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://eminoda.github.io/2021/06/16/hexo-gitalk-comment-plugins-in-github-issue/?">如何在 hexo 博客中，集成 gitalk 评论插件</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.jijian.link/2020-01-10/hexo-gitalk-auto-init/">hexo gitalk 评论自动初始化</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://juejin.cn/post/6844904006746112007">package.json 详解</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://white-than-wood.zone/2022/08/30/hexo-next/">hexo next</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.toimc.com/hexo-usage-3/">hexo主题next中gitalk配置与评论初始化</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/weixin_48927364/article/details/123321038">【Hexo】nexT主题使用攻略基础——添加评论功能</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;需求：&lt;br&gt;1、用Gitalk实现评论功能&lt;br&gt;2、去除之前的Valine实现的评论功能&lt;/p&gt;
&lt;p&gt;可在主题配置文件搜索&lt;code&gt;comment system&lt;/code&gt;，查看支持的评论系统；个人使用Gitalk进行配置；&lt;br&gt;&lt;img src=&quot;https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img202301/202301222346734.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="Software" scheme="https://www.sdhlw.top/tags/software/"/>
    
    <category term="Hexo" scheme="https://www.sdhlw.top/tags/hexo/"/>
    
    <category term="Gitalk" scheme="https://www.sdhlw.top/tags/gitalk/"/>
    
  </entry>
  
  <entry>
    <title>绘图的线型、颜色、标记</title>
    <link href="https://www.sdhlw.top/%E7%BB%98%E5%9B%BE%E7%9A%84%E7%BA%BF%E5%9E%8B%E3%80%81%E9%A2%9C%E8%89%B2%E3%80%81%E6%A0%87%E8%AE%B0/"/>
    <id>https://www.sdhlw.top/%E7%BB%98%E5%9B%BE%E7%9A%84%E7%BA%BF%E5%9E%8B%E3%80%81%E9%A2%9C%E8%89%B2%E3%80%81%E6%A0%87%E8%AE%B0/</id>
    <published>2023-01-19T15:18:15.000Z</published>
    <updated>2023-01-20T03:41:17.583Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h5 id="绘图：-plot"><a href="#绘图：-plot" class="headerlink" title="绘图：.plot()"></a>绘图：.plot()</h5><p><code>plt.plot()</code>：绘制点和线<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[matplotlib.pyplot.plot](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot)">[1]</span></a></sup></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> randn</span><br><span class="line">plt.plot(randn(<span class="number">50</span>).cumsum(),<span class="string">&#x27;k--&#x27;</span>)   <span class="comment"># 生成50个正态分布的数</span></span><br></pre></td></tr></table></figure><ul><li>randn函数返回一个或一组样本，具有标准正态分布；</li><li>cumsum函数计算各行的累加值<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="<https://blog.csdn.net/banana1006034246/article/details/78841461>">[2]</span></a></sup>；</li><li>in：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">a.cumsum()</span><br></pre></td></tr></table></figure><p>out：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([ <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>])</span><br></pre></td></tr></table></figure><span id="more"></span><p><code>k--</code> 是线性选项，指定黑色虚线；</p><h5 id="颜色（color），标记-marker-，线型-linestyle"><a href="#颜色（color），标记-marker-，线型-linestyle" class="headerlink" title="颜色（color），标记(marker)，线型(linestyle)"></a>颜色（color），标记(marker)，线型(linestyle)</h5><p>指定绿色虚线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ax.plot(x,y,<span class="string">&#x27;g--&#x27;</span>)  <span class="comment"># 一样的效果，更简洁</span></span><br><span class="line">ax.plot(x,y,linestyle=<span class="string">&#x27;--&#x27;</span>,color=<span class="string">&#x27;g&#x27;</span>)</span><br></pre></td></tr></table></figure><p>指定黑色虚线，标记类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(randn(<span class="number">50</span>).cumsum(),<span class="string">&#x27;ko--&#x27;</span>)</span><br><span class="line">plt.plot(randn(<span class="number">50</span>).cumsum(),color=<span class="string">&#x27;k&#x27;</span>,linestyle=<span class="string">&#x27;dashed&#x27;</span>,marker=<span class="string">&#x27;o&#x27;</span>)</span><br></pre></td></tr></table></figure><p>用字符串指定时，颜色一定在最前面，可规范顺序：color+marker+line style</p><p>Color<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="<http://math.loyola.edu/~loberbro/matlab/html/colorsInMatlab.html>">[3]</span></a></sup>：</p><table><thead><tr><th>Long Name</th><th>Short Name</th><th>RGB Triplet</th></tr></thead><tbody><tr><td>blue</td><td>b</td><td>[0,0,1]</td></tr><tr><td>black</td><td>k</td><td>[0,0,0]</td></tr><tr><td>red</td><td>r</td><td>[1,0,0]</td></tr><tr><td>green</td><td>g</td><td>[0,1,0]</td></tr><tr><td>yellow</td><td>y</td><td>[1,1,0]</td></tr><tr><td>cyan</td><td>c</td><td>[0,1,1]</td></tr><tr><td>magenta</td><td>m</td><td>[1,0,1]</td></tr><tr><td>white</td><td>w</td><td>[1,1,1]</td></tr></tbody></table><p>Marker<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="<https://www.mathworks.com/help/matlab/creating_plots/specify-line-and-marker-appearance-in-plots.html>">[4]</span></a></sup>：</p><table><thead><tr><th>Marker</th><th>Description</th><th>Resulting Marker</th></tr></thead><tbody><tr><td>“o”</td><td>Circle</td><td><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319310.png"></td></tr><tr><td>“+”</td><td>Plus sign</td><td><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319423.png"></td></tr><tr><td>“*”</td><td>Asterisk</td><td><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319507.png"></td></tr><tr><td>“.”</td><td>Point</td><td><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319579.png"></td></tr><tr><td>“x”</td><td>Cross</td><td><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319647.png"></td></tr><tr><td>“_”</td><td>Horizontal line</td><td><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319704.png"></td></tr><tr><td>“ | “</td><td>Vertical line</td><td><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319799.png"></td></tr><tr><td>“square”</td><td>Square</td><td><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319868.png"></td></tr><tr><td>“diamond”</td><td>Diamond</td><td><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319941.png"></td></tr><tr><td>“^”</td><td>Upward-pointing triangle</td><td><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319014.png"></td></tr><tr><td>“v”</td><td>Downward-pointing triangle</td><td><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319087.png"></td></tr><tr><td>“&gt;”</td><td>Right-pointing triangle</td><td><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319188.png"></td></tr><tr><td>“&lt;”</td><td>Left-pointing triangle</td><td><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319266.png"></td></tr><tr><td>“pentagram”</td><td>Pentagram</td><td><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319344.png"></td></tr><tr><td>“hexagram”</td><td>Hexagram</td><td><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319433.png"></td></tr></tbody></table><p>Line Style<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="<https://www.mathworks.com/help/matlab/creating_plots/specify-line-and-marker-appearance-in-plots.html>">[4]</span></a></sup>：</p><table><thead><tr><th align="left">Line Style</th><th align="left">Description</th><th align="left">Resulting Line</th></tr></thead><tbody><tr><td align="left">“-“</td><td align="left">Solid line</td><td align="left"><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319503.png"></td></tr><tr><td align="left">“- -“</td><td align="left">Dashed line</td><td align="left"><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319575.png"></td></tr><tr><td align="left">“:”</td><td align="left">Dotted line</td><td align="left"><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319674.png"></td></tr><tr><td align="left">“-.”</td><td align="left">Dash-dotted line</td><td align="left"><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319753.png"></td></tr></tbody></table><p>Draw Style：在线型图中，可按非线性插值；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(randn(<span class="number">50</span>),<span class="string">&#x27;ko--&#x27;</span>,drawstyle=<span class="string">&#x27;steps-post&#x27;</span>,label=<span class="string">&#x27;steps-post&#x27;</span>)  </span><br><span class="line">plt.legend(loc=<span class="string">&quot;best&quot;</span>)  <span class="comment"># 给图像加图例</span></span><br></pre></td></tr></table></figure><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319819.png"></p><p>目前有三种可选：steps、steps-mid、steps-post 具体差别还待探究；</p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301192319919.png"><br>该图出处：<a href="https://matplotlib.org/stable/gallery/lines_bars_and_markers/step_demo.html">https://matplotlib.org/stable/gallery/lines_bars_and_markers/step_demo.html</a></p><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot">matplotlib.pyplot.plot</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/banana1006034246/article/details/78841461">https://blog.csdn.net/banana1006034246/article/details/78841461</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://math.loyola.edu/~loberbro/matlab/html/colorsInMatlab.html">http://math.loyola.edu/~loberbro/matlab/html/colorsInMatlab.html</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.mathworks.com/help/matlab/creating_plots/specify-line-and-marker-appearance-in-plots.html">https://www.mathworks.com/help/matlab/creating_plots/specify-line-and-marker-appearance-in-plots.html</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;绘图：-plot&quot;&gt;&lt;a href=&quot;#绘图：-plot&quot; class=&quot;headerlink&quot; title=&quot;绘图：.plot()&quot;&gt;&lt;/a&gt;绘图：.plot()&lt;/h5&gt;&lt;p&gt;&lt;code&gt;plt.plot()&lt;/code&gt;：绘制点和线&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--error hint--medium hint--rounded hint--bounce&quot; aria-label=&quot;[matplotlib.pyplot.plot](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot)
&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; numpy.random &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; randn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.plot(randn(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;).cumsum(),&lt;span class=&quot;string&quot;&gt;&amp;#x27;k--&amp;#x27;&lt;/span&gt;)   &lt;span class=&quot;comment&quot;&gt;# 生成50个正态分布的数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;randn函数返回一个或一组样本，具有标准正态分布；&lt;/li&gt;
&lt;li&gt;cumsum函数计算各行的累加值&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--error hint--medium hint--rounded hint--bounce&quot; aria-label=&quot;&lt;https://blog.csdn.net/banana1006034246/article/details/78841461&gt;
&quot;&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;；&lt;/li&gt;
&lt;li&gt;in：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = np.array([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.cumsum()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;out：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;array([ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="Python" scheme="https://www.sdhlw.top/tags/python/"/>
    
    <category term="Matplotlib" scheme="https://www.sdhlw.top/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Obsidian/Typora图床：腾讯云COS+Picgo</title>
    <link href="https://www.sdhlw.top/obsidian%E5%9B%BE%E5%BA%8A%EF%BC%9A%E8%85%BE%E8%AE%AF%E4%BA%91cos-picgo/"/>
    <id>https://www.sdhlw.top/obsidian%E5%9B%BE%E5%BA%8A%EF%BC%9A%E8%85%BE%E8%AE%AF%E4%BA%91cos-picgo/</id>
    <published>2023-01-18T08:23:52.000Z</published>
    <updated>2023-01-18T14:47:24.010Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>需求：</p><ul><li><p>Obsidian实现图床功能</p></li><li><p>图床换成腾讯云</p></li><li><p>Obsidian&#x2F;Typora实现可选择图片是否上传图床</p><span id="more"></span></li></ul><h5 id="1、注册腾讯云账号，创建-COS-存储桶"><a href="#1、注册腾讯云账号，创建-COS-存储桶" class="headerlink" title="1、注册腾讯云账号，创建 COS 存储桶"></a>1、注册腾讯云账号，创建 COS 存储桶</h5><p>对象存储（Cloud Object Storage，COS）是腾讯云提供的⼀种存储海量⽂件的分布式存储服务，⽤户可通过⽹络随时存储和查看数据。通过 COS 可以进⾏任意格式⽂件的上传、下载和管理。<br>注册：略<br>创建 COS 存储桶<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://cloud.tencent.com/developer/article/2175760?from=15425&areaSource=102001.1&traceId=rScBYp1UZMEgRry4X3S5G">[1]</span></a></sup>：<br><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301181616052.png"><br><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301181616087.png"></p><ul><li>高级可选配置默认即可</li><li>配置好之后创建</li></ul><h5 id="2、获取腾讯云COS密钥及基本信息"><a href="#2、获取腾讯云COS密钥及基本信息" class="headerlink" title="2、获取腾讯云COS密钥及基本信息"></a>2、获取腾讯云COS密钥及基本信息</h5><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301181616142.png"></p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301181616198.png"><br>在控制台 对象存储 中获取基本信息：<br><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301181616267.png"></p><h5 id="3、Picgo配置"><a href="#3、Picgo配置" class="headerlink" title="3、Picgo配置"></a>3、Picgo配置</h5><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301181616330.png"></p><h5 id="4、Obsidian-x2F-Typora配置及图片上传"><a href="#4、Obsidian-x2F-Typora配置及图片上传" class="headerlink" title="4、Obsidian &#x2F; Typora配置及图片上传"></a>4、Obsidian &#x2F; Typora配置及图片上传</h5><p>安装插件：Image auto upload Plugin<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://sspai.com/post/72562">[2]</span></a></sup><br>默认配置，粘贴图片即可自动上传图片到图床。</p><p>个人需求配置：取消粘贴即自动上传，图片有需要上传到图床时，通过命令行模式一键上传文章内的图片。</p><p>命令行模式：<br>以文章为单位，在 Obsidian 中，按下命令行快捷键 Ctrl &#x2F; Command + P，并选择 “upload all images”<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://sspai.com/post/75765">[3]</span></a></sup>。</p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301181616415.png"></p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301181616484.png"></p><p>Typora配置情况：</p><p>同样设置粘贴不自动上传图片，需上传时右键再点击上传图片即可；</p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301182208994.png"></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://cloud.tencent.com/developer/article/2175760?from=15425&amp;areaSource=102001.1&amp;traceId=rScBYp1UZMEgRry4X3S5G<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://sspai.com/post/72562<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://sspai.com/post/75765<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Obsidian实现图床功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图床换成腾讯云&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Obsidian&amp;#x2F;Typora实现可选择图片是否上传图床&lt;/p&gt;</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="Obsidian" scheme="https://www.sdhlw.top/tags/obsidian/"/>
    
    <category term="Picgo" scheme="https://www.sdhlw.top/tags/picgo/"/>
    
    <category term="腾讯云COS" scheme="https://www.sdhlw.top/tags/%E8%85%BE%E8%AE%AF%E4%BA%91cos/"/>
    
    <category term="图床" scheme="https://www.sdhlw.top/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>connecting to kernel：python</title>
    <link href="https://www.sdhlw.top/connecting-to-kernel%EF%BC%9Apython/"/>
    <id>https://www.sdhlw.top/connecting-to-kernel%EF%BC%9Apython/</id>
    <published>2023-01-17T14:30:05.000Z</published>
    <updated>2023-01-18T14:49:45.799Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>使用环境：Vscode 和Jupyter Notebook 相关插件</p><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>Vscode连接python环境时右下角始终显示connecting to kernel，无法执行基本代码功能。</p><span id="more"></span><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>1、删除多余的python版本</p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301182151530.png"></p><p>需要删除的版本，我已删除，这里用保留版本的python做演示；<br>注意，用该方法卸载之后，要去python的安装目录下检查，一定要删除干净，否则重启之后，修改过的环境变量可能会复原为原来的设置；</p><p>python默认安装路径：<code>C:\Users\你的用户名\AppData\Local\Programs\Python</code><br>将你要删除的python版本的整个文件夹删除</p><p>2、配置好环境变量<br>右键此电脑–&gt;属性–&gt;高级系统设置–&gt;环境变量</p><p><img src="https://my-picture-1316590908.cos.ap-chongqing.myqcloud.com/img/202301182156852.png" alt="image-20230118215647728"></p><p>将删除的python版本的环境变量也删除，用户变量和系统变量都需删除（点击相应环境变量，删除，确定即可）；</p><p>将保留的python版本的两个目录都添加到path里（点击新建，粘贴目录，点击确定即可），用户变量和系统变量都添加进去；<br><code>C:\Users\你的用户名\AppData\Local\Programs\Python\Python310</code><br><code>C:\Users\你的用户名\AppData\Local\Programs\Python\Python310\Scripts</code></p><p>3、重启电脑，查看环境变量是否发生改变，若与上两步设置一致，则完成；若环境变量改变，可能是python没有删除干净，确保第一步完成；</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用环境：Vscode 和Jupyter Notebook 相关插件&lt;/p&gt;
&lt;h5 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h5&gt;&lt;p&gt;Vscode连接python环境时右下角始终显示connecting to kernel，无法执行基本代码功能。&lt;/p&gt;</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="Vscode" scheme="https://www.sdhlw.top/tags/vscode/"/>
    
    <category term="Python" scheme="https://www.sdhlw.top/tags/python/"/>
    
    <category term="Jupyter Notebook" scheme="https://www.sdhlw.top/tags/jupyter-notebook/"/>
    
  </entry>
  
  <entry>
    <title>Vscode的使用</title>
    <link href="https://www.sdhlw.top/2022-09-01-10-33-44-Vscode%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.sdhlw.top/2022-09-01-10-33-44-Vscode%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-09-01T02:34:09.000Z</published>
    <updated>2023-01-17T09:52:06.160Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>setting.json文件配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;            //有自己添加的内容都要放到这个花括号里</span><br><span class="line"></span><br><span class="line">//配置a</span><br><span class="line">adfadfd,     //如果后面还有内容，前面的语句一定要有一个英文逗号</span><br><span class="line">// 配置b</span><br><span class="line">adfadff</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;setting.json文件配置：&lt;/p&gt;
&lt;figure class=&quot;h</summary>
      
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="Software" scheme="https://www.sdhlw.top/tags/software/"/>
    
    <category term="Vscode" scheme="https://www.sdhlw.top/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>Python 链表</title>
    <link href="https://www.sdhlw.top/Python%E9%93%BE%E8%A1%A8/"/>
    <id>https://www.sdhlw.top/Python%E9%93%BE%E8%A1%A8/</id>
    <published>2022-08-31T02:22:46.000Z</published>
    <updated>2023-01-18T15:03:55.707Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>链表的基本结构：</p><p><img src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208311024919.png" alt="image-20220831102428767"></p><ul><li><p>节点：每个节点有两个部分，左边部分称为值域，用来存放用户数据；右边部分称为指针域，用来存放指向下一个元素的指针。</p></li><li><p>head：head节点永远指向第一个节点</p></li><li><p>tail：tail永远指向最后一个节点</p></li><li><p>None：链表中最后一个节点的指针域为None值</p><span id="more"></span></li></ul><p>该代码来源：<a href="https://www.bilibili.com/video/BV1nK4y1v7uv?share_source=copy_web&vd_source=7f2a81e814313c699f856c2ec72be7d9">Python数据结构与算法03——单链表、双链表、单项循环链表</a> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>(<span class="title class_ inherited__">object</span>):  <span class="comment"># 定义节点类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,elem</span>):</span><br><span class="line">        self.elem = elem </span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleLinkList</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># 定义单链表类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,node=<span class="literal">None</span></span>):</span><br><span class="line">        self._head = node</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._head == <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 链表长度</span></span><br><span class="line">        <span class="comment"># cur 游标，用于移动遍历节点</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        <span class="comment"># count 记录数量</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">travel</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 遍历整个链表</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(cur.elem,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self,item</span>):</span><br><span class="line">        <span class="comment"># 链表头部添加元素，头插法</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        node.<span class="built_in">next</span> = self._head</span><br><span class="line">        self._head = node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self,item</span>):</span><br><span class="line">        <span class="comment"># 链表尾部添加元素</span></span><br><span class="line">        node = Node(item)</span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            self._head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = self._head</span><br><span class="line">            <span class="keyword">while</span> cur.<span class="built_in">next</span> != <span class="literal">None</span>:</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">            cur.<span class="built_in">next</span> =node</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self,pos,item</span>):</span><br><span class="line">        <span class="comment"># 指定位置添加元素</span></span><br><span class="line">        <span class="comment">#:param pos 从0开始</span></span><br><span class="line">        <span class="keyword">if</span> pos &lt;= <span class="number">0</span>:</span><br><span class="line">            self.add(item)</span><br><span class="line">        <span class="keyword">elif</span> pos &gt; (self.length()-<span class="number">1</span>):</span><br><span class="line">            self.append(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pre = self._head</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> count &lt; (pos-<span class="number">1</span>):</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                pre = pre.<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># 当循环退出后，pre指向pos-1位置</span></span><br><span class="line">            node = Node(item)</span><br><span class="line">            node.<span class="built_in">next</span> = pre.<span class="built_in">next</span></span><br><span class="line">            pre.<span class="built_in">next</span> = node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="comment"># 删除节点</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.elem == item:</span><br><span class="line">                <span class="comment"># 先判断此节点是否是头节点</span></span><br><span class="line">                <span class="comment"># 头节点</span></span><br><span class="line">                <span class="keyword">if</span> cur == self._head:</span><br><span class="line">                    self._head = cur.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pre.<span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pre = cur</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self,item</span>):</span><br><span class="line">        <span class="comment"># 查找节点是否存在</span></span><br><span class="line">        cur = self._head</span><br><span class="line">        <span class="keyword">while</span> cur != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> cur.elem == item:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        ll = SingleLinkList()</span><br><span class="line">        <span class="built_in">print</span>(ll.is_empty())</span><br><span class="line">        <span class="built_in">print</span>(ll.length())</span><br><span class="line"></span><br><span class="line">        ll.append(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(ll.is_empty())</span><br><span class="line">        <span class="built_in">print</span>(ll.length())</span><br><span class="line"></span><br><span class="line">        ll.append(<span class="number">2</span>)</span><br><span class="line">        ll.add(<span class="number">8</span>)</span><br><span class="line">        ll.append(<span class="number">3</span>)</span><br><span class="line">        ll.append(<span class="number">4</span>)</span><br><span class="line">        ll.append(<span class="number">5</span>)</span><br><span class="line">        ll.append(<span class="number">6</span>)</span><br><span class="line">        <span class="comment"># 8 1 2 3 4 5 6 </span></span><br><span class="line">        ll.insert(-<span class="number">1</span>,<span class="number">9</span>)  <span class="comment"># 9 8 1 23456</span></span><br><span class="line">        ll.travel()</span><br><span class="line">        ll.insert(<span class="number">3</span>,<span class="number">100</span>) <span class="comment"># 9 8 1 100 2 3456</span></span><br><span class="line">        ll.travel()</span><br><span class="line">        ll.insert(<span class="number">10</span>,<span class="number">200</span>) <span class="comment"># 9 8 1 100 23456 200</span></span><br><span class="line">        ll.travel()</span><br><span class="line">        ll.remove(<span class="number">100</span>)</span><br><span class="line">        ll.travel()</span><br><span class="line">        ll.remove(<span class="number">9</span>)</span><br><span class="line">        ll.travel()</span><br><span class="line">        ll.remove(<span class="number">200</span>)</span><br><span class="line">        ll.travel()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;链表的基本结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208311024919.png&quot; alt=&quot;image-20220831102428767&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;节点：每个节点有两个部分，左边部分称为值域，用来存放用户数据；右边部分称为指针域，用来存放指向下一个元素的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;head：head节点永远指向第一个节点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tail：tail永远指向最后一个节点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;None：链表中最后一个节点的指针域为None值&lt;/p&gt;</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="Python" scheme="https://www.sdhlw.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>面向对象VS面向过程</title>
    <link href="https://www.sdhlw.top/2022-08-30-15-11-00-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1VS%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/"/>
    <id>https://www.sdhlw.top/2022-08-30-15-11-00-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1VS%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/</id>
    <published>2022-08-30T07:11:36.000Z</published>
    <updated>2023-01-17T10:07:05.868Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本文为转载，原文为：<a href="http://zhidao.baidu.com/question/2089034/answer/9637033">http://zhidao.baidu.com/question/2089034/answer/9637033</a></p><h3 id="1、概念："><a href="#1、概念：" class="headerlink" title="1、概念："></a>1、概念：</h3><p>面向过程就是分析出解决问题所需要的<strong>步骤</strong>，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</p><p>面向对象是把构成问题事务分解成各个<strong>对象</strong>，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。</p><span id="more"></span><h3 id="2、实际案例讲解："><a href="#2、实际案例讲解：" class="headerlink" title="2、实际案例讲解："></a>2、实际案例讲解：</h3><p>例如五子棋，面向过程的设计思路就是首先分析问题的步骤：1、开始游戏，2、黑子先走，3、绘制画面，4、判断输赢，5、轮到白子，6、绘制画面，7、判断输赢，8、返回步骤2，9、输出最后结果。把上面每个步骤用分别的函数来实现，问题就解决了。</p><p>而面向对象的设计则是从另外的思路来解决问题。整个五子棋可以分为 1、黑白双方，这两方的行为是一模一样的，2、棋盘系统，负责绘制画面，3、规则系统，负责判定诸如犯规、输赢等。第一类对象（玩家对象）负责接受用户输入，并告知第二类对象（棋盘对象）棋子布局的变化，棋盘对象接收到了棋子的i变化就要负责在屏幕上面显示出这种变化，同时利用第三类对象（规则系统）来对棋局进行判定。</p><p>可以明显地看出，<strong>面向对象是以功能来划分问题，而不是步骤。</strong>同样是绘制棋局，这样的行为在面向过程的设计中分散在了总多步骤中，很可能出现不同的绘制版本，因为通常设计人员会考虑到实际情况进行各种各样的简化。而面向对象的设计中，绘图只可能在棋盘对象中出现，从而保证了绘图的统一。</p><p>功能上的统一保证了面向对象设计的可扩展性。比如我要加入悔棋的功能，如果要改动面向过程的设计，那么从输入到判断到显示这一连串的步骤都要改动，甚至步骤之间的循序都要进行大规模调整。如果是面向对象的话，只用改动棋盘对象就行了，棋盘系统保存了黑白双方的棋谱，简单回溯就可以了，而显示和规则判断则不用顾及，同时整个对对象功能的调用顺序都没有变化，改动只是局部的。</p><p>再比如我要把这个五子棋游戏改为围棋游戏，如果你是面向过程设计，那么五子棋的规则就分布在了你的程序的每一个角落，要改动还不如重写。但是如果你当初就是面向对象的设计，那么你只用改动规则对象就可以了，五子棋和围棋的区别不就是规则吗？（当然棋盘大小好像也不一样，但是你会觉得这是一个难题吗？直接在棋盘对象中进行一番小改动就可以了。）而下棋的大致步骤从面向对象的角度来看没有任何变化。</p><p>当然，要达到改动只是局部的需要设计的人有足够的经验，使用对象不能保证你的程序就是面向对象，初学者或者很蹩脚的程序员很可能以面向对象之虚而行面向过程之实，这样设计出来的所谓面向对象的程序很难有良好的可移植性和可扩展性。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文为转载，原文为：&lt;a href=&quot;http://zhidao.baidu.com/question/2089034/answer/9637033&quot;&gt;http://zhidao.baidu.com/question/2089034/answer/9637033&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、概念：&quot;&gt;&lt;a href=&quot;#1、概念：&quot; class=&quot;headerlink&quot; title=&quot;1、概念：&quot;&gt;&lt;/a&gt;1、概念：&lt;/h3&gt;&lt;p&gt;面向过程就是分析出解决问题所需要的&lt;strong&gt;步骤&lt;/strong&gt;，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。&lt;/p&gt;
&lt;p&gt;面向对象是把构成问题事务分解成各个&lt;strong&gt;对象&lt;/strong&gt;，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。&lt;/p&gt;</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="计算机基础" scheme="https://www.sdhlw.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter Notebook 使用</title>
    <link href="https://www.sdhlw.top/jupyter-notebook-%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.sdhlw.top/jupyter-notebook-%E4%BD%BF%E7%94%A8/</id>
    <published>2022-08-28T13:35:48.000Z</published>
    <updated>2023-01-17T09:39:31.086Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="1、改变默认路径"><a href="#1、改变默认路径" class="headerlink" title="1、改变默认路径"></a>1、改变默认路径</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config  # 若已有jupyter_notebook_config.py文件则不用执行</span><br></pre></td></tr></table></figure><p>搜索找到jupyter_notebook_config.py文件，打开文件，找到<code>c.NotebookApp.notebook_dir</code>这行，在引号内填写自己事先创建的文件夹地址(注意地址的填写方式：<code>D://adf//fafad</code>)。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://zhuanlan.zhihu.com/p/70420213">[1]</span></a></sup></p><span id="more"></span><h3 id="2、新建报错"><a href="#2、新建报错" class="headerlink" title="2、新建报错"></a>2、新建报错</h3><p><code>An error occurred while creating a new notebook</code></p><p>找到jupyter_notebook_config.py文件，打开文件，找到<code>c.NotebookApp.allow_origin</code>这行，在引号里<br>填入<code>*</code>，重启软件即可。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://www.bilibili.com/read/cv13682239">[2]</span></a></sup></p><h3 id="3、debug"><a href="#3、debug" class="headerlink" title="3、debug"></a>3、debug</h3><p>在需要停下来的地方，插入<code>import pdb; pdb.set_trace()</code><br><code>n</code>执行下一行，<code>c</code>执行下面所有代码。<code>h</code>可以查看所有命令。<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://www.jianshu.com/p/6ba71f336121">[3]</span></a></sup></p><p><img src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208291609292.png" alt="image-20220829160917356"></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://zhuanlan.zhihu.com/p/70420213<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.bilibili.com/read/cv13682239<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.jianshu.com/p/6ba71f336121<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1、改变默认路径&quot;&gt;&lt;a href=&quot;#1、改变默认路径&quot; class=&quot;headerlink&quot; title=&quot;1、改变默认路径&quot;&gt;&lt;/a&gt;1、改变默认路径&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jupyter notebook --generate-config  # 若已有jupyter_notebook_config.py文件则不用执行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;搜索找到jupyter_notebook_config.py文件，打开文件，找到&lt;code&gt;c.NotebookApp.notebook_dir&lt;/code&gt;这行，在引号内填写自己事先创建的文件夹地址(注意地址的填写方式：&lt;code&gt;D://adf//fafad&lt;/code&gt;)。&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--error hint--medium hint--rounded hint--bounce&quot; aria-label=&quot;https://zhuanlan.zhihu.com/p/70420213
&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="Software" scheme="https://www.sdhlw.top/tags/software/"/>
    
    <category term="Python" scheme="https://www.sdhlw.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python的正则表达式</title>
    <link href="https://www.sdhlw.top/Python%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://www.sdhlw.top/Python%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-08-19T13:47:36.000Z</published>
    <updated>2023-01-17T09:38:15.746Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>re库是Python关于正则表达式的一个内置模块，使用时无需下载，直接import即可。</p><p>这个模块提供与Perl语言中类似的正则表达式匹配操作，支持bytes和unicode两种格式的字符串，处理的字符串可以包含空字符以及超出ASCII码范围的字符(比如中文字符)。</p> <span id="more"></span> <p>本文主要来源是Python3.10.6 re库官方文档，提及的函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">re.match(),re.fullmatch(),re.search(),re.findall(),group(),groups()</span><br><span class="line">re.split()</span><br><span class="line">re.sub(),re.subn()</span><br><span class="line">re.compile(),re.finditer</span><br><span class="line">re.escape()</span><br><span class="line">re.purge()</span><br></pre></td></tr></table></figure><h3 id="1、查找"><a href="#1、查找" class="headerlink" title="1、查找"></a>1、查找</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">re.match(pattern, string, flags=0) # 从字符串的起始位置匹配一个模式，匹配返回一个对象，不匹配返回none</span><br><span class="line">re.fullmatch(pattern, string, flags=0) # 整个字符串与正则完全匹配，返回一个对象，不匹配返回none</span><br><span class="line">re.search(pattern, string, flags=0)   # 扫描整个字符串并返回第一个成功的匹配对象。</span><br><span class="line">re.findall(pattern, string, flags=0)  # 在字符串中找到匹配的所有子串，并返回一个列表，有多个匹配模式，则返回元组列表，如果没有找到匹配的，则返回空列表。</span><br></pre></td></tr></table></figure><ul><li>pattern：正则中的模式字符串。pattern形式：<code>r&quot;正则&quot;</code></li><li>string：要被查找替换的原始字符串。</li><li>flags：标志位，用于控制正则表达式的匹配方式<ul><li>re.I：不区分大小写</li><li>re.M：多行匹配，影响 ^ 和 $</li><li>re.S：使 <code>.</code> 匹配包括换行在内的所有字符</li><li>re.U：根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.</li><li>re.L：做本地化识别（locale-aware）匹配</li><li>re.X：该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</li></ul></li><li><code>group(num)</code> 或 <code>groups()</code>是匹配对象（match object）的函数，可用来获取匹配到的内容(获取整体或括号的捕获内容)。<code>group（0）</code>和<code>group（）</code>效果相同，均为获取取得的字符串整体，<code>group(n)</code>返回第n组括号匹配的字符，groups() 返回所有括号匹配的字符，以tuple格式。</li></ul><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Hello World WoHe&quot;</span></span><br><span class="line"></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&quot;he&quot;</span>,<span class="built_in">str</span>,flags=re.I)</span><br><span class="line"><span class="comment"># out: &lt;re.Match object; span=(0, 2), match=&#x27;He&#x27;&gt;</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">r&quot;wo&quot;</span>,<span class="built_in">str</span>,flags=re.I)   <span class="comment"># match只查找字符串开头</span></span><br><span class="line"><span class="comment"># out: 空 </span></span><br><span class="line">re.fullmatch(<span class="string">r&quot;^H\w+\s\w+\s\w+&quot;</span>,<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># out：&lt;re.Match object; span=(0, 16), match=&#x27;Hello World WoHe&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r&quot;wo&quot;</span>,<span class="built_in">str</span>,flags=re.I)  <span class="comment"># search只返回第一个成功匹配</span></span><br><span class="line"><span class="comment"># out：&lt;re.Match object; span=(6, 8), match=&#x27;Wo&#x27;&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">re.search(<span class="string">r&quot;([a-zA-Z]*)\s([a-zA-Z]*)\s([a-zA-Z]*)&quot;</span>,<span class="built_in">str</span>).group()</span><br><span class="line"><span class="comment"># out：&#x27;Hello World WoHe&#x27;</span></span><br><span class="line">re.search(<span class="string">r&quot;([a-zA-Z]*)\s([a-zA-Z]*)\s([a-zA-Z]*)&quot;</span>,<span class="built_in">str</span>).group(<span class="number">0</span>)  <span class="comment"># group（0）和group（）效果相同，取获得整体</span></span><br><span class="line"><span class="comment"># out：&#x27;Hello World WoHe&#x27;</span></span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r&quot;([a-zA-Z]*)\s([a-zA-Z]*)\s([a-zA-Z]*)&quot;</span>,<span class="built_in">str</span>).group(<span class="number">1</span>)  <span class="comment"># 获得第一个括号捕获的内容</span></span><br><span class="line"><span class="comment"># out：&#x27;Hello&#x27;</span></span><br><span class="line">re.search(<span class="string">r&quot;([a-zA-Z]*)\s([a-zA-Z]*)\s([a-zA-Z]*)&quot;</span>,<span class="built_in">str</span>).group(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># out：&#x27;World&#x27;</span></span><br><span class="line">re.search(<span class="string">r&quot;([a-zA-Z]*)\s([a-zA-Z]*)\s([a-zA-Z]*)&quot;</span>,<span class="built_in">str</span>).group(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># out：&#x27;WoHe&#x27;</span></span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r&quot;([a-zA-Z]*)\s([a-zA-Z]*)\s([a-zA-Z]*)&quot;</span>,<span class="built_in">str</span>).groups() <span class="comment"># 返回所有括号匹配的字符</span></span><br><span class="line"><span class="comment"># out：(&#x27;Hello&#x27;, &#x27;World&#x27;, &#x27;WoHe&#x27;)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Apple Banana Pear App applet Bear&quot;</span></span><br><span class="line">re.findall(<span class="string">r&quot;\bA\w+&quot;</span>,<span class="built_in">str</span>,flags=re.I)</span><br><span class="line"><span class="comment"># out：[&#x27;Apple&#x27;, &#x27;App&#x27;, &#x27;applet&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="2、替换"><a href="#2、替换" class="headerlink" title="2、替换"></a>2、替换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>) <span class="comment"># 将匹配的内容替换成其他内容</span></span><br><span class="line">re.subn(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>) <span class="comment">#subn方法与sub()相同, 但返回一个元组, 其中包含新字符串和替换次数。 </span></span><br></pre></td></tr></table></figure><ul><li>pattern : 正则中的模式字符串。pattern形式：<code>r&quot;正则&quot;</code></li><li>repl : 替换的字符串，也可为一个函数。</li><li>string : 要被查找替换的原始字符串。</li><li>count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">re.sub(<span class="string">r&quot;(?=9)&quot;</span>,<span class="string">&quot;,&quot;</span>,<span class="string">&quot;123456789&quot;</span>)  <span class="comment"># 在9前面插入一个逗号</span></span><br><span class="line"><span class="comment"># out：&#x27;12345678,9&#x27;</span></span><br><span class="line">re.sub(<span class="string">r&quot;(?=a)&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;AAAAAAAA&quot;</span>,count=<span class="number">3</span>,flags=re.I) <span class="comment"># 在三个A前面插入.</span></span><br><span class="line"><span class="comment"># out：&#x27;.A.A.AAAAAA&#x27;</span></span><br><span class="line">re.subn(<span class="string">r&quot;(?=a)&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;AAAAAAAA&quot;</span>,count=<span class="number">3</span>,flags=re.I)</span><br><span class="line"><span class="comment"># out：(&#x27;.A.A.AAAAAA&#x27;, 3)</span></span><br></pre></td></tr></table></figure><h3 id="3、分隔"><a href="#3、分隔" class="headerlink" title="3、分隔"></a>3、分隔</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.split(pattern, string, maxsplit=<span class="number">0</span>, flags=<span class="number">0</span>) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;1a2b3c&quot;</span></span><br><span class="line">re.split(<span class="string">r&quot;\d&quot;</span>,<span class="built_in">str</span>,maxsplit=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># out：[&#x27;&#x27;, &#x27;a&#x27;, &#x27;b3c&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="4、正则表达式复用"><a href="#4、正则表达式复用" class="headerlink" title="4、正则表达式复用"></a>4、正则表达式复用</h3><p>一个脚本中，若多次使用到同一个正则表达式，为提高效率，可使用<code>re.compile()</code>生成一个正则表达式的对象，进行多次复用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.<span class="built_in">compile</span>(pattern,flags=<span class="number">0</span>)  <span class="comment"># 语法格式</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;ads456&#x27;</span></span><br><span class="line">fnum = re.<span class="built_in">compile</span>(<span class="string">r&quot;\d+&quot;</span>)</span><br><span class="line">fnum.search(<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># out：&lt;re.Match object; span=(3, 6), match=&#x27;456&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&#x27;fadskgf&#x27;</span></span><br><span class="line">falp = re.<span class="built_in">compile</span>(<span class="string">r&quot;(AD)+&quot;</span>,flags=re.I)</span><br><span class="line">falp.search(str1)</span><br><span class="line"><span class="comment"># out：&lt;re.Match object; span=(1, 3), match=&#x27;ad&#x27;&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Apple Banana Pear App applet Bear&quot;</span></span><br><span class="line">fia = re.<span class="built_in">compile</span>(<span class="string">r&quot;\bA\w+&quot;</span>,flags=re.I)</span><br><span class="line">fia.findall(<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># out：[&#x27;Apple&#x27;, &#x27;App&#x27;, &#x27;applet&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="5、迭代器"><a href="#5、迭代器" class="headerlink" title="5、迭代器"></a>5、迭代器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.finditer(pattern, string, flags=<span class="number">0</span>) <span class="comment"># 在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个匹配对象（match object）迭代器返回。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;1a2b3c&quot;</span></span><br><span class="line">it = re.finditer(<span class="string">r&quot;\d&quot;</span>,<span class="built_in">str</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it:</span><br><span class="line">    <span class="built_in">print</span>(i.group())</span><br><span class="line"><span class="comment"># out：</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="6、其他"><a href="#6、其他" class="headerlink" title="6、其他"></a>6、其他</h3><ul><li><p><code>re.escape(pattern)</code>：转义 <code>pattern</code> 中的特殊字符即转义正则表达式中的特殊字符，一般用于目标文本中含有正则表达式元字符的情况。</p></li><li><p><code>re.purge()</code>：清除正则表达式缓存。编译正则表达式时，将对结果进行缓存，确保短期内如果再次编译相同的正则表达式，则可以直接检索结果，清空缓存可以节省开销。</p></li></ul><h3 id="推荐阅读："><a href="#推荐阅读：" class="headerlink" title="推荐阅读："></a>推荐阅读：</h3><p>1、<a href="https://docs.python.org/3/library/re.html">re — Regular expression operations — Python 3.10.6 documentation</a><br>2、<a href="https://www.runoob.com/python/python-reg-expressions.html">Python 正则表达式 | 菜鸟教程 (runoob.com)</a><br>3、<a href="https://docs.python.org/3/howto/regex.html">Regular Expression HOWTO — Python 3.10.6 documentation</a><br>4、<a href="https://zhuanlan.zhihu.com/p/361601136">https://zhuanlan.zhihu.com/p/361601136</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;re库是Python关于正则表达式的一个内置模块，使用时无需下载，直接import即可。&lt;/p&gt;
&lt;p&gt;这个模块提供与Perl语言中类似的正则表达式匹配操作，支持bytes和unicode两种格式的字符串，处理的字符串可以包含空字符以及超出ASCII码范围的字符(比如中文字符)。&lt;/p&gt;</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="Regex" scheme="https://www.sdhlw.top/tags/regex/"/>
    
    <category term="Python" scheme="https://www.sdhlw.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式基础</title>
    <link href="https://www.sdhlw.top/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/"/>
    <id>https://www.sdhlw.top/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/</id>
    <published>2022-08-18T02:31:44.000Z</published>
    <updated>2023-01-17T09:43:20.999Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><p>元字符是具有特殊意义的字符，其定义在正则表达式中并不是统一的。元字符在字符组外和字符组内意义不一样。</p><ul><li><p><code>^</code>: 脱字符，开头锚点</p></li><li><p><code>$</code>:美元符，结尾锚点</p></li><li><p><code>[]</code>: 字符组</p></li><li><p><code>[^]</code>：排除型字符组</p></li><li><p><code>.</code>：点号，单个任意字符（字符组外部）</p></li><li><p><code>\&lt;</code>：单词起始位置（某些egrep可能不支持，perl使用<code>\b</code>）</p></li><li><p><code>\&gt;</code>：单词结束位置（某些egrep可能不支持，perl使用<code>\b</code>）</p></li><li><p><code>|</code>： 或者，也叫多选分支（多选项），分隔两边表达式</p></li><li><p><code>()</code>：限制竖线（多选项）范围；字符组成单元，受量词作用；反向引用捕获文本</p><ul><li><p><code>（？：）</code>：只分组不捕获，及得到的文本不会保存到变量中，不影响捕获计数</p> <span id="more"></span></li></ul></li><li><p>量词：</p><ul><li><code>？</code>：可选项，前元素出现0&#x2F;1次</li><li><code>+</code>： 重复出现，前元素&gt;&#x3D;1</li><li><code>*</code>：重复出现，前元素&gt;&#x3D;0</li></ul></li><li><p>区间量词：</p><ul><li><p><code>&#123;&#125;</code>：自定义重现次数</p></li><li><table><thead><tr><th>符号</th><th></th><th></th></tr></thead><tbody><tr><td>o{n,m}</td><td>前一个字母o，至少连续出现n次，最多连续出现m次</td><td>≥n ≤m</td></tr><tr><td>o{n}</td><td>前一个字母o，连续出现n次</td><td>&#x3D;&#x3D;n</td></tr><tr><td>o{n,}</td><td>前一个字母o，至少连续出现n次</td><td>≥n</td></tr><tr><td>o{,m}</td><td>前一个字母o，最多连续出现m次</td><td>≤m</td></tr></tbody></table></li></ul></li><li><p><code>\1，\2</code>：反向引用 （匹配第一组、第二组括号内字表达式匹配的文本）</p></li></ul><p><code>\</code>: 转义符</p><p><code>-</code>：字符组内：普通符号（[之后，[^之后）、表示范围</p><p><code>.*</code>：一组任何字符（某些工具中，不包括换行符）</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>\t</td><td>制表符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车符</td></tr><tr><td>\s</td><td>任何空白字符（whitespace character)：空格符、制表符、进纸符、回车符</td></tr><tr><td>\S</td><td>除\s之外的任何字符</td></tr><tr><td>\w</td><td>即[a-zA-Z0-9] 可使用 \w+来匹配一个单词</td></tr><tr><td>\W</td><td>除\w之外的任何字符，也就是<code>[^a-zA-Z0-9]</code></td></tr><tr><td>\d</td><td>[0-9],即数字</td></tr><tr><td>\D</td><td>除\d外的任何字符，即<code>[^0-9]</code></td></tr></tbody></table><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul><li><p>一个字符组，即使是排除型字符组，也需要一个字符</p></li><li><p>字符组只能匹配一个字符，多选项匹配任意长度文本</p></li><li><p>锚点可以分为两大类：简单锚点（^、$、\G、\b、…）和复杂锚点（例如顺序环视和逆序环视）。</p></li><li><p>egrep的正则使用：<code>egrep &#39;^(from|subject)：&#39; file </code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208191721658.png" alt="image-20220818103601114"></p><ul><li><p><code>(first|lst)</code> &#x3D; <code>(fir|l)st</code></p></li><li><p><code>^a|b|c:.</code>与<code>^(a|b|c):.</code>不一样，括号的作用就是分组</p></li><li><p><code>\&lt;cat\&gt;</code> ：单词分界符（不是所有egrep都支持），匹配cat，单词版本的<code>^</code>和<code>$</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208181102326.png" alt="image-20220818110215589"></p><h1 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h1><p>匹配与表达式先前部分匹配的同样的文本。</p><p><code>([a-z])([0-9]) \1\2</code>：<code>\1</code>代表<code>[a-z]</code>匹配的内容，<code>\2</code>代表<code>[0-9]匹配的内容</code></p><p>匹配<code>the the </code>：</p><ul><li><p><code>\&lt;the the\&gt;</code></p></li><li><p><code>\&lt;(A-Za-z+) +\1\&gt;</code> 比第一种找到的范围更大</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$price=~s/(\.\d\d[1-9]?)\d*/$1/</span><br><span class="line">$price   =~   s/  (\.\d\d[1-9]?)\d*  /$1/</span><br><span class="line"># 用括号内的内容   替换掉  括号内容加一个数字字符</span><br><span class="line"># 即去掉数字</span><br><span class="line">$price    # perl的变量</span><br><span class="line">=~  # 连接</span><br><span class="line">s/regex/replacement/ #查找和替换</span><br><span class="line">s/regex/replacement/g # g全局操作，即全局替换</span><br><span class="line">s/regex/replacement/i # i忽略大小写</span><br><span class="line">m/regex/ # 正则表达式匹配文本</span><br></pre></td></tr></table></figure><h1 id="环视（断言）"><a href="#环视（断言）" class="headerlink" title="环视（断言）"></a>环视（断言）</h1><p>选择一个位置：顺序环视，即从左到右，匹配字符，最后回到原点即左边，肯定则有该匹配字符，否定则没有；逆序环视，即从右往左，匹配字符，最后回到原点即右边，肯定则有该匹配字符，否定则没有；所以找到字符在右的，使用顺序环视，找的字符在左的，使用逆序环视。</p><p><img src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208182050323.png" alt="image-20220818205023327"></p><p>正向先行断言：正向顺序环视<br>负向先行断言：否定顺序环视<br>正向后行断言：肯定逆序环视<br>负向后行断言：否定逆序环视</p><p><code>(?=jeffrey)jeff</code>&#x3D;<code>jeff(?=rey)</code>：都能精确匹配第一行，第二行不会匹配</p><p><code>jeff</code>：两行都能匹配到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jeffrey</span><br><span class="line">jeffdrson</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208181719151.png" alt="image-20220818171920809"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>程序设计语言有 3 种处理正则表达式的方式：集成式 （integrated）、程序式（procedural）和面向对象式（object oriented）。在第一种方式中，正则表达式是直接内建在语言之中的，Perl就是如此。Python采用的是面向对象式的办法。Awk 使用的是集成式处理方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">R = re.<span class="built_in">compile</span>(<span class="string">&quot;^Subjrct:(.*)&quot;</span>,re.IGNORECASE)；</span><br><span class="line">M = R.search(line)</span><br><span class="line"><span class="keyword">if</span> M:</span><br><span class="line">    subject = M.group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>宽松排列和注释模式 ：此模式会忽略字符组外部的所有空白字符。字符组内部的空白字符仍然有效（java.util.regex是例外），＃符号和换行符之间的内容视为注释。</p><p>点号通配模式（dot-match-all match mode，也叫“单行模式”）：通常，点号是不能匹配换行符的。对现代编程语言来说，点号能够匹配换行符的模式和不能匹配的模式同样有用。这两种模式哪个更方便，取决于具体的情况。许多程序提供了两种方法供正则表达式选择。</p><p>增强的行锚点模式（Enhanced line-anchor match mode，也叫 “多行文本模式”）：增强的行锚点模式会影响到行锚点「^」和「$」的匹配。通常情况 下，锚点「^」不能匹配字符串内部的换行符，而只能匹配目标字符串 的起始位置。但是在此增强模式下，它能够匹配字符串中内嵌的文本行的开头位置。</p><p>文字文本模式：“文字文本（literal text）”模式几乎不能识别任何正则表达 式元字符。</p><p>字符组通常表示肯定断言（positive assertion）。也就是说， 它们必须匹配一个字符。排除型字符组仍然需要匹配一个字符，只是 它没有在字符组中列出而已。</p><p>在某些工具软件中，点号用来缩略表示可以匹配任何字符的字符 组，而在其他工具中，点号能匹配除了换行符之外的任何字符。</p><p>简单的字符组减法：<code>[[a-z]-[aeiou]]</code></p><p><img src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208191133180.png" alt="image-20220819113303159"></p><p>完整的字符组集合运算：<code>[[a-z]&amp;&amp;[^aeiou]]</code></p><p><img src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208191136925.png" alt="image-20220819113645224"></p><p><img src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208191139421.png" alt="image-20220819113949496"></p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="https://regexlearn.com/zh-cn">Regex Learn - 逐步从零基础到高阶。</a></li><li><a href="https://www.r2coding.com/#/README?id=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">Road 2 Coding (r2coding.com)</a></li><li><a href="https://deerchao.cn/tutorials/regex/regex.htm">正则表达式30分钟入门教程 (deerchao.cn)</a></li><li>精通正则表达式（effrey E. F. Friedl）：本文的绝大多数内容来源</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;元字符&quot;&gt;&lt;a href=&quot;#元字符&quot; class=&quot;headerlink&quot; title=&quot;元字符&quot;&gt;&lt;/a&gt;元字符&lt;/h1&gt;&lt;p&gt;元字符是具有特殊意义的字符，其定义在正则表达式中并不是统一的。元字符在字符组外和字符组内意义不一样。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;^&lt;/code&gt;: 脱字符，开头锚点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$&lt;/code&gt;:美元符，结尾锚点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;: 字符组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;[^]&lt;/code&gt;：排除型字符组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.&lt;/code&gt;：点号，单个任意字符（字符组外部）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;\&amp;lt;&lt;/code&gt;：单词起始位置（某些egrep可能不支持，perl使用&lt;code&gt;\b&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;\&amp;gt;&lt;/code&gt;：单词结束位置（某些egrep可能不支持，perl使用&lt;code&gt;\b&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;|&lt;/code&gt;： 或者，也叫多选分支（多选项），分隔两边表达式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;()&lt;/code&gt;：限制竖线（多选项）范围；字符组成单元，受量词作用；反向引用捕获文本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;（？：）&lt;/code&gt;：只分组不捕获，及得到的文本不会保存到变量中，不影响捕获计数&lt;/p&gt;</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="Regex" scheme="https://www.sdhlw.top/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>Daytime</title>
    <link href="https://www.sdhlw.top/Daytime/"/>
    <id>https://www.sdhlw.top/Daytime/</id>
    <published>2022-08-17T02:06:20.000Z</published>
    <updated>2023-01-17T09:33:55.995Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fc37d492d1692108e56be70f32700155de71ffe04e968100f0d4ea616c501a0a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="Regex" scheme="https://www.sdhlw.top/tags/regex/"/>
    
    <category term="Python" scheme="https://www.sdhlw.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式（视频笔记）</title>
    <link href="https://www.sdhlw.top/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F(%E8%A7%86%E9%A2%91%E7%AC%94%E8%AE%B0)/"/>
    <id>https://www.sdhlw.top/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F(%E8%A7%86%E9%A2%91%E7%AC%94%E8%AE%B0)/</id>
    <published>2022-08-16T08:11:24.000Z</published>
    <updated>2023-01-17T09:48:32.677Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本文为该视频（<a href="https://www.bilibili.com/video/BV1Kg411g7bC?p=3&share_source=copy_web&vd_source=7f2a81e814313c699f856c2ec72be7d9">三剑客正则</a>）的笔记分享。</p><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p>正则表达式regular expression（RE）（匹配有规律的东西）：</p><p>基础正则(Basic RE (BRE) )：<code>^ $ ^$ . * [a-z] [^abc]</code></p><p>扩展正则(Extended RE (ERE))：+ | （）{} ？</p><p>正则：使用一些符号表达重复出现，大小写，开头&#x2F;结尾含义</p><p>应用：三剑客（grep，awk, sed）、开发语言（python，golang, …）</p><p>使用：过滤有规律的内容</p><span id="more"></span><table><thead><tr><th>基础正则</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>以…开头的行 ^he</td></tr><tr><td>$</td><td>以…结尾的行 he$</td></tr><tr><td>^$</td><td>空行</td></tr><tr><td>.</td><td>任意一个字符</td></tr><tr><td>*</td><td>前一个字符连续出现（重复）0次或0次以上</td></tr><tr><td>.*</td><td>所有内容</td></tr><tr><td>\</td><td>转义字符 \n换行 \t tab键</td></tr><tr><td>[]</td><td>一个整体，匹配任意一个字符[abc] a或b或c</td></tr><tr><td>[^]</td><td>取反排除， [abc]</td></tr><tr><td>正则贪婪性</td><td>熟悉特点即可，.*或连续出现</td></tr></tbody></table><table><thead><tr><th>扩展正则</th><th>含义</th><th>搭配</th></tr></thead><tbody><tr><td>+</td><td>前一个字符连续出现1次或1次以上</td><td>[]+</td></tr><tr><td>|</td><td>或者</td><td></td></tr><tr><td>（）</td><td>一个整体，sed反向引用</td><td></td></tr><tr><td>{}</td><td>o{n,m}前一个字母o，至少连续出现n次，最多连续出现m次</td><td></td></tr><tr><td>？</td><td>连续出现 前一个字符出现0次或1次</td><td></td></tr></tbody></table><p>注意事项：</p><ul><li><p>所有的符号英文符号</p></li><li><p>学习正则，通过grep命令学习， grep加上单引号</p></li><li><p>给grep,egrep加上颜色：<code>alias grep = &#39;grep — color=auto&#39;</code> 和<code>alias egrep=&#39;egrep —color=auto&#39;</code></p></li><li><p>注意系统的字符集：en_US. utf-8(大部分情况没问题)，如果出现问题修改字符集为：<code>export LANG=c</code></p></li><li><p>快速掌握正则：配合grep -o 参数学习</p></li></ul><p>正则vs通配符</p><table><thead><tr><th>分类</th><th>诞生目标（用途）</th><th>支持的命令</th></tr></thead><tbody><tr><td>正则（re）</td><td>三剑客，高级语言，进行过滤（匹配字符）</td><td>三剑客grep,sed,awk,find,rename(ubuntu),expr</td></tr><tr><td>通配符（pathname extension或glob）</td><td>匹配文件（文件名）*.txt *.log {01..10}</td><td>Linux下面大部分命令都支持</td></tr></tbody></table><h1 id="基础正则详解"><a href="#基础正则详解" class="headerlink" title="基础正则详解"></a>基础正则详解</h1><p>1、<code>^...</code> 表示以什么开头的行 <code>^he</code> 以he开头的行</p><p>2、<code>...$</code> 表示以什么结尾的行<code>he$</code>以he结尾的行</p><p>有些结尾并不是看到的字符，有些隐藏了（cat -A 显示所有）</p><p>3、<code>^$ </code>空行（这一行没有任何内容，也没有空格，空格也是个字符）</p><p>排除文件中的空行：<code>grep -v &#39;^$&#39; </code>文件</p><p>4、<code>.</code>(点) 表示任意一个字符，但是<code>.</code>（点）不匹配空行</p><p>5、<code>\</code> 转义字符：去除原有特殊含义</p><p>匹配以点结尾的行 ：<code>grep &#39;.$&#39; </code>文件</p><p>转义字符序列： \n回车换行 \t tab键</p><p>6、<code>*</code> 前一个字符连续出现0 次或0次以上</p><p>连续出现：0（0出现一次）00（0出现2次）addfs(字母出现了6次)</p><p>7、<code>.*</code> 所有内容（任意内容）</p><p><code>.</code>(点)任意一个字符+ <code>*</code>前一个字符连续出现0 次或0次以上 所以就是所有内容（包括空行）</p><p>正则表达式的贪婪性，<code>._</code>表示所有或_连续出现的时候，表现出尽可能贪婪匹配</p><p>特殊情况：<code>grep &#39;2*&#39; 文件</code>  或<code>grep &#39;2*&#39; 文件</code>（所有都输出来了）</p><p><code>2* </code>数字2出现了0次或0次以上</p><p>0次以上： 2   2222   2222</p><p>0次：相当于空 （grep 空就全输出了）</p><p>8、<code>[] [abc] </code>1次匹配1个字符，匹配任何一个字符（a或b或c）</p><p><code>[a-z]</code> 代表a到z的小写字母</p><p><code>[A-Z]</code> 代表A到Z的大写字母</p><p><code>[a-zA-Z] </code>或<code>[a-Z]</code>代表大小写字母</p><p><code>[a-Z0-9] </code>代表大小写字母和数字</p><p><code>[a-z] </code>grep 用-i，不区分大小写就是代表大小写字母</p><p><code>[ ]</code>里面的内容去掉特殊含义 如<code>[a-Z|]</code>匹配大小写和|</p><p><code>（）</code>小括号 括弧</p><p><code>[ ] </code>中括号</p><p><code>&#123; &#125;</code> 大括号 花括号</p><p>9、<code>[^] </code>取反 如<code>[^abc] </code>匹配a或b或c之外的内容</p><h1 id="扩展正则详解"><a href="#扩展正则详解" class="headerlink" title="扩展正则详解"></a>扩展正则详解</h1><p>1、<code>+</code>前一个字符连续出现1次或1次以上</p><p><code>grep -E &#39;0+&#39; 文件</code>  0出现一次或一次以上，这三种命令一样效果</p><p><code>grep &#39;0+&#39; 文件</code>grep没用E参数不能使用扩展正则，但是转义字符把扩展正则转为基本正则。不推荐这样使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egrep &#x27;0+&#x27; 文件</span><br></pre></td></tr></table></figure><p>2、 | 或者 如<code>egrep &#39;apple | APPLE&#39; 文件</code></p><table><thead><tr><th>符号</th><th>含义</th><th>应用场景</th></tr></thead><tbody><tr><td>[]</td><td>1次匹配1个字符 [apple] a或p或l或e</td><td>匹配单个字符[]和+</td></tr><tr><td></td><td></td><td>匹配1个字符或多个 a</td></tr></tbody></table><p>3、（）被括起来的内容，表示一个整体（一个字符）、后向引用（反向引用sed）</p><p><code>egrep &#39;oldb(o|e)y&#39; 文件</code>  匹配oldboy或oldbey的字符</p><p>4、<code>&#123;&#125; </code>连续出现</p><table><thead><tr><th>符号</th><th></th><th></th></tr></thead><tbody><tr><td>o{n,m}</td><td>前一个字母o，至少连续出现n次，最多连续出现m次</td><td>≥n ≤m</td></tr><tr><td>o{n}</td><td>前一个字母o，连续出现n次</td><td>&#x3D;&#x3D;n</td></tr><tr><td>o{n,}</td><td>前一个字母o，至少连续出现n次</td><td>≥n</td></tr><tr><td>o{,m}</td><td>前一个字母o，最多连续出现m次</td><td>≤m</td></tr></tbody></table><p>5、<code>？</code>连续出现 前一个字符出现0次或1次</p><p><code>egrep &#39;god | gd&#39; 文件</code>等于 <code>egrep &#39;go?d&#39; 文件</code></p><p>过滤身份证号码： <code>egrep &#39;[0-9]&#123;17&#125;[0-9x]&#39; 文件</code> （1-17位数字，最后一个是数字或x）</p><p>排除文件中的空行或含有#号的行：<code>egrep -v &#39;^$ | #&#39; 文件</code></p><p>表达式<code>[0-255]</code>是一个字符集，它的含义是匹配 0，1，2，5中任意一个字符</p><p><code>[1-9][0-9]</code>可以匹配10到99之间的数字。这两个是最简单的。</p><hr><p>grep ‘搜索内容’ 文件</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>-a</td><td>将 binary 文件以 text 文件的方式搜寻数据</td></tr><tr><td>-c</td><td>计算找到 ‘搜寻字符串’ 的次数</td></tr><tr><td>-i</td><td>忽略大小写的不同，所以大小写视为相同</td></tr><tr><td>-n</td><td>顺便输出行号</td></tr><tr><td>-v</td><td>反向选择，亦即显示出没有 ‘搜寻字符串’ 内容的那一行！</td></tr><tr><td>–color&#x3D;auto</td><td>可以将找到的关键词部分加上颜色的显示喔！</td></tr><tr><td>-o</td><td>显示匹配过程，即只显示匹配到的内容</td></tr><tr><td>-E</td><td>支持扩展正则(扩展正则用grep -E 或egrep)</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文为该视频（&lt;a href=&quot;https://www.bilibili.com/video/BV1Kg411g7bC?p=3&amp;share_source=copy_web&amp;vd_source=7f2a81e814313c699f856c2ec72be7d9&quot;&gt;三剑客正则&lt;/a&gt;）的笔记分享。&lt;/p&gt;
&lt;h1 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h1&gt;&lt;p&gt;正则表达式regular expression（RE）（匹配有规律的东西）：&lt;/p&gt;
&lt;p&gt;基础正则(Basic RE (BRE) )：&lt;code&gt;^ $ ^$ . * [a-z] [^abc]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;扩展正则(Extended RE (ERE))：+ | （）{} ？&lt;/p&gt;
&lt;p&gt;正则：使用一些符号表达重复出现，大小写，开头&amp;#x2F;结尾含义&lt;/p&gt;
&lt;p&gt;应用：三剑客（grep，awk, sed）、开发语言（python，golang, …）&lt;/p&gt;
&lt;p&gt;使用：过滤有规律的内容&lt;/p&gt;</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="Regex" scheme="https://www.sdhlw.top/tags/regex/"/>
    
    <category term="Video notes" scheme="https://www.sdhlw.top/tags/video-notes/"/>
    
  </entry>
  
  <entry>
    <title>优化Python运行速度</title>
    <link href="https://www.sdhlw.top/%E4%BC%98%E5%8C%96Python%E8%BF%90%E8%A1%8C%E9%80%9F%E5%BA%A6/"/>
    <id>https://www.sdhlw.top/%E4%BC%98%E5%8C%96Python%E8%BF%90%E8%A1%8C%E9%80%9F%E5%BA%A6/</id>
    <published>2022-08-11T13:25:42.000Z</published>
    <updated>2023-01-17T09:32:43.804Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>[TOC]</p><h1 id="一、一般流程"><a href="#一、一般流程" class="headerlink" title="一、一般流程"></a>一、一般<a href="https://blog.51cto.com/u_15353042/3746066">流程</a></h1><p>第一, 寻找慢的问题点<br>第二, 针对比较慢的算法, 要具体的深入的进行分析它慢的原因. 也可以采用计时的方法剖析, 庖丁解牛.<br>第三步, 优化算法<br>第四步, 优化编译器和语言问题.<br>第五步, 上硬件.</p><p>考虑哪个函数耗时比较长：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">t1= time.time()</span><br><span class="line">  函数1()</span><br><span class="line">t2= time.time()</span><br><span class="line"></span><br><span class="line">print(&quot;耗时&quot;,t2-t1)  #多段打印, 多试几次, </span><br></pre></td></tr></table></figure><hr><p><strong>进程</strong>：一个在内存中运行的应用程序。每个进程都有自己独立的一块内存空间，一个进程可以有多个线程。<br><strong>线程</strong>：进程中的一个执行任务，负责当前进程中程序的<a href="https://blog.csdn.net/ThinkWon/article/details/102021274">执行</a>。</p><p>1、全局解释器锁原因：如果你的程序只有单线程、单进程，代码的速度和性能不会受到全局解释器锁的影响。</p><p>单进程中使用多线程实现并发，并且是 IO 密集型（例如网络 IO 或磁盘 IO）的线程，GIL 竞争的效果就很明显了。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[为什么 Python 这么慢？ - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/47795989)">[1]</span></a></sup></p><ul><li>PyPy 也是一种带有 GIL 的解释器</li><li>PyPy 也是一种带有 GIL 的解释器</li></ul><h1 id="二、For循环多进程-amp-多线程"><a href="#二、For循环多进程-amp-多线程" class="headerlink" title="二、For循环多进程&amp;多线程"></a>二、For循环多进程&amp;多线程</h1><p><img src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208122144160.png" alt="image-20220812213731617"></p><center>任务管理器--性能</center><h2 id="1、GIL锁"><a href="#1、GIL锁" class="headerlink" title="1、GIL锁"></a>1、GIL锁</h2><p>python始于1991年，创立初期对运算的要求不高，为了解决多线程共享内存的数据安全问题，引入了GIL锁，全称为Global Interpreter Lock，也就是全局解释器锁。</p><p><strong>GIL规定，在一个进程中每次只能有一个线程在运行。</strong>这个GIL锁相当于是线程运行的资格证，某个线程想要运行，首先要获得GIL锁，然后遇到IO或者超时的时候释放GIL锁，给其余的线程去竞争，竞争成功的线程获得GIL锁得到下一次运行的机会。</p><p>正是因为有GIL的存在，python的多线程其实是假的，所以才有人说python的多线程非常鸡肋。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://blog.csdn.net/Victor2code/article/details/109005171">[2]</span></a></sup></p><h2 id="2、多进程"><a href="#2、多进程" class="headerlink" title="2、多进程"></a>2、多进程</h2><p><a href="https://blog.csdn.net/weixin_35757704/article/details/118799165">来源1</a>、</p><p>进程的创建和停止都是消耗资源的所以进程绝不是越多越好。因为单个CPU核某时刻只能执行单个进程，所以最好的情况是将进程数量与CPU核数相等，这样可以最大化利用CPU。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通情况</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tes</span>(<span class="params">a</span>):               <span class="comment"># for循环里的东西先写成函数</span></span><br><span class="line">    a = <span class="number">2</span> ** a</span><br><span class="line">    time.sleep(<span class="number">0.2</span>)       <span class="comment"># time.sleep()推迟调用线程的运行，可通过参数secs指秒数</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        tes(i)</span><br><span class="line">    t2=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;普通耗时：&quot;</span>,t2-t1)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 普通耗时： 4.1959967613220215</span></span><br></pre></td></tr></table></figure><h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><p>维持一个水位即进程数是恒定的，不够就补，并且保持在一个上限，不许超出上限。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tes</span>(<span class="params">a</span>):               <span class="comment"># for循环里的东西先写成函数</span></span><br><span class="line">    a = <span class="number">2</span> ** a</span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t3=time.time()</span><br><span class="line">    pool = multiprocessing.Pool(<span class="number">2</span>)  <span class="comment"># 两个进程执行</span></span><br><span class="line">    <span class="comment"># pool = multiprocessing.Pool(multiprocessing.cpu_count()) # 全部cpu执行</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        pool.apply_async(func=tes,args=(i,))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    t4=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;多进程耗时：&quot;</span>,t4-t3)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 多进程耗时： 2.679999589920044    两进程</span></span><br><span class="line"><span class="comment"># 多进程耗时： 1.9049992561340332   全部CPU</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多进程模板(进程池)</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tes</span>():    <span class="comment"># 把for循环下的内容写成一个函数</span></span><br><span class="line">    代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = multiprocessing.Pool(<span class="number">2</span>)  <span class="comment"># 两个进程执行</span></span><br><span class="line">    <span class="comment"># pool = multiprocessing.Pool(multiprocessing.cpu_count()) # 全部cpu执行</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        pool.apply_async(func=tes,args=(i,))  <span class="comment"># 填写定义的函数、参数</span></span><br><span class="line">    pool.close()     <span class="comment"># close()方法，进程池不再接受新的任务（注意不是进程）</span></span><br><span class="line">    pool.join()    <span class="comment"># join()方法，阻塞主进程，一定要在close()或者terminate()之后。</span></span><br></pre></td></tr></table></figure><h2 id="3、多线程"><a href="#3、多线程" class="headerlink" title="3、多线程"></a>3、多线程</h2><p><a href="https://zhuanlan.zhihu.com/p/34004179">来源1</a>；<a href="https://zyzypeter.github.io/2017/11/23/Python-thread-and-processing/">来源2</a></p><p><a href="https://blog.csdn.net/Victor2code/article/details/109005171">(96条消息) python多进程和多线程看这一篇就够了_T型人小付的博客-CSDN博客_python多进程和多线程</a></p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, wait, ALL_COMPLETED</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tes</span>(<span class="params">a</span>):               <span class="comment"># for循环里的东西先写成函数</span></span><br><span class="line">    a = <span class="number">2</span> ** a</span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ti1=time.time()</span><br><span class="line">    executor = ThreadPoolExecutor(<span class="number">5</span>)</span><br><span class="line">    all_tasks = [executor.submit(tes, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line">    wait(all_tasks, return_when=ALL_COMPLETED)</span><br><span class="line">    ti2=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;多线程耗费时间：&quot;</span>,ti2-ti1)</span><br><span class="line">    </span><br><span class="line">多线程耗费时间： <span class="number">0.8389759063720703</span></span><br></pre></td></tr></table></figure><h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zhuanlan.zhihu.com/p/47795989">为什么 Python 这么慢？ - 知乎 (zhihu.com)</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://blog.csdn.net/Victor2code/article/details/109005171<a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    
    <summary type="html">记录优化Python运行速度的小技巧</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="Python" scheme="https://www.sdhlw.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SGE作业调度系统</title>
    <link href="https://www.sdhlw.top/SGE%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://www.sdhlw.top/SGE%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-08-11T07:48:43.000Z</published>
    <updated>2023-01-17T09:14:43.346Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>不要在登录节点（管理节点）上运行大型[程序](<a href="https://github.com/hnnd/bcl">hnnd&#x2F;bcl (github.com)</a>)</p><ul><li><p>qrsh登录计算节点</p></li><li><p>qsub递交批量任务</p><p>创建<code>work.sh</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#$ -S /bin/bash</span><br><span class="line">#$ -N JobName</span><br><span class="line">#$ -cwd</span><br><span class="line">#$ -j y</span><br><span class="line">#$ -pe smp 5</span><br><span class="line">#$ -l mem_free=6G,h_vmem=6G</span><br><span class="line">需要执行的任务命令</span><br></pre></td></tr></table></figure><p>提交任务：<code>qsub work.sh</code></p><p>查看任务运行情况：<code>qstat</code></p><p>删除任务：<code>qdel 139</code></p></li></ul><p>详解：</p><ol><li>Use the <code>-pe local K</code> option to request K slots on a single cluster node.</li><li>use the <code>-R y</code> option to turn on slot reservation.</li><li>Use the <code>mem_free=NG</code> option to specify N Gigabytes of memory your job(指定作业多少G内存).</li><li>Use <code>h_vmem= nG</code> to set the hard memory limit for your job. Important: the value, <code>n</code>, you set in <code>h_vmem</code> is the total memory you set via <code>mem_free</code> divided by the number of slots specified for <code>-pe</code>. In other words n&#x3D;N&#x2F;K.</li><li><code>-S shell_path</code>：指定运行Shell<a href="https://www.cnblogs.com/renping/p/7441494.html">环境</a></li><li><code>-N job_name</code>：重命名作业名</li><li><code>-cwd </code>：从当前工作路径运行作业</li><li><code>-j y[es]|n[o]</code>：定义作业的标准错误输出是否写入到输出文件中</li></ol><p>推荐阅读：<a href="https://qpeng.org/prog/sge.htm">https://qpeng.org/prog/sge.htm</a></p>]]></content>
    
    
    <summary type="html">不要在登录节点（管理节点）上运行大型程序</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="Linux" scheme="https://www.sdhlw.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Python-base</title>
    <link href="https://www.sdhlw.top/Python-base/"/>
    <id>https://www.sdhlw.top/Python-base/</id>
    <published>2022-08-09T13:15:31.000Z</published>
    <updated>2023-01-17T09:31:42.430Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="1、设置双击-py文件打开的软件"><a href="#1、设置双击-py文件打开的软件" class="headerlink" title="1、设置双击.py文件打开的软件"></a>1、设置双击<code>.py</code>文件打开的软件</h1><p>找到一个<code>.py</code>文件，右键点击属性，常规–打开方式–更改，选择打开<code>.py</code>文件的应用。</p><h1 id="2、Pycharm下载包"><a href="#2、Pycharm下载包" class="headerlink" title="2、Pycharm下载包"></a>2、Pycharm<a href="https://blog.csdn.net/qiannianguji01/article/details/50397046">下载包</a></h1><ul><li>打开Pycharm，点击File,再点击settings</li><li>点击settings之后再点击project下面的project Interpreter</li><li>接下来点击上面界面右上角的“+”将会出现如下界面：然后在搜索框中搜索需要安装的第三方库（此处搜索requests）然后点击界面左下角的Install Package进行安装即可。</li></ul><h1 id="3、Pycharm已下载包，但是提示找不到"><a href="#3、Pycharm已下载包，但是提示找不到" class="headerlink" title="3、Pycharm已下载包，但是提示找不到"></a>3、Pycharm已下载包，但是提示找不到</h1><p>Pycharm已下载包，但是终端的Python却找不到包：有多个Python环境，解释器路径<a href="https://blog.csdn.net/qq_41088475/article/details/103984400">不一样</a>。</p><p>查看自己项目大概位置：</p><p><img src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208101115765.png" alt="image-20220810111358060"></p><p>不同项目的解释器可能不一样，打开解释器选择界面：</p><p><img src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208101115636.png" alt="image-20220810111051813"></p><p>选择自己项目相关的解释器，点击Apply，OK：</p><p><img src="https://cdn.jsdelivr.net/gh/sdhlw/blog-image/202208101115390.png" alt="image-20220810111247989"></p><p>再回到终端，包即可使用。</p><h1 id="4、f-string"><a href="#4、f-string" class="headerlink" title="4、f-string"></a>4、f-string</h1><p>f-string，亦称为格式化字符串常量（formatted string literals），是Python3.6新引入的一种字符串格式化方法。f-string在形式上是以 <code>f</code> 或 <code>F</code> 修饰符引领的字符串（<code>f&#39;xxx&#39;</code> 或 <code>F&#39;xxx&#39;</code>），以大括号 <code>&#123;&#125;</code> 标明被替换的字段；f-string在本质上并不是字符串常量，而是一个在运行时运算求值的表达式。<a href="https://blog.csdn.net/sunxb10/article/details/81036693">来源</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; i=<span class="string">&#x27;a.tsv&#x27;</span></span>  </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">dd</span> = pd.read_csv(f<span class="string">&#x27;D:/mydata/&#123;i&#125;&#x27;</span>)</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; name = <span class="string">&#x27;Eric&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; f<span class="string">&#x27;Hello, my name is &#123;name&#125;&#x27;</span></span></span><br><span class="line">&#x27;Hello, my name is Eric&#x27;</span><br></pre></td></tr></table></figure><p>Python 中的字符串格式<a href="https://geek-docs.com/python/python-tutorial/python-fstring.html">设置</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;Peter&#x27;</span></span><br><span class="line">age = <span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s is %d years old&#x27;</span> % (name, age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; is &#123;&#125; years old&#x27;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span> is <span class="subst">&#123;age&#125;</span> years old&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="5、从字符串中提取数字"><a href="#5、从字符串中提取数字" class="headerlink" title="5、从字符串中提取数字"></a>5、从字符串中提取数字</h1><p><a href="https://blog.csdn.net/qq_38486203/article/details/80309478">来源</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: cp936 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">string=<span class="string">&quot;A1.45，b5，6.45，8.82&quot;</span></span><br><span class="line"><span class="built_in">print</span> re.findall(<span class="string">r&quot;\d+\.?\d*&quot;</span>,string)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># [&#x27;1.45&#x27;, &#x27;5&#x27;, &#x27;6.45&#x27;, &#x27;8.82&#x27;]</span></span><br></pre></td></tr></table></figure><p>正则：<code>&quot;\d+.?\d*&quot;</code></p><ul><li><code>\d+</code> 匹配1次或者多次数字，注意这里不要写成<code>*</code>，因为即便是小数，小数点之前也得有一个数字；</li><li><code>\.?</code> 这个是匹配小数点的，可能有，也可能没有；</li><li><code>\d*</code> 这个是匹配小数点之后的数字的，所以是0个或者多个；</li></ul><h1 id="6、列表中的字符串转换为整数"><a href="#6、列表中的字符串转换为整数" class="headerlink" title="6、列表中的字符串转换为整数"></a>6、列表中的字符串转换为整数</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">results = [1, 2, 3]</span><br><span class="line">results = list(map(int, results))</span><br><span class="line">nums=[int(num) for num in results]</span><br></pre></td></tr></table></figure><h1 id="7、sort-与-sorted-区别"><a href="#7、sort-与-sorted-区别" class="headerlink" title="7、sort 与 sorted 区别"></a>7、sort 与 sorted 区别</h1><ul><li>sort 是应用在 list 上的方法，属于列表的成员方法，sorted 可以对所有可迭代的对象进行排序操作。</li><li>list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。</li><li>sort使用方法为ls.sort()，而sorted使用方法为sorted(ls)</li></ul><p>reverse &#x3D; True 降序 ， reverse &#x3D; False 升序（sort和sorted默认）</p><h1 id="8、Pycharm-多行注释（取消注释）"><a href="#8、Pycharm-多行注释（取消注释）" class="headerlink" title="8、Pycharm 多行注释（取消注释）"></a>8、Pycharm 多行注释（取消注释）</h1><p>Ctrl + &#x2F;</p><h1 id="9、带if条件语句的lambda函数"><a href="#9、带if条件语句的lambda函数" class="headerlink" title="9、带if条件语句的lambda函数"></a>9、带if条件语句的lambda函数</h1><p><code>lambda x: 返回值1 if 条件 else (返回值2 if 条件 else 返回值3)</code></p><p>[if符合返回值] <strong>if</strong> 条件 <strong>else</strong> [else符合返回值] [来源](<a href="https://0xzx.com/202002080939501826.html">如何在Python的Lambda函数中使用if，else和elif - 0x资讯 (0xzx.com)</a>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">verify = lambda x: True if (x &gt; 11 and x &lt; 22) else False</span><br><span class="line">converter = lambda x : x*2 if x &lt; 11 else (x*3 if x &lt; 22 else x)</span><br></pre></td></tr></table></figure><h1 id="10、ASSCII值"><a href="#10、ASSCII值" class="headerlink" title="10、ASSCII值"></a>10、ASSCII值</h1><p><a href="https://tool.oschina.net/commons?type=4">来源</a></p><table><thead><tr><th>ASSCII值</th><th>控制字符</th></tr></thead><tbody><tr><td>48</td><td>0</td></tr><tr><td>49</td><td>1</td></tr><tr><td>50</td><td>2</td></tr><tr><td>…</td><td>…</td></tr><tr><td>57</td><td>9</td></tr><tr><td></td><td></td></tr><tr><td>65</td><td>A</td></tr><tr><td>66</td><td>B</td></tr><tr><td>67</td><td>C</td></tr><tr><td>…</td><td>…</td></tr><tr><td>90</td><td>Z</td></tr><tr><td></td><td></td></tr><tr><td>97</td><td>a</td></tr><tr><td>98</td><td>b</td></tr><tr><td>99</td><td>c</td></tr><tr><td>…</td><td>…</td></tr><tr><td>122</td><td>z</td></tr></tbody></table><h1 id="11、列表中嵌套列表，变字符为数字排序"><a href="#11、列表中嵌套列表，变字符为数字排序" class="headerlink" title="11、列表中嵌套列表，变字符为数字排序"></a>11、列表中嵌套列表，变字符为数字排序</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num=[[&#x27;3&#x27;],[&#x27;9&#x27;],[&#x27;1&#x27;],[&#x27;20&#x27;]]</span><br><span class="line">num2 = []</span><br><span class="line">for j in num:</span><br><span class="line">    num2.append(int(j[0]))</span><br><span class="line">num2 = sorted(num2)</span><br><span class="line">print(num2)</span><br><span class="line"></span><br><span class="line">[1, 3, 9, 20]</span><br></pre></td></tr></table></figure><h1 id="12、if-name-x3D-x3D-‘main‘"><a href="#12、if-name-x3D-x3D-‘main‘" class="headerlink" title="12、if name &#x3D;&#x3D; ‘main‘"></a>12、if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘</h1><p><a href="https://www.zhihu.com/question/49136398/answer/1654722335">来源</a></p><p><code>if __name__ == &#39;__main__&#39; :</code>后面缩进的内容（代称为A），如果是该python文件被执行，那么该A内容会被执行，如果该文件被导入到另一个文件中，执行另一个文件，A内容不会被执行。</p><p><code>_name_</code>是一个属性，在自己文件中值为main，在其他文件中值为文件名（模块名）。if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘表示是不是本文件，是的话，执行冒号后面缩进的内容。 </p><h1 id="13、字符串是否是正整数"><a href="#13、字符串是否是正整数" class="headerlink" title="13、字符串是否是正整数"></a>13、字符串是否是正整数</h1><p><code>string.isdigit()</code>：如果是正整数，返回True；反之，返回False。</p><h1 id="14、文件的创建和写入"><a href="#14、文件的创建和写入" class="headerlink" title="14、文件的创建和写入"></a>14、文件的创建和写入</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;a.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)  <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;hello &#123;&#125;,hello &#123;&#125;&quot;</span>.<span class="built_in">format</span>(a, b))</span><br><span class="line"><span class="comment"># w：只写，文件存在覆盖，文件不存在创建</span></span><br><span class="line"><span class="comment"># a：追加，文件存在追加，文件不存在创建</span></span><br><span class="line"><span class="comment"># r：只读，文件存在读，文件不存在返回异常</span></span><br><span class="line"><span class="comment"># x：只写，文件存在返回异常，文件不存在创建</span></span><br><span class="line"><span class="comment"># b：以二进制打开</span></span><br><span class="line"><span class="comment"># t：以文本文件方式打开，默认值</span></span><br><span class="line"><span class="comment"># +：与以上同时使用，以增加功能</span></span><br></pre></td></tr></table></figure><h1 id="15、局部变量和全局变量"><a href="#15、局部变量和全局变量" class="headerlink" title="15、局部变量和全局变量"></a>15、局部变量和全局变量</h1><p><a href="http://c.biancheng.net/view/2259.html">来源</a></p><p>1、局部变量（Local Variable）：在函数内部定义的变量（只能在函数内部使用）</p><ul><li><code>local()</code>：返回局部变量组成的字典，可以访问变量，但是无法修改变量的值</li></ul><p>2、全局变量（Global Variable）：在所有函数的外部定义的变量</p><ul><li><p>在函数外部定义</p></li><li><p>在函数内部使用global关键词定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">text</span>():</span><br><span class="line">    <span class="keyword">global</span> add</span><br><span class="line">    add = <span class="string">&quot;https://adf.com&quot;</span></span><br><span class="line"><span class="comment"># 使用 global 关键字修饰变量名时，不能直接给变量赋初值，否则会引发语法错误。</span></span><br></pre></td></tr></table></figure></li><li><p><code>globals() </code>：返回一个所有全局变量的字典，该字典中的每个键值对，键为变量名，值为该变量的值。变量可访问，也可修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pyname = <span class="string">&quot;Python教程&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">globals</span>()[<span class="string">&#x27;Pyname&#x27;</span>])   <span class="comment"># 输出为Python教程</span></span><br><span class="line"><span class="keyword">global</span>()[<span class="string">&#x27;Pyname&#x27;</span>] = <span class="string">&quot;Python入门教程&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">globals</span>()[<span class="string">&#x27;Pyname&#x27;</span>])   <span class="comment"># 输出为Python入门教程</span></span><br></pre></td></tr></table></figure><h1 id="16、查看python解释器类型："><a href="#16、查看python解释器类型：" class="headerlink" title="16、查看python解释器类型："></a>16、查看python解释器类型：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import os </span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">sys.version  # 内有PyPy即为PyPy解释器</span><br><span class="line">os.name   # 返回有Java，即为Jython解释器</span><br><span class="line">sys.version.startswith</span><br></pre></td></tr></table></figure><h1 id="16、编码方式"><a href="#16、编码方式" class="headerlink" title="16、编码方式"></a>16、编码方式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.getdefaultencoding()</span><br><span class="line"></span><br><span class="line">from IPython.utils.encoding import get_stream_enc; import sys</span><br><span class="line">get_stream_enc(sys.stdout)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>iPython is getting the encoding from the <a href="https://stackoverflow.com/questions/55289288/change-ipython-stream-encoding">environment</a> (<code>$LANG</code> etc). </p><p>iPython是从环境中获得编码方式的，目前iPython用的是GBK方式编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get_stream_enc(sys.stdout)</span><br><span class="line">Out[21]: &#x27;gbk&#x27;</span><br></pre></td></tr></table></figure><p>换成utf-8的方式是，</p></li></ul><p>17、类、函数，方法，库</p>]]></content>
    
    
    <summary type="html">记录Python的基本使用</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="Python" scheme="https://www.sdhlw.top/tags/python/"/>
    
    <category term="Pycharm" scheme="https://www.sdhlw.top/tags/pycharm/"/>
    
  </entry>
  
  <entry>
    <title>生信软件的使用</title>
    <link href="https://www.sdhlw.top/%E7%94%9F%E4%BF%A1%E8%BD%AF%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.sdhlw.top/%E7%94%9F%E4%BF%A1%E8%BD%AF%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-08-09T08:41:20.000Z</published>
    <updated>2023-01-17T09:53:29.975Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Seqkit"><a href="#Seqkit" class="headerlink" title="Seqkit"></a>Seqkit</h1><p><a href="https://liuyang0681.github.io/2019/04/25/seqkit-fa-fq%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%88%A9%E5%99%A8/">参考</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seqkit stat test.fa  # 序列长度的整体分布统计</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">记录生信软件的一些基本使用</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="Software" scheme="https://www.sdhlw.top/tags/software/"/>
    
    <category term="Seqkit" scheme="https://www.sdhlw.top/tags/seqkit/"/>
    
  </entry>
  
  <entry>
    <title>文献管理</title>
    <link href="https://www.sdhlw.top/%E6%96%87%E7%8C%AE%E7%AE%A1%E7%90%86/"/>
    <id>https://www.sdhlw.top/%E6%96%87%E7%8C%AE%E7%AE%A1%E7%90%86/</id>
    <published>2022-08-07T14:08:54.000Z</published>
    <updated>2023-01-17T10:01:55.254Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>1、本地文献以一个字母开头（与课题相关）数字文献名作为文件名。（eg：k1、my literature）</p><p>2、本地文献与Endnote相一致，ID为字母与数字，Label填写细分类或关键词，方便定位，Rating打分。</p>]]></content>
    
    
    <summary type="html">记录自己文献管理的技巧</summary>
    
    
    
    <category term="Study" scheme="https://www.sdhlw.top/categories/study/"/>
    
    
    <category term="文献管理" scheme="https://www.sdhlw.top/tags/%E6%96%87%E7%8C%AE%E7%AE%A1%E7%90%86/"/>
    
    <category term="Endnote" scheme="https://www.sdhlw.top/tags/endnote/"/>
    
  </entry>
  
</feed>
